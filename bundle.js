/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return null !== obj && 'object' === typeof obj;\n}\n\nmodule.exports = isObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vc3VwZXJhZ2VudC9saWIvaXMtb2JqZWN0LmpzPzllZGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENoZWNrIGlmIGBvYmpgIGlzIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiBudWxsICE9PSBvYmogJiYgJ29iamVjdCcgPT09IHR5cGVvZiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc3VwZXJhZ2VudC9saWIvaXMtb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // import * as d3 from 'd3'\n\n// import newsroom from './newsroom'\n\n\n__webpack_require__(19);\n\nvar _graphic = __webpack_require__(6);\n\nvar _graphic2 = _interopRequireDefault(_graphic);\n\nvar _histogram = __webpack_require__(7);\n\nvar _histogram2 = _interopRequireDefault(_histogram);\n\nvar _table = __webpack_require__(13);\n\nvar _table2 = _interopRequireDefault(_table);\n\nvar _slope = __webpack_require__(10);\n\nvar _slope2 = _interopRequireDefault(_slope);\n\nvar _swarm = __webpack_require__(12);\n\nvar _swarm2 = _interopRequireDefault(_swarm);\n\nvar _scatters = __webpack_require__(9);\n\nvar _scatters2 = _interopRequireDefault(_scatters);\n\nvar _arrowScatter = __webpack_require__(4);\n\nvar _arrowScatter2 = _interopRequireDefault(_arrowScatter);\n\nvar _swarmLeader = __webpack_require__(11);\n\nvar _swarmLeader2 = _interopRequireDefault(_swarmLeader);\n\nvar _maps = __webpack_require__(8);\n\nvar _maps2 = _interopRequireDefault(_maps);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction cleanTk(d) {\n\treturn _extends({}, d);\n}\n\nfunction init() {\n\treturn new Promise(function (resolve, reject) {\n\t\td3.queue().defer(d3.csv, 'assets/map_data_3.csv').defer(d3.csv, 'assets/lats_2.csv').defer(d3.csv, 'assets/newsidsunique_4.csv')\n\t\t// .defer(d3.csv,'assets/news_ids.csv')\n\t\t.defer(d3.json, 'assets/usJson.json')\n\t\t// .defer(d3.csv,'assets/top_3.csv')\n\t\t.defer(d3.csv, 'assets/census_4.csv').defer(d3.csv, 'assets/census_override_4.csv').defer(d3.csv, 'assets/new_2018_3.csv').awaitAll(function (err, result) {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\t// // maps.init(result[0],result[1],result[2],result[3],result[4]);\n\t\t\t\t// arrowScatter.init(result[0],result[1],result[2],result[3]);\n\t\t\t\t// scatter.init(result[0],result[1],result[2],result[3]);\n\t\t\t\t_swarm2.default.init(result[0], result[1], result[2], result[3], result[4], result[5], result[6]);\n\t\t\t\t// swarmLeader.init(result[0],result[1],result[2],result[3],result[5]);\n\t\t\t\t// graphic.init(result[0],result[1],result[2],result[3]);\n\t\t\t\t// histogram.init(result[0],result[1],result[2],result[3]);\n\t\t\t\t// table.init(result[0],result[1],result[2],result[3]);\n\t\t\t\t// slope.init(result[0],result[1],result[2],result[3]);\n\t\t\t\t// newsroom.init();\n\t\t\t}\n\t\t});\n\t});\n}\n\nexports.default = { init: init };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvbG9hZC1kYXRhLmpzPzdhZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnXG5pbXBvcnQgJ3Byb21pcydcbmltcG9ydCBncmFwaGljIGZyb20gJy4vZ3JhcGhpYydcbmltcG9ydCBoaXN0b2dyYW0gZnJvbSAnLi9oaXN0b2dyYW0nXG5pbXBvcnQgdGFibGUgZnJvbSAnLi90YWJsZSdcbi8vIGltcG9ydCBuZXdzcm9vbSBmcm9tICcuL25ld3Nyb29tJ1xuaW1wb3J0IHNsb3BlIGZyb20gJy4vc2xvcGUnXG5pbXBvcnQgc3dhcm0gZnJvbSAnLi9zd2FybSdcbmltcG9ydCBzY2F0dGVyIGZyb20gJy4vc2NhdHRlcnMnXG5pbXBvcnQgYXJyb3dTY2F0dGVyIGZyb20gJy4vYXJyb3ctc2NhdHRlcidcbmltcG9ydCBzd2FybUxlYWRlciBmcm9tICcuL3N3YXJtLWxlYWRlcidcbmltcG9ydCBtYXBzIGZyb20gJy4vbWFwcydcblxuZnVuY3Rpb24gY2xlYW5UayhkKSB7XG5cdHJldHVybiB7XG5cdFx0Li4uZCxcblx0fVxufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGQzLnF1ZXVlKClcblx0XHRcdC5kZWZlcihkMy5jc3YsJ2Fzc2V0cy9tYXBfZGF0YV8zLmNzdicpXG5cdFx0XHQuZGVmZXIoZDMuY3N2LCdhc3NldHMvbGF0c18yLmNzdicpXG5cdFx0XHQuZGVmZXIoZDMuY3N2LCdhc3NldHMvbmV3c2lkc3VuaXF1ZV80LmNzdicpXG5cdFx0XHQvLyAuZGVmZXIoZDMuY3N2LCdhc3NldHMvbmV3c19pZHMuY3N2Jylcblx0XHRcdC5kZWZlcihkMy5qc29uLCdhc3NldHMvdXNKc29uLmpzb24nKVxuXHRcdFx0Ly8gLmRlZmVyKGQzLmNzdiwnYXNzZXRzL3RvcF8zLmNzdicpXG5cdFx0XHQuZGVmZXIoZDMuY3N2LCdhc3NldHMvY2Vuc3VzXzQuY3N2Jylcblx0XHRcdC5kZWZlcihkMy5jc3YsJ2Fzc2V0cy9jZW5zdXNfb3ZlcnJpZGVfNC5jc3YnKVxuXHRcdFx0LmRlZmVyKGQzLmNzdiwnYXNzZXRzL25ld18yMDE4XzMuY3N2Jylcblx0XHRcdC5hd2FpdEFsbCgoZXJyLCByZXN1bHQpID0+IHtcblx0XHRcdFx0aWYgKGVycil7XG5cdFx0XHRcdFx0cmVqZWN0KGVycilcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHQvLyAvLyBtYXBzLmluaXQocmVzdWx0WzBdLHJlc3VsdFsxXSxyZXN1bHRbMl0scmVzdWx0WzNdLHJlc3VsdFs0XSk7XG5cdFx0XHRcdFx0Ly8gYXJyb3dTY2F0dGVyLmluaXQocmVzdWx0WzBdLHJlc3VsdFsxXSxyZXN1bHRbMl0scmVzdWx0WzNdKTtcblx0XHRcdFx0XHQvLyBzY2F0dGVyLmluaXQocmVzdWx0WzBdLHJlc3VsdFsxXSxyZXN1bHRbMl0scmVzdWx0WzNdKTtcblx0XHRcdFx0XHRzd2FybS5pbml0KHJlc3VsdFswXSxyZXN1bHRbMV0scmVzdWx0WzJdLHJlc3VsdFszXSxyZXN1bHRbNF0scmVzdWx0WzVdLHJlc3VsdFs2XSk7XG5cdFx0XHRcdFx0Ly8gc3dhcm1MZWFkZXIuaW5pdChyZXN1bHRbMF0scmVzdWx0WzFdLHJlc3VsdFsyXSxyZXN1bHRbM10scmVzdWx0WzVdKTtcblx0XHRcdFx0XHQvLyBncmFwaGljLmluaXQocmVzdWx0WzBdLHJlc3VsdFsxXSxyZXN1bHRbMl0scmVzdWx0WzNdKTtcblx0XHRcdFx0XHQvLyBoaXN0b2dyYW0uaW5pdChyZXN1bHRbMF0scmVzdWx0WzFdLHJlc3VsdFsyXSxyZXN1bHRbM10pO1xuXHRcdFx0XHRcdC8vIHRhYmxlLmluaXQocmVzdWx0WzBdLHJlc3VsdFsxXSxyZXN1bHRbMl0scmVzdWx0WzNdKTtcblx0XHRcdFx0XHQvLyBzbG9wZS5pbml0KHJlc3VsdFswXSxyZXN1bHRbMV0scmVzdWx0WzJdLHJlc3VsdFszXSk7XG5cdFx0XHRcdFx0Ly8gbmV3c3Jvb20uaW5pdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXHR9KVxufVxuXG5leHBvcnQgZGVmYXVsdCB7IGluaXQgfVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy9sb2FkLWRhdGEuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFOQTtBQUNBO0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBSkE7QUFNQTtBQU5BO0FBV0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n// device sniffing for mobile\n\nvar isMobile = {\n\tandroid: function android() {\n\t\treturn navigator.userAgent.match(/Android/i);\n\t},\n\n\tblackberry: function blackberry() {\n\t\treturn navigator.userAgent.match(/BlackBerry/i);\n\t},\n\n\tios: function ios() {\n\t\treturn navigator.userAgent.match(/iPhone|iPad|iPod/i);\n\t},\n\n\topera: function opera() {\n\t\treturn navigator.userAgent.match(/Opera Mini/i);\n\t},\n\n\twindows: function windows() {\n\t\treturn navigator.userAgent.match(/IEMobile/i);\n\t},\n\n\tany: function any() {\n\t\treturn isMobile.android() || isMobile.blackberry() || isMobile.ios() || isMobile.opera() || isMobile.windows();\n\t}\n};\n\nexports.default = isMobile;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvdXRpbHMvaXMtbW9iaWxlLmpzPzY1NGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZGV2aWNlIHNuaWZmaW5nIGZvciBtb2JpbGVcblxuY29uc3QgaXNNb2JpbGUgPSB7XG5cdGFuZHJvaWQ6ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQvaSksXG5cblx0YmxhY2tiZXJyeTogKCkgPT4gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQmxhY2tCZXJyeS9pKSxcblxuXHRpb3M6ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQaG9uZXxpUGFkfGlQb2QvaSksXG5cblx0b3BlcmE6ICgpID0+IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL09wZXJhIE1pbmkvaSksXG5cblx0d2luZG93czogKCkgPT4gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvSUVNb2JpbGUvaSksXG5cblx0YW55OiAoKSA9PiAoXG5cdFx0aXNNb2JpbGUuYW5kcm9pZCgpIHx8XG5cdFx0aXNNb2JpbGUuYmxhY2tiZXJyeSgpIHx8XG5cdFx0aXNNb2JpbGUuaW9zKCkgfHxcblx0XHRpc01vYmlsZS5vcGVyYSgpIHx8XG5cdFx0aXNNb2JpbGUud2luZG93cygpXG5cdCksXG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTW9iaWxlXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL3V0aWxzL2lzLW1vYmlsZS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBWEE7QUFDQTtBQW1CQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(25)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  var countMin = 50;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      var mean = d3.mean(data, function (d) {\n        return +(data.total_num - data.male_num) / data.total_num;\n      });\n      return mean;\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +data.white_sup_num / data.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +data.white_num / data.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  function getPercentType(kind, data) {\n    if (kind == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (kind == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (kind == \"supGender\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 40, left: 40 };\n  var width = 600 - margin.left - margin.right;\n  var height = 400 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".arrow-scatter\");\n\n  // container.append(\"p\")\n  //   .attr(\"class\",\"chart-title\")\n  //   .text(\"Change in Gender Break-down from 2002 - 2017\")\n  //   ;\n\n  function buildToggles() {\n    var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n    var sizeCats = [0, 20, 50, 100, 500];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == sizeCats.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      return d;\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      countMin = d;\n      buildChart();\n    });\n\n    var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == raceGenderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"race\") {\n        return \"Race\";\n      }\n      return \"Gender\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      cut = d;\n      buildChart();\n    });\n\n    var leaderToggleData = [\"all\", \"leader\"];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(leaderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == leaderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"all\") {\n        return \"All Staff\";\n      }\n      return \"Leadership\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      group = d;\n      buildChart();\n    });\n  }\n  buildToggles();\n\n  function buildChart() {\n\n    d3.selectAll(\".arrow-scatter-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"arrow-scatter-chart-wrapper\").style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\");\n\n    var chartSvgDoubleChange = chartDiv.append(\"svg\").attr(\"class\", \"arrow-scatter-chart-wrapper-svg-double-change\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n\n    var chartDivText = chartDiv.append(\"div\").attr(\"class\", \"arrow-scatter-chart-wrapper-text-div\").style(\"transform\", \"translate(\" + margin.left + \"px\" + \",\" + margin.top + \"px\" + \")\").style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\");\n\n    var miniMultiple = container.append(\"div\").attr(\"class\", \"slope-mini-multiple-div\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      if (cut == \"gender\") {\n        return d.total_num > countMin && +d.Year > 2000;\n      }\n      return d.total_num > countMin;\n    });\n\n    var maxPercentArray = [];\n    var diffArray = [];\n    var raceDiffArray = [];\n\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      var maxPercent = d3.max(leaves, function (d) {\n        return getPercent(d);\n      });\n      maxPercentArray.push(maxPercent);\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(2014) && d.value.values.length > 1) {\n        return d;\n      }\n      return null;\n    });\n\n    var newsNestAverageT0 = d3.mean(newsNest, function (d) {\n      return getPercent(d.value.values[0]);\n    });\n    var newsNestAverageT1 = d3.mean(newsNest, function (d) {\n      return getPercent(d.value.yearMap.get(2014));\n    });\n\n    for (var item in newsNest) {\n      var diff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"supGender\";\n      var raceDiff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"gender\";\n      diffArray.push(diff);\n      raceDiffArray.push(raceDiff);\n      newsNest[item].value.diff = diff;\n      newsNest[item].value.raceDiff = raceDiff;\n    }\n    ;\n\n    newsNest = newsNest.sort(function (a, b) {\n      return b.value.diff - a.value.diff;\n    });\n\n    var totalExtent = d3.extent(newsNest, function (d) {\n      return +d.value.maxTotal;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n    var percentExtent = d3.extent(maxPercentArray, function (d) {\n      return d;\n    });\n    var diffExtent = d3.extent(diffArray, function (d) {\n      return d;\n    });\n    var raceDiffExtent = d3.extent(raceDiffArray, function (d) {\n      return d;\n    });\n    var diffScale = d3.scaleLinear().domain([diffExtent[0], diffExtent[1]]).range([0, width]);\n    var raceDiffScale = d3.scaleLinear().domain([raceDiffExtent[0], raceDiffExtent[1]]).range([height, 0]);\n\n    var totalScale = d3.scaleLinear().domain(totalExtent).range([height, 0]);\n    var totalXScale = d3.scaleLinear().domain(totalExtent).range([0, width]);\n\n    var colorScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"white\", \"green\"]);\n    var strokeScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"grey\", \"green\"]);\n\n    var xScale = d3.scaleLinear().domain([0, .7]).range([0, width]);\n    var yScale = d3.scaleLinear().domain([.25, .5]).range([height, 0]);\n\n    var linearGradientDown = chartSvgDoubleChange.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"gradient\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 1);\n\n    var linearGradientAverage = chartSvgDoubleChange.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"gradient-average\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 1);\n\n    var linearGradientUp = chartSvgDoubleChange.append(\"defs\").append(\"linearGradient\").attr(\"id\", \"gradient-up\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 1);\n\n    var chartSvgDoubleChangeG = chartSvgDoubleChange.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    linearGradientUp.append(\"stop\").attr(\"stop-color\", \"blue\").attr(\"stop-opacity\", 1);\n\n    linearGradientUp.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"blue\").attr(\"stop-opacity\", .3);\n\n    linearGradientAverage.append(\"stop\").attr(\"stop-color\", \"black\").attr(\"stop-opacity\", 1);\n\n    linearGradientAverage.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"black\").attr(\"stop-opacity\", .3);\n\n    linearGradientDown.append(\"stop\").attr(\"stop-color\", \"red\").attr(\"stop-opacity\", .3);\n\n    linearGradientDown.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"red\").attr(\"stop-opacity\", 1);\n\n    chartSvgDoubleChangeG.append(\"marker\").attr(\"id\", \"triangle-up\").attr(\"viewBox\", \"0 0 10 10\").attr(\"refX\", 0).attr(\"refY\", 5).attr(\"markerUnits\", \"strokeWidth\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").append(\"path\").attr(\"fill\", \"blue\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\");\n\n    chartSvgDoubleChangeG.append(\"marker\").attr(\"id\", \"triangle-down\").attr(\"viewBox\", \"0 0 10 10\").attr(\"refX\", 0).attr(\"refY\", 5).attr(\"markerUnits\", \"strokeWidth\").attr(\"markerWidth\", 6).attr(\"markerHeight\", 8).attr(\"orient\", \"auto\").append(\"path\").attr(\"fill\", \"red\").attr(\"d\", \"M 0 0 L 10 5 L 0 10 z\");\n\n    function drawArrow(t0, t1) {\n      var d = t1 > t0 ? \"M0,\" + (t1 - 2) + \" L4,\" + (t1 - 8) + \" L1.5,\" + (t1 - 8) + \" L0,\" + t0 + \" L-1.5,\" + (t1 - 8) + \" L-4,\" + (t1 - 8) + \" Z\" : \"M0,\" + (t1 + 2) + \" L4,\" + (t1 + 8) + \" L1.5,\" + (t1 + 8) + \" L0,\" + t0 + \" L-1.5,\" + (t1 + 8) + \" L-4,\" + (t1 + 8) + \" Z\";\n      return d;\n    }\n    function drawDiamond(t0, t1) {\n      return \"M0,\" + (t1 - 4) + \" L4,\" + (t1 - 8)\n      // + \" L1.5,\" + (t1-8)\n      + \" L0,\" + (t1 - 12) + \" L-4,\" + (t1 - 8) + \" Z\";\n    }\n\n    var arrowXScale = d3.scaleLinear().domain([0, newsNest.length - 1]).range([0, width]);\n\n    var arrowsGs = chartSvgDoubleChangeG.selectAll(\"g\").data(newsNest).enter().append(\"g\").attr(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale(i) + \",0)\";\n    }).on(\"mouseover\", function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company;\n      console.log(d.value.diff);\n      console.log(getPercentType(\"gender\", d.value.yearMap.get(2014)), getPercentType(\"gender\", d.value.values[0]));\n    });\n\n    chartSvgDoubleChangeG.append(\"g\").attr(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \",0)\";\n    }).append(\"path\").attr(\"class\", \"arrow-scatter-line arrow-scatter-line-average\").attr(\"d\", function (d) {\n      var t0 = yScale(newsNestAverageT0);\n      var t1 = yScale(newsNestAverageT1);\n      return drawArrow(t0, t1);\n    }).attr(\"fill\", function (d) {\n      if (newsNestAverageT1 - newsNestAverageT0 > 0) {\n        return \"url(#gradient-average)\";\n      }\n      return \"url(#gradient)\";\n    }).attr(\"stroke\", \"none\").attr(\"fill-opacity\", 1);\n\n    var arrows = arrowsGs.append(\"path\").attr(\"class\", \"arrow-scatter-line\").attr(\"d\", function (d) {\n      var t0 = yScale(getPercentType(\"gender\", d.value.values[0]));\n      var t1 = yScale(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n\n      if (Math.abs(d.value.diff) < .008) {\n        return drawDiamond(t0, t1);\n      }\n      return drawArrow(t0, t1);\n    }).attr(\"fill\", function (d) {\n      if (d.value.diff > 0) {\n        return \"url(#gradient-up)\";\n      }\n      if (Math.abs(d.value.diff) < .015) {\n        return \"#888888\";\n      }\n      return \"url(#gradient)\";\n    }).attr(\"stroke\", \"none\").attr(\"fill-opacity\", 1);\n\n    var arrowText = arrowsGs.append(\"text\").attr(\"class\", \"arrow-scatter-line-text\").attr(\"transform\", function (d, i) {\n      return \"rotate(-90 \" + yScale(getPercentType(\"gender\", d.value.values[0])) / 2 + \" \" + yScale(getPercentType(\"gender\", d.value.values[0])) / 2 + \")\";\n    }).text(function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company;\n      if (company == \"the new york times\") {\n        return company;\n      }\n      return null;\n    });\n\n    var arrowTextDiv = chartDivText.selectAll(\"div\").data(newsNest).enter().append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale(i) + \"px,\" + yScale(getPercentType(\"gender\", d.value.yearMap.get(2014))) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-logo\").style(\"background-image\", function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company;\n      if (company == \"the new york times\") {\n        return \"url(assets/ny-times-logo.svg)\";\n      }\n    });\n\n    chartDivText.append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \"px,\" + yScale(newsNestAverageT1) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-text-average\").text(function (d) {\n      return \"Overall\";\n    });\n\n    chartDivText.append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \"px,\" + yScale(newsNestAverageT1) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-text-average arrow-scatter-line-text-average-num-top\").text(function (d) {\n      return Math.floor(100 * newsNestAverageT1) + \"%\";\n    });\n\n    chartDivText.append(\"div\").attr(\"class\", \"arrow-scatter-line-text-div\").style(\"transform\", function (d, i) {\n      return \"translate(\" + arrowXScale((newsNest.length - 1) / 2) + \"px,\" + yScale(newsNestAverageT0) + \"px)\";\n    }).append(\"div\").attr(\"class\", \"arrow-scatter-line-text-average arrow-scatter-line-text-average-num-bottom\").text(function (d) {\n      return Math.floor(100 * newsNestAverageT0) + \"%\";\n    });\n\n    var axisGs = chartSvgDoubleChangeG.append(\"g\").selectAll(\"g\").data([.3, .4, .5]).enter().append(\"g\");\n\n    axisGs.append(\"text\").attr(\"x\", function (d) {\n      return -12;\n    }).attr(\"y\", function (d) {\n      return yScale(d) + 2;\n    }).attr(\"dominant-baseline\", \"middle\").attr(\"class\", \"arrow-scatter-axis-text\").text(function (d) {\n      if (d == .5) {\n        return \"50/50 Gender Split\";\n      }\n      return Math.floor((1 - d) * 100) + \"% Male\";\n    }).style(\"fill\", function (d) {\n      if (d == .5) {\n        return \"rgb(136, 136, 136)\";\n      }\n      return null;\n    });\n\n    axisGs.append(\"line\").attr(\"class\", \"arrow-scatter-line-axis\").attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"x2\", function (d) {\n      return width;\n    }).attr(\"y1\", function (d) {\n      return yScale(d);\n    }).attr(\"y2\", function (d) {\n      return yScale(d);\n    }).style(\"stroke-width\", function (d) {\n      if (d == .5) {\n        return \"2px\";\n      }\n      return null;\n    }).style(\"stroke\", function (d) {\n      if (d != .5) {\n        return \"#a7a7a7\";\n      }\n      return null;\n    }).style(\"stroke-dasharray\", function (d) {\n      if (d != .5) {\n        return \"3,1\";\n      }\n      return null;\n    });\n\n    // chartSvgDoubleChangeG\n    //   .selectAll(\"line\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"line\")\n    //   .attr(\"class\",\"arrow-scatter-line\")\n    //   .style(\"stroke-width\",function(d){\n    //     if(+d.value.yearMap.get(2014).total_num > 100){\n    //       return \"2px\"\n    //     }\n    //     if(+d.value.yearMap.get(2014).total_num > 50){\n    //       return \"1px\"\n    //     }\n    //     if(+d.value.yearMap.get(2014).total_num > 10){\n    //       return \".5px\"\n    //     }\n    //   })\n    //   .style(\"stroke\",function(d){\n    //     if(d.value.diff > 0){\n    //       return \"blue\"\n    //     }\n    //     return \"red\"\n    //   })\n    //   .attr(\"x1\",function(d){\n    //     return xScale(getPercentType(\"supGender\",d.value.values[0]));\n    //   })\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n    //     // return diffScale(d.value.diff);\n    //   })\n    //   .attr(\"y1\",function(d){\n    //     return totalScale(d.value.yearMap.get(2014).total_num)\n    //     // return yScale(getPercentType(\"supGender\",d.value.values[0]));\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return totalScale(d.value.yearMap.get(2014).total_num)\n    //     // return yScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n    //     // return raceDiffScale(d.value.raceDiff)\n    //   })\n    //   .attr(\"marker-end\",function(d){\n    //     if(d.value.diff > 0){\n    //       return \"url(#triangle-up)\";\n    //     }\n    //     return \"url(#triangle-down)\";\n    //   })\n    //   // .style(\"stroke\",\"url(#gradient)\")\n    //   .on(\"mouseover\",function(d){\n    //     console.log(getPercentType(\"supGender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",d.value.yearMap.get(2014)));\n    //   })\n    //   ;\n\n    // chartSvgDoubleChangeG\n    //   .append(\"line\")\n    //   .attr(\"class\",\"arrow-scatter-line-axis\")\n    //   .attr(\"x1\",function(d){\n    //     return xScale(.5);\n    //   })\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(.5);\n    //   })\n    //   .attr(\"y1\",function(d){\n    //     return 0;\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return height;\n    //   })\n\n\n    // function buildAverage(){\n    //   var chartAverage = chartDiv.append(\"g\")\n    //      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    //      .attr(\"class\",\"swarm-average\")\n    //      ;\n    //\n    //  chartAverage.append(\"text\")\n    //    .attr(\"class\",\"swarm-average-text swarm-average-text-label\")\n    //    .attr(\"x\",xScale(dataToMap.average))\n    //    .attr(\"y\",height*.33-19)\n    //    .text(\"Overall\")\n    //\n    //   chartAverage.append(\"text\")\n    //     .attr(\"class\",\"swarm-average-text\")\n    //     .attr(\"x\",xScale(dataToMap.average))\n    //     .attr(\"y\",height*.33-5)\n    //     .text(Math.round(dataToMap.average*100)+\"% Male\")\n    //\n    //   chartAverage.append(\"line\")\n    //     .attr(\"class\",\"swarm-average-line\")\n    //     .attr(\"x1\",xScale(dataToMap.average))\n    //     .attr(\"x2\",xScale(dataToMap.average))\n    //     .attr(\"y1\",height*.33)\n    //     .attr(\"y2\",height*.66)\n    //     ;\n    // }\n    // buildAverage();\n\n    // var topRowCircle = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"circle\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return 3\n    //   })\n    //   .attr(\"cx\", function(d) {\n    //     return xScale(getPercent(d.value.yearMap.get(2014)));\n    //   })\n    //   .attr(\"cy\", function(d) {\n    //     return 0;\n    //   })\n    //   .style(\"fill\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(d);\n    //   })\n    //   ;\n    //\n    // var bottomRowCircle = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"circle\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return 3\n    //   })\n    //   .attr(\"cx\", function(d) {\n    //     return xScale(getPercent(d.value.values[0]));\n    //   })\n    //   .attr(\"cy\", function(d) {\n    //     return 100;\n    //   })\n    //   .style(\"fill\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   ;\n    //\n    // var rowLines = chartG\n    //   .append(\"g\")\n    //   .selectAll(\"line\")\n    //   .data(newsNest)\n    //   .enter()\n    //   .append(\"line\")\n    //   .attr(\"class\",\"slope-line\")\n    //   .attr(\"x2\", function(d) {\n    //     return xScale(getPercent(d.value.values[0]));\n    //   })\n    //   .attr(\"y2\", function(d) {\n    //     return 100;\n    //   })\n    //   .attr(\"x1\", function(d) {\n    //     return xScale(getPercent(d.value.yearMap.get(2014)));\n    //   })\n    //   .attr(\"y1\", function(d) {\n    //     return 0;\n    //   })\n    //   .style(\"stroke\",function(d){\n    //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n    //     if(diff > .01){\n    //       return \"red\"\n    //     }\n    //     if(diff < .01){\n    //       return \"green\";\n    //     }\n    //   })\n    //   ;\n    //\n    var miniMargin = { top: 0, right: 10, bottom: 0, left: 10 };\n    var miniWidth = 50 - miniMargin.left - miniMargin.right;\n    var miniHeight = 80 - miniMargin.top - miniMargin.bottom;\n    var genderColorScale = d3.scaleLinear().domain([.2, .5, .8]).range([\"#2161fa\", \"#dddddd\", \"#ff3333\"]);\n\n    var multipleY = d3.scaleLinear().domain([.2, .5]).range([miniHeight, 0]);\n\n    // miniMultiple.append(\"p\")\n    //   .attr(\"class\",\"chart-title\")\n    //   .text(\"Change in Break-down of Female Staff, 2001 - 2016\")\n    //   ;\n\n    var miniMultipleWrapper = miniMultiple.append(\"div\").attr(\"class\", \"mini-multiple-div-container\").selectAll(\"div\").data(newsNest.sort(function (a, b) {\n      return +b.value.maxTotal - +a.value.maxTotal;\n    }).slice(0, 25)).enter().append(\"div\").attr(\"class\", \"mini-multiple-div\");\n\n    miniMultipleWrapper.append(\"div\").attr(\"class\", \"mini-multiple-text-container\").append(\"p\").attr(\"class\", \"mini-multiple-text\").style(\"margin-top\", 20).text(function (d) {\n      var company = newsIDName.get(d.value.values[0].NewsID).Company.replace(\"the\", \"\");\n      if (company.length > 20) {\n        return company.slice(0, 17) + \"...\";\n      }\n      return company;\n    });\n\n    var miniMultipleWrapperSvg = miniMultipleWrapper.append(\"svg\").attr(\"class\", \"slope-mini-svg\").attr(\"width\", miniWidth + miniMargin.left + miniMargin.right).attr(\"height\", miniHeight + miniMargin.top + miniMargin.bottom);\n\n    var miniMultipleWrapperG = miniMultipleWrapperSvg.append(\"g\").style(\"transform\", \"translate(\" + miniMargin.left + \"px\" + \",\" + miniMargin.top + \"px\" + \")\");\n\n    var miniMultipleWrapperAxis = miniMultipleWrapperG.append(\"g\").attr(\"class\", \"slope-line-axis-container\");\n\n    miniMultipleWrapperG.append(\"circle\").attr(\"cx\", function (d) {\n      return 0;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.values[0]));\n    }).attr(\"r\", 3).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      if (d.value.diff > 0) {\n        return \"blue\";\n      }\n      return \"red\";\n      // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return 0;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.values[0])) + 27;\n      }\n      return multipleY(getPercentType(\"gender\", d.value.values[0])) + 15;\n    }).attr(\"class\", \"slope-small-text\").text(function (d, i) {\n      if (i == 0) {\n        return Math.floor(100 * getPercentType(\"gender\", d.value.values[0])) + \"%\";\n      }\n      return Math.floor(100 * getPercentType(\"gender\", d.value.values[0]));\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return 0;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.values[0])) + 15;\n      }\n      return null;\n    }).attr(\"class\", \"slope-small-text slope-small-text-bold\").text(function (d, i) {\n      if (i == 0) {\n        return \"2001\";\n      }\n      return null;\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return miniWidth;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014))) + 15;\n      }\n      return null;\n    }).attr(\"class\", \"slope-small-text slope-small-text-bold\").text(function (d, i) {\n      if (i == 0) {\n        return \"2016\";\n      }\n      return null;\n    }).style(\"text-anchor\", function (d, i) {\n      if (i == 0) {\n        return \"start\";\n      }\n      return null;\n    });\n\n    miniMultipleWrapperG.append(\"text\").attr(\"x\", function (d) {\n      return miniWidth;\n    }).attr(\"y\", function (d, i) {\n      if (i == 0) {\n        return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014))) + 27;\n      }\n      return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014))) + 15;\n    }).attr(\"class\", \"slope-small-text\").text(function (d, i) {\n      if (i == 0) {\n        return Math.floor(100 * getPercentType(\"gender\", d.value.yearMap.get(2014))) + \"%\";\n      }\n      return Math.floor(100 * getPercentType(\"gender\", d.value.yearMap.get(2014)));\n    }).style(\"text-anchor\", function (d, i) {\n      if (i == 0) {\n        return \"start\";\n      }\n      return null;\n    });\n\n    miniMultipleWrapperG.append(\"circle\").attr(\"cx\", function (d) {\n      return miniWidth;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n    }).attr(\"r\", 3).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      if (d.value.diff > 0) {\n        return \"blue\";\n      }\n      return \"red\";\n      // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n    });\n    //\n    //\n    miniMultipleWrapperG.append(\"line\").attr(\"class\", \"slope-line\").attr(\"y1\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.values[0]));\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d) {\n      return multipleY(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    }).attr(\"stroke-linecap\", \"round\").attr(\"stroke-linejoin\", \"round\").attr(\"stroke-width\", 1.8).style(\"stroke\", function (d) {\n      if (d.value.diff > 0) {\n        return \"blue\";\n      }\n      return \"red\";\n      // return genderColorScale(getPercentType(\"gender\",d.value.values[0]))\n    });\n\n    miniMultipleWrapperAxis.selectAll(\"line\").data([.2, .3, .4, .5]).enter().append(\"line\").attr(\"class\", \"slope-line-axis\").attr(\"y1\", function (d, i) {\n      return multipleY(d);\n      // return i*20+\"%\";\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d, i) {\n      return multipleY(d);\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    }).style(\"stroke\", function (d) {\n      if (d == .5) {\n        return \"black\";\n      }\n    });\n    //\n\n    // cell\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return d.radius\n    //   })\n    //   // .attr(\"cx\", function(d) { return d.x; })\n    //   // .attr(\"cy\", function(d) { return d.y; })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(d.male_num/d.total_num);\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n\n    // dataToMap.values = d3.nest()\n    //   .key(function(d){\n    //     return Math.round(getPercent(d)*50)/50;\n    //   })\n    //   .sortKeys(function(a,b){\n    //     return a-b;\n    //   })\n    //   .entries(dataToMap.values)\n    //   ;\n    //\n    // chartDiv.append(\"div\")\n    //   .attr(\"class\",\"histogram-avg-div\")\n    //   .style(\"left\",function(d){\n    //     return (dataToMap.average*width+1)+\"px\"\n    //   })\n    //   .append(\"p\")\n    //   .text(Math.round(dataToMap.average*100)+\"%\")\n    //   ;\n    //\n    // var yearsColumn = chartDiv\n    //   .selectAll(\".histogram-year-container\")\n    //   .data(dataToMap.values)\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",\"histogram-year-container\")\n    //   .style(\"left\",function(d){\n    //     return (d.key*width+1)+\"px\"\n    //   })\n    //   ;\n    //\n    // yearsColumn\n    //   .selectAll(\"div\")\n    //   .data(function(d){\n    //     return d.values\n    //   })\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",function(d){\n    //     var state = null;\n    //     var region = null;\n    //     if(newsIdMap.has(d.NewsID)){\n    //       state = newsIdMap.get(d.NewsID).State;\n    //     }\n    //     if(regionMap.has(state)){\n    //       region = regionMap.get(state)[3];\n    //     }\n    //\n    //     if(region ==\"West\"){\n    //       region = \"green\"\n    //     }\n    //     if(region ==\"South\"){\n    //       region = \"blue\"\n    //     }\n    //     if(region ==\"Midwest\"){\n    //       region = \"purple\"\n    //     }\n    //     if(region ==\"Northeast\"){\n    //       region = \"yellow\"\n    //     }\n    //     return \"histogram-year-item \"+region\n    //   })\n    //   .style(\"background-color\",function(d){\n    //     // return backgroundFunction(d)\n    //     return null\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n    //\n    // yearsColumn.append(\"p\")\n    //   .text(function(d,i){\n    //     if(i%5 == 0 || i==0 || i==yearsColumn.size()-1){\n    //       return Math.round(d.key*100)+\"%\";\n    //     }\n    //     return null;\n    //\n    //   })\n    //   ;\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _lodash = __webpack_require__(3);\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _isMobile = __webpack_require__(2);\n\nvar _isMobile2 = _interopRequireDefault(_isMobile);\n\nvar _loadData = __webpack_require__(1);\n\nvar _loadData2 = _interopRequireDefault(_loadData);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bodySel = d3.select('body');\n// import graphic from './graphic'\n// D3 is included by globally by default\n\nvar previousWidth = 0;\n\n// function resize() {\n// \tconst width = bodySel.node().offsetWidth\n// \tif (previousWidth !== width) {\n// \t\tpreviousWidth = width\n// \t\tgraphic.resize()\n// \t}\n// }\n\nfunction init() {\n\t// add mobile class to body tag\n\tbodySel.classed('is-mobile', _isMobile2.default.any());\n\t// setup resize event\n\t// window.addEventListener('resize', debounce(resize, 150))\n\t_loadData2.default.init();\n}\n\ninit();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvZW50cnkuanM/YjE2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEMyBpcyBpbmNsdWRlZCBieSBnbG9iYWxseSBieSBkZWZhdWx0XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnbG9kYXNoLmRlYm91bmNlJ1xuaW1wb3J0IGlzTW9iaWxlIGZyb20gJy4vdXRpbHMvaXMtbW9iaWxlJ1xuLy8gaW1wb3J0IGdyYXBoaWMgZnJvbSAnLi9ncmFwaGljJ1xuaW1wb3J0IGxvYWREYXRhIGZyb20gJy4vbG9hZC1kYXRhJ1xuXG5jb25zdCBib2R5U2VsID0gZDMuc2VsZWN0KCdib2R5JylcbmxldCBwcmV2aW91c1dpZHRoID0gMFxuXG4vLyBmdW5jdGlvbiByZXNpemUoKSB7XG4vLyBcdGNvbnN0IHdpZHRoID0gYm9keVNlbC5ub2RlKCkub2Zmc2V0V2lkdGhcbi8vIFx0aWYgKHByZXZpb3VzV2lkdGggIT09IHdpZHRoKSB7XG4vLyBcdFx0cHJldmlvdXNXaWR0aCA9IHdpZHRoXG4vLyBcdFx0Z3JhcGhpYy5yZXNpemUoKVxuLy8gXHR9XG4vLyB9XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG5cdC8vIGFkZCBtb2JpbGUgY2xhc3MgdG8gYm9keSB0YWdcblx0Ym9keVNlbC5jbGFzc2VkKCdpcy1tb2JpbGUnLCBpc01vYmlsZS5hbnkoKSlcblx0Ly8gc2V0dXAgcmVzaXplIGV2ZW50XG5cdC8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBkZWJvdW5jZShyZXNpemUsIDE1MCkpXG5cdGxvYWREYXRhLmluaXQoKVxufVxuXG5pbml0KClcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvZW50cnkuanMiXSwibWFwcGluZ3MiOiI7O0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQ0E7QUFDQTs7Ozs7QUFDQTtBQUhBO0FBSEE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n// D3 is included by globally by default\n// import * as d3 from 'd3'\n// import loadData from './load-data'\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation) {\n\n\tvar cut = \"gender\";\n\t// var cut = \"supGender\"\n\n\tfunction getAverage(data) {\n\t\tif (cut == \"gender\") {\n\t\t\treturn d3.mean(data, function (d) {\n\t\t\t\treturn +d.male_num / d.total_num;\n\t\t\t});\n\t\t}\n\t\tif (cut == \"supWhite\") {\n\t\t\treturn d3.mean(data, function (d) {\n\t\t\t\treturn +d.white_sup_num / d.total_sup_num;\n\t\t\t});\n\t\t}\n\t\tif (cut == \"supGender\") {\n\t\t\treturn d3.mean(data, function (d) {\n\t\t\t\treturn +d.male_sup_num / d.total_sup_num;\n\t\t\t});\n\t\t}\n\t\treturn d3.mean(data, function (d) {\n\t\t\treturn +d.white_num / d.total_num;\n\t\t});\n\t}\n\t//\n\tfunction getPercent(data) {\n\t\tif (cut == \"gender\") {\n\t\t\treturn +data.male_num / data.total_num;\n\t\t}\n\t\tif (cut == \"supWhite\") {\n\t\t\treturn +data.white_sup_num / data.total_sup_num;\n\t\t}\n\t\tif (cut == \"supGender\") {\n\t\t\treturn +data.male_sup_num / data.total_sup_num;\n\t\t}\n\t\treturn +data.white_num / data.total_num;\n\t}\n\t//\n\tvar latLongMap = d3.map(latLongData, function (d) {\n\t\treturn d.NewsID;\n\t});\n\tvar newsIdMap = d3.map(newsIDLocation, function (d) {\n\t\treturn d.NewsID;\n\t});\n\n\tvar regionMap = d3.map(states, function (d) {\n\t\treturn d[1];\n\t});\n\n\tvar width = 500;\n\tvar horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n\tvar container = d3.select(\".line-scatter\");\n\n\tvar yearNest = d3.nest().key(function (d) {\n\t\tvar state = null;\n\t\tvar region = null;\n\t\tif (newsIdMap.has(d.NewsID)) {\n\t\t\tstate = newsIdMap.get(d.NewsID).State;\n\t\t}\n\t\tif (regionMap.has(state)) {\n\t\t\tregion = regionMap.get(state)[3];\n\t\t}\n\t\treturn region;\n\t}).key(function (d) {\n\t\treturn +d.Year;\n\t}).sortKeys(function (a, b) {\n\t\treturn a - b;\n\t}).rollup(function (leaves) {\n\t\tvar average = getAverage(leaves);\n\t\treturn { average: average, values: leaves };\n\t}).entries(mapData);\n\n\t//\n\tvar region = container.selectAll(\"div\").data(yearNest).enter().append(\"div\").attr(\"class\", \"year-container\");\n\n\tregion.append(\"p\").text(function (d) {\n\t\treturn d.key;\n\t});\n\n\tvar years = region.selectAll(\"div\").data(function (d) {\n\t\treturn d.values;\n\t}).enter().append(\"div\").attr(\"class\", \"region-container\");\n\n\tyears.selectAll(\"div\").data(function (d) {\n\t\treturn d.value.values;\n\t}).enter().append(\"div\").attr(\"class\", \"line\").style(\"left\", function (d) {\n\t\tvar percent = getPercent(d);\n\t\treturn horzScale(percent) + \"px\";\n\t}).style(\"background-color\", function (d) {\n\t\treturn null;\n\t});\n\tyears.append(\"div\").style(\"left\", function (d) {\n\t\treturn horzScale(.5) + \"px\";\n\t}).attr(\"class\", \"line line-half\");\n\t//\n\tyears.append(\"div\").datum(function (d) {\n\t\treturn d.value.average;\n\t}).style(\"left\", function (d) {\n\t\treturn horzScale(d) + \"px\";\n\t}).attr(\"class\", \"line line-average\").append(\"p\").text(function (d) {\n\t\treturn Math.round(d * 100) + \"%\";\n\t});\n\n\tyears.append(\"p\").text(function (d) {\n\t\treturn d.key;\n\t});\n}\n\nexports.default = { init: init };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// D3 is included by globally by default\n// import * as d3 from 'd3'\n// import loadData from './load-data'\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  // var cut = \"supGender\"\n  var countMin = 50;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_num / d.total_num;\n      });\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +d.white_sup_num / d.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_sup_num / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +d.white_num / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +data.male_num / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return +data.white_num / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var width = 1000;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".histogram\");\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data([0, 20, 50, 100, 500]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    countMin = d;\n    buildChart();\n  });\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data([\"race\", \"gender\", \"supWhite\", \"supGender\"]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    cut = d;\n    buildChart();\n  });\n\n  function buildChart() {\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    d3.selectAll(\".histogram-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"histogram-chart-wrapper\");\n\n    var yearNest = d3.nest().key(function (d) {\n      return +d.Year;\n    }).rollup(function (leaves) {\n      var average = getAverage(leaves);\n      return { average: average, values: leaves };\n    }).entries(filteredMapData);\n\n    var dataToMap = yearNest.filter(function (d) {\n      return d.key == 2014;\n    })[0].value;\n\n    dataToMap.values = d3.nest().key(function (d) {\n      return Math.round(getPercent(d) * 50) / 50;\n    }).sortKeys(function (a, b) {\n      return a - b;\n    })\n    // .rollup(function(leaves){\n    //   var average = getAverage(leaves);\n    //   return {average:average,values:leaves};\n    // })\n    .entries(dataToMap.values);\n\n    chartDiv.append(\"div\").attr(\"class\", \"histogram-avg-div\").style(\"left\", function (d) {\n      return dataToMap.average * width + 1 + \"px\";\n    }).append(\"p\").text(Math.round(dataToMap.average * 100) + \"%\");\n\n    var yearsColumn = chartDiv.selectAll(\".histogram-year-container\").data(dataToMap.values).enter().append(\"div\").attr(\"class\", \"histogram-year-container\").style(\"left\", function (d) {\n      return d.key * width + 1 + \"px\";\n    });\n    //\n    yearsColumn.selectAll(\"div\").data(function (d) {\n      return d.values;\n    }).enter().append(\"div\").attr(\"class\", function (d) {\n      var state = null;\n      var region = null;\n      if (newsIdMap.has(d.NewsID)) {\n        state = newsIdMap.get(d.NewsID).State;\n      }\n      if (regionMap.has(state)) {\n        region = regionMap.get(state)[3];\n      }\n\n      if (region == \"West\") {\n        region = \"green\";\n      }\n      if (region == \"South\") {\n        region = \"blue\";\n      }\n      if (region == \"Midwest\") {\n        region = \"purple\";\n      }\n      if (region == \"Northeast\") {\n        region = \"yellow\";\n      }\n      return \"histogram-year-item \" + region;\n    }).style(\"background-color\", function (d) {\n      // return backgroundFunction(d)\n      return null;\n    }).on(\"mouseover\", function (d) {\n      console.log(newsIDName.get(d.NewsID).Company);\n    });\n\n    yearsColumn.append(\"p\").text(function (d, i) {\n      if (i % 5 == 0 || i == 0 || i == yearsColumn.size() - 1) {\n        return Math.round(d.key * 100) + \"%\";\n      }\n      return null;\n    });\n  }\n  function backgroundFunction(d) {\n    var state = null;\n    var region = null;\n    if (newsIdMap.has(d.NewsID)) {\n      state = newsIdMap.get(d.NewsID).State;\n    }\n    if (regionMap.has(state)) {\n      region = regionMap.get(state)[3];\n    }\n    if (region == \"West\") {\n      return \"green\";\n    }\n    if (region == \"South\") {\n      return \"blue\";\n    }\n    if (region == \"Midwest\") {\n      return \"purple\";\n    }\n    if (region == \"Northeast\") {\n      return \"yellow\";\n    }\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo, stateTopo) {\n\n  // var projection = d3.geoAlbersUsa()\n  //     // .scale(1280)\n  //     // .translate([width / 2, height / 2]);\n  //\n  // var path = d3.geoPath()\n  //     .projection(projection)\n  //     // .pointRadius(1.5)\n  //     ;\n  //\n  // // var projection = d3.geoAlbersUsa();\n  // // var path = d3.geoPath().projection(projection);\n  //\n  // var cut = \"gender\"\n  // // var cut = \"supGender\"\n  // var countMin =  19;\n  //\n  // mapData = mapData.filter(function(d){\n  //   return +d.Year > 2000;\n  // })\n  //\n  // function getAverage(data){\n  // \tif(cut == \"gender\"){\n  //     var mean = d3.mean(data,function(d){return +(data.total_num-data.male_num)/data.total_num});\n  // \t\treturn mean;\n  // \t}\n  // \tif(cut == \"supWhite\"){\n  // \t\treturn d3.mean(data,function(d){return +data.white_sup_num/data.total_sup_num});\n  // \t}\n  // \tif(cut == \"supGender\"){\n  // \t\treturn d3.mean(data,function(d){return (+data.total_sup_num - +data.male_sup_num)/data.total_sup_num});\n  // \t}\n  // \treturn d3.mean(data,function(d){return +data.white_num/data.total_num});\n  // }\n  //\n  // function getPercent(data){\n  // \tif(cut == \"gender\"){\n  // \t\treturn +(data.total_num-data.male_num)/data.total_num\n  // \t}\n  // \tif(cut == \"supWhite\"){\n  // \t\treturn +data.white_sup_num/data.total_sup_num;\n  // \t}\n  // \tif(cut == \"supGender\"){\n  // \t\treturn +data.male_sup_num/data.total_sup_num;\n  // \t}\n  // \treturn (+data.total_num - +data.white_num)/data.total_num\n  // }\n  //\n  // function getPercentType(kind,data){\n  //   if(kind == \"gender\"){\n  //     return +(data.total_num-data.male_num)/data.total_num\n  //   }\n  //   if(kind == \"supWhite\"){\n  //     return +data.white_sup_num/data.total_sup_num;\n  //   }\n  //   if(kind == \"supGender\"){\n  //     return (+data.total_sup_num - +data.male_sup_num)/data.total_sup_num;\n  //   }\n  //   return (+data.total_num - +data.white_num)/data.total_num\n  // }\n  //\n  // var latLongMap = d3.map(latLongData,function(d){ return d.NewsID});\n  // var newsIdMap = d3.map(newsIDLocation,function(d){ return d.NewsID});\n  // var newsIDName = d3.map(newsIDInfo,function(d){ return d.NewsID});\n  // var regionMap = d3.map(states,function(d){\n  // \treturn d[1];\n  // });\n  //\n  // var margin = {top: 40, right: 40, bottom: 40, left: 40};\n  // var width = 600 - margin.left - margin.right;\n  // var height = 300 - margin.top - margin.bottom;\n  // var horzScale = d3.scaleLinear().domain([0,1]).range([0,width])\n  // var container = d3.select(\".maps\");\n  //\n  // var toggles = container.append(\"div\")\n  //   .attr(\"class\",\"histogram-chart-toggle-wrapper\");\n  //\n  // toggles\n  //   .append(\"div\")\n  //   .attr(\"class\",\"histogram-chart-toggle-size\")\n  //   .selectAll(\"p\")\n  //   .data([0,20,50,100,500])\n  //   .enter()\n  //   .append(\"p\")\n  //   .attr(\"class\",\"histogram-chart-toggle-item\")\n  //   .text(function(d){\n  //     return d;\n  //   })\n  //   .on(\"click\",function(d){\n  //     countMin = d;\n  //     buildChart();\n  //   })\n  //   ;\n  //\n  // toggles\n  //   .append(\"div\")\n  //   .attr(\"class\",\"histogram-chart-toggle-type\")\n  //   .selectAll(\"p\")\n  //   .data([\"race\",\"gender\",\"supWhite\",\"supGender\"])\n  //   .enter()\n  //   .append(\"p\")\n  //   .attr(\"class\",\"histogram-chart-toggle-item\")\n  //   .text(function(d){\n  //     return d;\n  //   })\n  //   .on(\"click\",function(d){\n  //     cut = d;\n  //     buildChart();\n  //   })\n  //   ;\n  //\n  // function buildChart(){\n  //\n  //\n  //\n  //   d3.selectAll(\".maps-chart-wrapper\").remove();\n  //\n  //   var chartDiv = container\n  //     .append(\"div\")\n  //     .attr(\"class\",\"maps-chart-wrapper\")\n  //\n  //   var mapSvg = chartDiv.append(\"svg\")\n  //     .attr(\"class\",\"maps-chart-svg\")\n  //     .attr(\"viewBox\",\"0 0 960 600\")\n  //     ;\n  //\n  //   mapSvg.append(\"g\")\n  //     .attr(\"class\", \"states\")\n  //     .selectAll(\"path\")\n  //     // .data(topojson.feature(stateTopo, stateTopo.objects.states))\n  //     .data(topojson.feature(stateTopo, stateTopo.objects.states).features)\n  //     .enter().append(\"path\")\n  //     .attr(\"d\", path);\n  //\n  //   mapSvg\n  //     .append(\"g\")\n  //     .append(\"path\")\n  //     .attr(\"class\", \"state-borders\")\n  //     .attr(\"d\", path(topojson.mesh(stateTopo, stateTopo.objects.states, function(a, b) { return a !== b; })));\n  //\n  //   var chartSvgDoubleChange = chartDiv\n  //     .append(\"svg\")\n  //     .attr(\"class\",\"maps-chart-wrapper-svg-double-change\")\n  //     .attr(\"width\",width+margin.left+margin.right)\n  //     .attr(\"height\",height+margin.top+margin.bottom)\n  //     .style(\"width\",width+margin.left+margin.right+\"px\")\n  //     .style(\"height\",height+margin.top+margin.bottom+\"px\")\n  //     ;\n  //\n  //   var miniMultiple = container.append(\"div\")\n  //     .attr(\"class\",\"slope-mini-multiple-div\")\n  //     ;\n  //\n  //   var filteredMapData = mapData.filter(function(d){\n  //       if(cut == \"supWhite\" || cut == \"supGender\"){\n  //         return d.total_num > countMin && d.total_sup_num > 0;\n  //       }\n  //       return d.total_num > countMin;\n  //     })\n  //     ;\n  //\n  //   var maxPercentArray = [];\n  //   var diffArray = [];\n  //   var raceDiffArray = []\n  //   var newsNest = d3.nest()\n  //     .key(function(d){\n  //       return +d.NewsID\n  //     })\n  //     .rollup(function(leaves){\n  //       var map = d3.map(leaves,function(d){return d.Year});\n  //       var maxTotalNum = d3.max(leaves,function(d){return d.total_num});\n  //       var maxPercent = d3.max(leaves,function(d){ return getPercent(d)});\n  //       maxPercentArray.push(maxPercent)\n  //       return {yearMap:map,values:leaves,maxTotal:maxTotalNum}\n  //     })\n  //     .entries(filteredMapData)\n  //     ;\n  //\n  //   newsNest = newsNest.filter(function(d){\n  //     if(d.value.yearMap.has(2014)){\n  //       return d;\n  //     }\n  //     return null;\n  //   });\n  //\n  //   for (var item in newsNest){\n  //     var diff = getPercentType(\"gender\",newsNest[item].value.yearMap.get(2014))-getPercentType(\"gender\",newsNest[item].value.values[0])\n  //     cut = \"supGender\";\n  //     var raceDiff = getPercent(newsNest[item].value.yearMap.get(2014))-getPercent(newsNest[item].value.values[0]);\n  //     cut = \"gender\"\n  //     diffArray.push(diff);\n  //     raceDiffArray.push(raceDiff);\n  //\n  //     newsNest[item].value.diff = diff;\n  //     newsNest[item].value.raceDiff = raceDiff;\n  //     if(latLongMap.has(newsNest[item].key)){\n  //       newsNest[item].value.location = latLongMap.get(newsNest[item].key)\n  //       newsNest[item].value.hasLocation = true\n  //     }\n  //     else{\n  //       newsNest[item].value.hasLocation = false\n  //     }\n  //   }\n  //   ;\n  //\n  //\n  //\n  //   newsNest = newsNest.filter(function(d){\n  //     var hasLat = false;\n  //     if(d.value.hasLocation){\n  //       if(d.value.location.lat != \"NULL\"){\n  //         hasLat = true;\n  //       }\n  //     }\n  //     return d.value.hasLocation && hasLat;\n  //   })\n  //\n  //   var totalExtent = d3.extent(newsNest,function(d){return +d.value.maxTotal})\n  //   var radiusScale = d3.scaleLinear().domain(totalExtent).range([3,40]);\n  //   var percentExtent = d3.extent(maxPercentArray,function(d){return d;});\n  //   var diffExtent = d3.extent(diffArray,function(d){return d; });\n  //   var raceDiffExtent = d3.extent(raceDiffArray,function(d){ return d; });\n  //   var diffScale = d3.scaleLinear().domain([diffExtent[0],diffExtent[1]]).range([0,width])\n  //   var raceDiffScale = d3.scaleLinear().domain([raceDiffExtent[0],raceDiffExtent[1]]).range([height,0])\n  //\n  //   var totalScale = d3.scaleLinear().domain(totalExtent).range([height,0]);\n  //   var totalXScale = d3.scaleLinear().domain(totalExtent).range([0,width]);\n  //\n  //   var colorScale = d3.scaleLinear().domain([diffExtent[0],0,diffExtent[1]]).range([\"red\",\"white\",\"green\"]);\n  //\n  //   var colorScalePercent = d3.scaleLinear().domain([-1,0,.30,.35,.4,.45,.5,.6]).range([\"#000000\",\"#000000\",\"rgb(8, 69, 148)\",\"rgb(33, 113, 181)\",\"rgb(204, 219, 163)\",\"rgb(253, 246, 163)\",\"#e2e1e1\",\"rgb(39, 108, 145)\"]);\n  //\n  //   var strokeScale = d3.scaleLinear().domain([diffExtent[0],0,diffExtent[1]]).range([\"red\",\"grey\",\"green\"]);\n  //\n  //   var xArrowLength = d3.scaleLinear().domain([0,.15]).range([1,30]).clamp(true);\n  //\n  //   // newsNest = newsNest.filter(function(d){\n  //   //   var percent = getPercentType(\"gender\",d.value.yearMap.get(2014));\n  //   //   return percent > .50;\n  //   // })\n  //\n  //   var xScale = d3.scaleLinear().domain([0,.7]).range([0,width]);\n  //   var yScale = d3.scaleLinear().domain([.2,.5]).range([height,0]);\n  //   var lineWidthScale = d3.scaleLinear().domain(totalExtent).range([1.4,2.5]).clamp(true)\n  //\n  //   // var mapMarkers = mapSvg.append(\"g\")\n  //   //   .attr(\"class\",\"map-markers\")\n  //   //   .selectAll(\"circle\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"circle\")\n  //   //   .attr(\"class\",\"map-marker\")\n  //   //   .attr(\"r\",function(d){\n  //   //     return radiusScale(+d.value.maxTotal);\n  //   //   })\n  //   //   // .style(\"fill\",function(d){\n  //   //   //   //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n  //   //   //   //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //   //   return \"rgb(169, 169, 169)\";\n  //   //   //   return colorScalePercent(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //   //   return \"red\"\n  //   //   // })\n  //   //   .attr(\"transform\",function(d){\n  //   //     var location = d.value.location;\n  //   //     return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n  //   //   })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     // console.log(d);\n  //   //     console.log(newsIDName.get(d.key).Company);\n  //   //     console.log(getPercentType(\"gender\",d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   ;\n  //\n  //   var tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n  //   var arc = d3.arc()\n  //     .innerRadius(0)\n  //     .outerRadius(10)\n  //     .startAngle(0);\n  //\n  //   // radiusScale.range([10,20])\n  //\n  //   var theta1 = Math.PI * 0.75;\n  //   var theta2 = Math.PI * -0.75;\n  //   var sin1 = Math.sin(theta1);\n  //   var sin2 = Math.sin(theta2);\n  //   var cos1 = Math.cos(theta1);\n  //   var cos2 = Math.cos(theta2);\n  //\n  //   var arrowMaps = mapSvg.append(\"g\")\n  //       .selectAll(\"g\")\n  //       .data(newsNest)\n  //       .enter()\n  //       .append(\"g\")\n  //       .attr(\"transform\",function(d){\n  //         var location = d.value.location;\n  //         return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n  //       })\n  //       .append(\"path\")\n  //       .attr(\"class\",\"map-arrow-path\")\n  //       .attr(\"d\", function(d){\n  //\n  //         // console.log(getPercentType(\"gender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",newsNest[item].value.values[0]));\n  //         var xVal = xArrowLength(Math.abs(d.value.diff));\n  //         var dx = 0;\n  //         if(d.value.diff > 0){\n  //           dx = xVal;\n  //         }\n  //         else{\n  //           dx = -xVal;\n  //         }\n  //         var dy = -3;\n  //\n  //         var stemLen = Math.sqrt(dx * dx + dy * dy);\n  //         var headLen = Math.min(stemLen * 0.7, 8);\n  //         var xn = dx / stemLen * headLen;\n  //         var yn = dy / stemLen * headLen;\n  //         var ax1 = xn * cos1 - yn * sin1 + dx\n  //         var ay1 = xn * sin1 + yn * cos1 + dy\n  //         var ax2 = xn * cos2 - yn * sin2 + dx\n  //         var ay2 = xn * sin2 + yn * cos2 + dy\n  //\n  //         var head = [[ax1,ay1],[dx,dy],[ax2,ay2]];\n  //\n  //         return \"M0,0\"+\"L\"+dx+\",\"+dy+\"L\"+head[0][0]+\",\"+head[0][1]+\"L\"+head[1][0]+\",\"+head[1][1]+\"L\"+head[2][0]+\",\"+head[2][1];\n  //         // arc.outerRadius(radiusScale(+d.value.maxTotal));\n  //         // return arc({endAngle: +getPercentType(\"gender\",d.value.yearMap.get(2014)) * tau});\n  //       })\n  //       .attr(\"stroke-width\",function(d){\n  //         // return lineWidthScale(d.value.maxTotal)\n  //         return 1.4;\n  //       })\n  //       .attr(\"stroke\",function(d){\n  //         if(d.value.diff > 0){\n  //           return \"#3989cb\"\n  //         }\n  //         return \"rgb(214, 84, 84)\";\n  //       })\n  //       .on(\"mouseover\",function(d){\n  //         console.log(d.value.diff);\n  //         console.log(newsIDName.get(d.key).Company);\n  //       })\n  //       ;\n  //\n  //   // var arrowMaps = mapSvg.append(\"g\")\n  //   //     .selectAll(\"g\")\n  //   //     .data(newsNest)\n  //   //     .enter()\n  //   //     .append(\"g\")\n  //   //     .attr(\"transform\",function(d){\n  //   //       var location = d.value.location;\n  //   //       return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n  //   //     })\n  //   //     .append(\"path\")\n  //   //     .attr(\"transform\",function(d){\n  //   //       return \"translate(\"+ Math.random()*5+\",\"+Math.random()*5+\")\";\n  //   //     })\n  //   //     .attr(\"class\",\"map-arrow-path-peak\")\n  //   //     .attr(\"d\", function(d){\n  //   //\n  //   //       //height = size\n  //   //       //left / right = margin\n  //   //\n  //   //       var offset = radiusScale(d.value.maxTotal);\n  //   //\n  //   //       // var xVal = xArrowLength(Math.abs(d.value.diff));\n  //   //\n  //   //       xArrowLength.range([0,offset*3])\n  //   //       var xVal = xArrowLength(Math.abs(d.value.diff));\n  //   //\n  //   //       var dx = 0;\n  //   //       if(d.value.diff > 0){\n  //   //         dx = xVal;\n  //   //       }\n  //   //       else{\n  //   //         dx = -xVal;\n  //   //       }\n  //   //       var dy = -3;\n  //   //\n  //   //       return \"M\"+ -offset +\",\"+ 0 + \"L\"+0+\",\"+ -dx +\"L\"+offset+\",\"+0// [-offset,0][0,dx][offset,0]\n  //   //\n  //   //       // return \"M0,\"+ -offset + \"L\"+dx+\",\"+\"0\"+\"L\"+0+\",\"+offset// [0,-offset][xVal,0][0,offset]\n  //   //\n  //   //\n  //   //       var stemLen = Math.sqrt(dx * dx + dy * dy);\n  //   //       var headLen = Math.min(stemLen * 0.7, 8);\n  //   //       var xn = dx / stemLen * headLen;\n  //   //       var yn = dy / stemLen * headLen;\n  //   //       var ax1 = xn * cos1 - yn * sin1 + dx\n  //   //       var ay1 = xn * sin1 + yn * cos1 + dy\n  //   //       var ax2 = xn * cos2 - yn * sin2 + dx\n  //   //       var ay2 = xn * sin2 + yn * cos2 + dy\n  //   //\n  //   //       var head = [[ax1,ay1],[dx,dy],[ax2,ay2]];\n  //   //\n  //   //       return \"M0,0\"+\"L\"+dx+\",\"+dy+\"L\"+head[0][0]+\",\"+head[0][1]+\"L\"+head[1][0]+\",\"+head[1][1]+\"L\"+head[2][0]+\",\"+head[2][1];\n  //   //       // arc.outerRadius(radiusScale(+d.value.maxTotal));\n  //   //       // return arc({endAngle: +getPercentType(\"gender\",d.value.yearMap.get(2014)) * tau});\n  //   //     })\n  //   //     .attr(\"stroke-width\",function(d){\n  //   //       return lineWidthScale(d.value.maxTotal)\n  //   //       // return 1.4;\n  //   //     })\n  //   //     .attr(\"stroke\",function(d){\n  //   //       if(d.value.diff > 0){\n  //   //         return \"#3989cb\"\n  //   //       }\n  //   //       return \"rgb(214, 84, 84)\";\n  //   //     })\n  //   //     .on(\"mouseover\",function(d){\n  //   //       console.log(d.value.diff);\n  //   //       console.log(newsIDName.get(d.key).Company);\n  //   //     })\n  //   //     ;\n  //\n  //\n  //   // var pieChartBackground = mapSvg.append(\"g\")\n  //   //   .attr(\"class\",\"map-markers\")\n  //   //   .selectAll(\"circle\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"circle\")\n  //   //   .attr(\"class\",\"map-marker\")\n  //   //   .attr(\"r\",function(d){\n  //   //     return radiusScale(+d.value.maxTotal);\n  //   //   })\n  //   //   .style(\"fill\",function(d){\n  //   //     //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n  //   //     //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //\n  //   //     // return colorScalePercent(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //     return \"#72c1ff\"\n  //   //   })\n  //   //   .attr(\"transform\",function(d){\n  //   //     var location = d.value.location;\n  //   //     return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n  //   //   })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     // console.log(d);\n  //   //     console.log(newsIDName.get(d.key).Company);\n  //   //     console.log(getPercentType(\"gender\",d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   ;\n  //\n  //   // var pieCharts = mapSvg.append(\"g\")\n  //   //     .selectAll(\"g\")\n  //   //     .data(newsNest)\n  //   //     .enter()\n  //   //     .append(\"g\")\n  //   //     .attr(\"transform\",function(d){\n  //   //       var location = d.value.location;\n  //   //       return \"translate(\"+projection([+location.lng,location.lat])+\")\";\n  //   //     })\n  //   //     .append(\"path\")\n  //   //     .attr(\"class\",\"slice-arc\")\n  //   //     .style(\"fill\",function(d){\n  //   //       return \"blue\"\n  //   //       //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n  //   //       //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //       return colorScalePercent(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //       return \"red\"\n  //   //     })\n  //   //     .attr(\"d\", function(d){\n  //   //       arc.outerRadius(radiusScale(+d.value.maxTotal));\n  //   //       return arc({endAngle: +getPercentType(\"gender\",d.value.yearMap.get(2014)) * tau});\n  //   //     });\n  //\n  //   // function buildAxis(){\n  //   //  var chartAxis = chartDiv.append(\"g\")\n  //   //    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n  //   //    .attr(\"class\",\"swarm-axis\")\n  //   //    ;\n  //   //\n  //   //  chartAxis.append(\"g\")\n  //   //    .append(\"line\")\n  //   //    .attr(\"x1\",0)\n  //   //    .attr(\"x2\",\"100%\")\n  //   //    .attr(\"y1\",height/2)\n  //   //    .attr(\"y2\",height/2)\n  //   //    .attr(\"class\",\"swarm-axis-line\")\n  //   //\n  //   // }\n  //   // buildAxis();\n  //\n  //   // var linearGradientDown = chartSvgDoubleChange\n  //   //   .append(\"defs\")\n  //   //   .append(\"linearGradient\")\n  //   //   .attr(\"id\",\"gradient\")\n  //   //   .attr(\"x1\",0)\n  //   //   .attr(\"x2\",0)\n  //   //   .attr(\"y1\",0)\n  //   //   .attr(\"y2\",1)\n  //   //\n  //   // var linearGradientUp = chartSvgDoubleChange\n  //   //   .append(\"defs\")\n  //   //   .append(\"linearGradient\")\n  //   //   .attr(\"id\",\"gradient-up\")\n  //   //   .attr(\"x1\",0)\n  //   //   .attr(\"x2\",0)\n  //   //   .attr(\"y1\",0)\n  //   //   .attr(\"y2\",1)\n  //   //\n  //   // var chartSvgDoubleChangeG = chartSvgDoubleChange\n  //   //   .append(\"g\")\n  //   //   .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  //   //\n  //   // linearGradientUp\n  //   //   .append(\"stop\")\n  //   //   .attr(\"stop-color\",\"blue\")\n  //   //   .attr(\"stop-opacity\",1)\n  //   //\n  //   // linearGradientUp\n  //   //   .append(\"stop\")\n  //   //   .attr(\"offset\",\"100%\")\n  //   //   .attr(\"stop-color\",\"blue\")\n  //   //   .attr(\"stop-opacity\",0)\n  //   //\n  //   // linearGradientDown\n  //   //   .append(\"stop\")\n  //   //   .attr(\"stop-color\",\"red\")\n  //   //   .attr(\"stop-opacity\",0)\n  //   //\n  //   // linearGradientDown\n  //   //   .append(\"stop\")\n  //   //   .attr(\"offset\",\"100%\")\n  //   //   .attr(\"stop-color\",\"red\")\n  //   //   .attr(\"stop-opacity\",1)\n  //   //\n  //   // chartSvgDoubleChangeG.append(\"marker\")\n  //   //   .attr(\"id\",\"triangle-up\")\n  //   //   .attr(\"viewBox\",\"0 0 10 10\")\n  //   //   .attr(\"refX\",0)\n  //   //   .attr(\"refY\",5)\n  //   //   .attr(\"markerUnits\",\"strokeWidth\")\n  //   //   .attr(\"markerWidth\",6)\n  //   //   .attr(\"markerHeight\",8)\n  //   //   .attr(\"orient\",\"auto\")\n  //   //   .append(\"path\")\n  //   //   .attr(\"fill\",\"blue\")\n  //   //   .attr(\"d\",\"M 0 0 L 10 5 L 0 10 z\")\n  //   //\n  //   // chartSvgDoubleChangeG.append(\"marker\")\n  //   //   .attr(\"id\",\"triangle-down\")\n  //   //   .attr(\"viewBox\",\"0 0 10 10\")\n  //   //   .attr(\"refX\",0)\n  //   //   .attr(\"refY\",5)\n  //   //   .attr(\"markerUnits\",\"strokeWidth\")\n  //   //   .attr(\"markerWidth\",6)\n  //   //   .attr(\"markerHeight\",8)\n  //   //   .attr(\"orient\",\"auto\")\n  //   //   .append(\"path\")\n  //   //   .attr(\"fill\",\"red\")\n  //   //   .attr(\"d\",\"M 0 0 L 10 5 L 0 10 z\")\n  //   //\n  //   //\n  // \t// function drawArrow (t0,t1) {\n  // \t// \tvar d = t1 > t0 ?\n  // \t// \t\t(\"M0,\" + (t1-2) + \" L4,\" + (t1-8) + \" L1.5,\" + (t1-8) + \" L0,\" + t0 + \" L-1.5,\" + (t1-8) + \" L-4,\" + (t1-8) + \" Z\") :\n  // \t// \t\t(\"M0,\" + (t1+2) + \" L4,\" + (t1+8) + \" L1.5,\" + (t1+8) + \" L0,\" + t0 + \" L-1.5,\" + (t1+8) + \" L-4,\" + (t1+8) + \" Z\");\n  //   //\n  // \t// \treturn d;\n  // \t// }\n  //   //\n  //   // var arrows = chartSvgDoubleChangeG\n  //   //   .selectAll(\"path\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"path\")\n  //   //   .attr(\"class\",\"arrow-scatter-line\")\n  //   //   .attr(\"d\",function(d){\n  //   //     var t0 = yScale(getPercentType(\"gender\",d.value.values[0]))\n  //   //     var t1 = yScale(getPercentType(\"gender\",d.value.yearMap.get(2014)))\n  //   //     // return null\n  //   //     //\n  //   //     return drawArrow(t0,t1)\n  //   //   })\n  //   //   .attr(\"fill\",function(d){\n  //   //     if(d.value.diff > 0){\n  //   //       return \"url(#gradient-up)\"\n  //   //     }\n  //   //     return \"url(#gradient)\";\n  //   //   })\n  //   //   .attr(\"stroke\",\"none\")\n  //   //   .attr(\"fill-opacity\",1)\n  //   //\n  //   // var arrowXScale = d3.scaleLinear().domain([0,arrows.size()-1]).range([0,width]);\n  //   //\n  //   // arrows\n  //   //   .sort(function(a,b){\n  //   //     // return getPercentType(\"gender\",b.value.values[0]) - getPercentType(\"gender\",a.value.values[0])\n  //   //     return b.value.diff - a.value.diff;\n  //   //   })\n  //   //   .attr(\"transform\",function(d,i){\n  //   //     return \"translate(\"+arrowXScale(i)+\",0)\"\n  //   //     // return \"translate(\"+totalXScale(d.value.yearMap.get(2014).total_num)+\",0)\"\n  //   //   })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     console.log(getPercentType(\"supGender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   ;\n  //\n  //\n  //   // chartSvgDoubleChangeG\n  //   //   .selectAll(\"line\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"arrow-scatter-line\")\n  //   //   .style(\"stroke-width\",function(d){\n  //   //     if(+d.value.yearMap.get(2014).total_num > 100){\n  //   //       return \"2px\"\n  //   //     }\n  //   //     if(+d.value.yearMap.get(2014).total_num > 50){\n  //   //       return \"1px\"\n  //   //     }\n  //   //     if(+d.value.yearMap.get(2014).total_num > 10){\n  //   //       return \".5px\"\n  //   //     }\n  //   //   })\n  //   //   .style(\"stroke\",function(d){\n  //   //     if(d.value.diff > 0){\n  //   //       return \"blue\"\n  //   //     }\n  //   //     return \"red\"\n  //   //   })\n  //   //   .attr(\"x1\",function(d){\n  //   //     return xScale(getPercentType(\"supGender\",d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return xScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n  //   //     // return diffScale(d.value.diff);\n  //   //   })\n  //   //   .attr(\"y1\",function(d){\n  //   //     return totalScale(d.value.yearMap.get(2014).total_num)\n  //   //     // return yScale(getPercentType(\"supGender\",d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"y2\", function(d) {\n  //   //     return totalScale(d.value.yearMap.get(2014).total_num)\n  //   //     // return yScale(getPercentType(\"supGender\",d.value.yearMap.get(2014)));\n  //   //     // return raceDiffScale(d.value.raceDiff)\n  //   //   })\n  //   //   .attr(\"marker-end\",function(d){\n  //   //     if(d.value.diff > 0){\n  //   //       return \"url(#triangle-up)\";\n  //   //     }\n  //   //     return \"url(#triangle-down)\";\n  //   //   })\n  //   //   // .style(\"stroke\",\"url(#gradient)\")\n  //   //   .on(\"mouseover\",function(d){\n  //   //     console.log(getPercentType(\"supGender\",d.value.yearMap.get(2014)),getPercentType(\"gender\",d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   ;\n  //\n  //   // chartSvgDoubleChangeG\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"arrow-scatter-line-axis\")\n  //   //   .attr(\"x1\",function(d){\n  //   //     return xScale(.5);\n  //   //   })\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return xScale(.5);\n  //   //   })\n  //   //   .attr(\"y1\",function(d){\n  //   //     return 0;\n  //   //   })\n  //   //   .attr(\"y2\", function(d) {\n  //   //     return height;\n  //   //   })\n  //\n  //   // chartSvgDoubleChangeG\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"arrow-scatter-line-axis\")\n  //   //   .attr(\"x1\",function(d){\n  //   //     return 0;\n  //   //   })\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return width;\n  //   //   })\n  //   //   .attr(\"y1\",function(d){\n  //   //     return yScale(.5);\n  //   //   })\n  //   //   .attr(\"y2\", function(d) {\n  //   //     return yScale(.5);\n  //   //   })\n  //\n  //\n  //   // function buildAverage(){\n  //   //   var chartAverage = chartDiv.append(\"g\")\n  //   //      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n  //   //      .attr(\"class\",\"swarm-average\")\n  //   //      ;\n  //   //\n  //   //  chartAverage.append(\"text\")\n  //   //    .attr(\"class\",\"swarm-average-text swarm-average-text-label\")\n  //   //    .attr(\"x\",xScale(dataToMap.average))\n  //   //    .attr(\"y\",height*.33-19)\n  //   //    .text(\"Overall\")\n  //   //\n  //   //   chartAverage.append(\"text\")\n  //   //     .attr(\"class\",\"swarm-average-text\")\n  //   //     .attr(\"x\",xScale(dataToMap.average))\n  //   //     .attr(\"y\",height*.33-5)\n  //   //     .text(Math.round(dataToMap.average*100)+\"% Male\")\n  //   //\n  //   //   chartAverage.append(\"line\")\n  //   //     .attr(\"class\",\"swarm-average-line\")\n  //   //     .attr(\"x1\",xScale(dataToMap.average))\n  //   //     .attr(\"x2\",xScale(dataToMap.average))\n  //   //     .attr(\"y1\",height*.33)\n  //   //     .attr(\"y2\",height*.66)\n  //   //     ;\n  //   // }\n  //   // buildAverage();\n  //\n  //   // var topRowCircle = chartG\n  //   //   .append(\"g\")\n  //   //   .selectAll(\"circle\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"circle\")\n  //   //   .attr(\"class\",\"swarm-circle\")\n  //   //   .attr(\"r\", function(d){\n  //   //     return 3\n  //   //   })\n  //   //   .attr(\"cx\", function(d) {\n  //   //     return xScale(getPercent(d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   .attr(\"cy\", function(d) {\n  //   //     return 0;\n  //   //   })\n  //   //   .style(\"fill\",function(d){\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     console.log(d);\n  //   //   })\n  //   //   ;\n  //   //\n  //   // var bottomRowCircle = chartG\n  //   //   .append(\"g\")\n  //   //   .selectAll(\"circle\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"circle\")\n  //   //   .attr(\"class\",\"swarm-circle\")\n  //   //   .attr(\"r\", function(d){\n  //   //     return 3\n  //   //   })\n  //   //   .attr(\"cx\", function(d) {\n  //   //     return xScale(getPercent(d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"cy\", function(d) {\n  //   //     return 100;\n  //   //   })\n  //   //   .style(\"fill\",function(d){\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   ;\n  //   //\n  //   // var rowLines = chartG\n  //   //   .append(\"g\")\n  //   //   .selectAll(\"line\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"slope-line\")\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return xScale(getPercent(d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"y2\", function(d) {\n  //   //     return 100;\n  //   //   })\n  //   //   .attr(\"x1\", function(d) {\n  //   //     return xScale(getPercent(d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   .attr(\"y1\", function(d) {\n  //   //     return 0;\n  //   //   })\n  //   //   .style(\"stroke\",function(d){\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   ;\n  //   //\n  //   // var miniWidth = 40;\n  //   // var miniHeight = 100;\n  //   //\n  //   // var multipleY = d3.scaleLinear().domain([.3,1]).range([miniHeight,0]);\n  //   //\n  //   // var miniMultipleWrapper = miniMultiple.selectAll(\"div\")\n  //   //   .data(newsNest)\n  //   //   .enter()\n  //   //   .append(\"div\")\n  //   //   .attr(\"class\",\"mini-multiple-div\")\n  //   //   ;\n  //   //\n  //   // miniMultipleWrapper.append(\"p\")\n  //   //   .attr(\"class\",\"mini-multiple-text\")\n  //   //   .style(\"margin-top\",20)\n  //   //   .text(function(d){\n  //   //     return newsIDName.get(d.value.values[0].NewsID).Company;\n  //   //   })\n  //   //   ;\n  //   //\n  //   // var miniMultipleWrapperSvg = miniMultipleWrapper\n  //   //   .append(\"svg\")\n  //   //   .attr(\"class\",\"slope-mini-svg\")\n  //   //   .attr(\"height\",miniHeight)\n  //   //   .style(\"height\",miniHeight+\"px\")\n  //   //   ;\n  //   //\n  //   // miniMultipleWrapperSvg\n  //   //   .append(\"circle\")\n  //   //   .attr(\"cx\",function(d){\n  //   //     return 0;\n  //   //   })\n  //   //   .attr(\"cy\",function(d){\n  //   //     return multipleY(getPercent(d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"r\",2)\n  //   //   .attr(\"class\",\"slope-small-dot\")\n  //   //   .style(\"fill\",function(d){\n  //   //\n  //   //     console.log(newsIDName.get(d.key).Company);\n  //   //     console.log(getPercent(d.value.yearMap.get(2014)));\n  //   //     console.log(getPercent(d.value.values[0]));\n  //   //\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   ;\n  //   //\n  //   // miniMultipleWrapperSvg\n  //   //   .append(\"circle\")\n  //   //   .attr(\"cx\",function(d){\n  //   //     return miniWidth;\n  //   //   })\n  //   //   .attr(\"cy\",function(d){\n  //   //     return multipleY(getPercent(d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   .attr(\"r\",2)\n  //   //   .attr(\"class\",\"slope-small-dot\")\n  //   //   .style(\"fill\",function(d){\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   ;\n  //   //\n  //   // miniMultipleWrapperSvg\n  //   //   .selectAll(\"line\")\n  //   //   .data([0,1,2,4,5])\n  //   //   .enter()\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"slope-line-axis\")\n  //   //   .attr(\"y1\", function(d,i) {\n  //   //     return i*20+\"%\";\n  //   //   })\n  //   //   .attr(\"x1\", function(d) {\n  //   //     return 0;\n  //   //   })\n  //   //   .attr(\"y2\", function(d,i) {\n  //   //     return i*20+\"%\";\n  //   //   })\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return miniWidth;\n  //   //   })\n  //   //\n  //   // miniMultipleWrapperSvg\n  //   //   .append(\"line\")\n  //   //   .attr(\"class\",\"slope-line\")\n  //   //   .attr(\"y1\", function(d) {\n  //   //     return multipleY(getPercent(d.value.values[0]));\n  //   //   })\n  //   //   .attr(\"x1\", function(d) {\n  //   //     return 0;\n  //   //   })\n  //   //   .attr(\"y2\", function(d) {\n  //   //     return multipleY(getPercent(d.value.yearMap.get(2014)));\n  //   //   })\n  //   //   .attr(\"x2\", function(d) {\n  //   //     return miniWidth;\n  //   //   })\n  //   //   .style(\"stroke\",function(d){\n  //   //     var diff = getPercent(d.value.yearMap.get(2014))-getPercent(d.value.values[0])\n  //   //     if(diff > .01){\n  //   //       return \"red\"\n  //   //     }\n  //   //     if(diff < .01){\n  //   //       return \"green\";\n  //   //     }\n  //   //   })\n  //   //   ;\n  //   //\n  //\n  //   // cell\n  //   //   .append(\"circle\")\n  //   //   .attr(\"class\",\"swarm-circle\")\n  //   //   .attr(\"r\", function(d){\n  //   //     return d.radius\n  //   //   })\n  //   //   // .attr(\"cx\", function(d) { return d.x; })\n  //   //   // .attr(\"cy\", function(d) { return d.y; })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     console.log(d.male_num/d.total_num);\n  //   //     console.log(newsIDName.get(d.NewsID).Company);\n  //   //   })\n  //   //   ;\n  //\n  //   // dataToMap.values = d3.nest()\n  //   //   .key(function(d){\n  //   //     return Math.round(getPercent(d)*50)/50;\n  //   //   })\n  //   //   .sortKeys(function(a,b){\n  //   //     return a-b;\n  //   //   })\n  //   //   .entries(dataToMap.values)\n  //   //   ;\n  //   //\n  //   // chartDiv.append(\"div\")\n  //   //   .attr(\"class\",\"histogram-avg-div\")\n  //   //   .style(\"left\",function(d){\n  //   //     return (dataToMap.average*width+1)+\"px\"\n  //   //   })\n  //   //   .append(\"p\")\n  //   //   .text(Math.round(dataToMap.average*100)+\"%\")\n  //   //   ;\n  //   //\n  //   // var yearsColumn = chartDiv\n  //   //   .selectAll(\".histogram-year-container\")\n  //   //   .data(dataToMap.values)\n  //   //   .enter()\n  //   //   .append(\"div\")\n  //   //   .attr(\"class\",\"histogram-year-container\")\n  //   //   .style(\"left\",function(d){\n  //   //     return (d.key*width+1)+\"px\"\n  //   //   })\n  //   //   ;\n  //   //\n  //   // yearsColumn\n  //   //   .selectAll(\"div\")\n  //   //   .data(function(d){\n  //   //     return d.values\n  //   //   })\n  //   //   .enter()\n  //   //   .append(\"div\")\n  //   //   .attr(\"class\",function(d){\n  //   //     var state = null;\n  //   //     var region = null;\n  //   //     if(newsIdMap.has(d.NewsID)){\n  //   //       state = newsIdMap.get(d.NewsID).State;\n  //   //     }\n  //   //     if(regionMap.has(state)){\n  //   //       region = regionMap.get(state)[3];\n  //   //     }\n  //   //\n  //   //     if(region ==\"West\"){\n  //   //       region = \"green\"\n  //   //     }\n  //   //     if(region ==\"South\"){\n  //   //       region = \"blue\"\n  //   //     }\n  //   //     if(region ==\"Midwest\"){\n  //   //       region = \"purple\"\n  //   //     }\n  //   //     if(region ==\"Northeast\"){\n  //   //       region = \"yellow\"\n  //   //     }\n  //   //     return \"histogram-year-item \"+region\n  //   //   })\n  //   //   .style(\"background-color\",function(d){\n  //   //     // return backgroundFunction(d)\n  //   //     return null\n  //   //   })\n  //   //   .on(\"mouseover\",function(d){\n  //   //     console.log(newsIDName.get(d.NewsID).Company);\n  //   //   })\n  //   //   ;\n  //   //\n  //   // yearsColumn.append(\"p\")\n  //   //   .text(function(d,i){\n  //   //     if(i%5 == 0 || i==0 || i==yearsColumn.size()-1){\n  //   //       return Math.round(d.key*100)+\"%\";\n  //   //     }\n  //   //     return null;\n  //   //\n  //   //   })\n  //   //   ;\n  // }\n  // // function backgroundFunction(d){\n  // //   var state = null;\n  // //   var region = null;\n  // //   if(newsIdMap.has(d.NewsID)){\n  // //     state = newsIdMap.get(d.NewsID).State;\n  // //   }\n  // //   if(regionMap.has(state)){\n  // //     region = regionMap.get(state)[3];\n  // //   }\n  // //   if(region ==\"West\"){\n  // //     return \"green\"\n  // //   }\n  // //   if(region ==\"South\"){\n  // //     return \"blue\"\n  // //   }\n  // //   if(region ==\"Midwest\"){\n  // //     return \"purple\"\n  // //   }\n  // //   if(region ==\"Northeast\"){\n  // //     return \"yellow\"\n  // //   }\n  // // }\n  // buildChart();\n\n}\n\nexports.default = { init: init };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  // var cut = \"supGender\"\n  var countMin = 100;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      var mean = d3.mean(data, function (d) {\n        return +(data.total_num - data.male_num) / data.total_num;\n      });\n      return mean;\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +data.white_sup_num / data.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +data.white_num / data.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  function getPercentType(kind, data) {\n    if (kind == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (kind == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (kind == \"supGender\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 40, left: 40 };\n  var width = 500 - margin.left - margin.right;\n  var height = 500 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".scatter\");\n\n  // container.append(\"p\")\n  //   .attr(\"class\",\"chart-title\")\n  //   .text(\"Gender Break-down of Staff vs. Leaders\")\n  //   ;\n\n  function buildToggles() {\n    var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n    var sizeCats = [0, 20, 50, 100, 500];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == sizeCats.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      return d;\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      countMin = d;\n      buildChart();\n    });\n\n    var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type histogram-chart-toggle-first\").selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == raceGenderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"race\") {\n        return \"Race\";\n      }\n      return \"Gender\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      cut = d;\n      buildChart();\n    });\n\n    var leaderToggleData = [\"all\", \"leader\"];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(leaderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == leaderToggleData.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"all\") {\n        return \"All Staff\";\n      }\n      return \"Leadership\";\n    }).on(\"click\", function (d) {\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      group = d;\n      buildChart();\n    });\n  }\n  buildToggles();\n\n  function buildChart() {\n\n    d3.selectAll(\".scatter-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"div\").attr(\"class\", \"scatter-chart-wrapper\").style(\"width\", width + margin.left + margin.right + \"px\");\n\n    var chartSvgDoubleChange = chartDiv.append(\"svg\").attr(\"class\", \"scatter-chart-wrapper-svg-double-change\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).style(\"width\", width + margin.left + margin.right + \"px\").style(\"height\", height + margin.top + margin.bottom + \"px\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    var maxPercentArray = [];\n    var diffArray = [];\n    var raceDiffArray = [];\n\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      var maxPercent = d3.max(leaves, function (d) {\n        return getPercent(d);\n      });\n      maxPercentArray.push(maxPercent);\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(2014)) {\n        return d;\n      }\n      return null;\n    });\n\n    for (var item in newsNest) {\n      var diff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"supGender\";\n      var raceDiff = getPercent(newsNest[item].value.yearMap.get(2014)) - getPercent(newsNest[item].value.values[0]);\n      cut = \"gender\";\n      diffArray.push(diff);\n      raceDiffArray.push(raceDiff);\n      newsNest[item].value.companyName = newsIDName.get(newsNest[item].key).Company;\n      newsNest[item].value.diff = diff;\n      newsNest[item].value.raceDiff = raceDiff;\n    }\n    ;\n\n    var totalExtent = d3.extent(newsNest, function (d) {\n      return +d.value.maxTotal;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n    var percentExtent = d3.extent(maxPercentArray, function (d) {\n      return d;\n    });\n    var diffExtent = d3.extent(diffArray, function (d) {\n      return d;\n    });\n    var raceDiffExtent = d3.extent(raceDiffArray, function (d) {\n      return d;\n    });\n    var diffScale = d3.scaleLinear().domain([diffExtent[0], diffExtent[1]]).range([0, width]);\n    var raceDiffScale = d3.scaleLinear().domain([raceDiffExtent[0], raceDiffExtent[1]]).range([height, 0]);\n\n    var colorScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"white\", \"green\"]);\n    var strokeScale = d3.scaleLinear().domain([diffExtent[0], 0, diffExtent[1]]).range([\"red\", \"grey\", \"green\"]);\n\n    var xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n    var yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n\n    function buildAxis() {\n      var chartAxis = chartSvgDoubleChange.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-axis\");\n\n      var chartAxisLines = chartAxis.append(\"g\");\n\n      chartAxisLines.append(\"line\").attr(\"x1\", width / 2).attr(\"x2\", width / 2).attr(\"y1\", 0).attr(\"y2\", height).attr(\"class\", \"swarm-axis-line\");\n\n      chartAxisLines.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n\n      var chartAxisText = chartAxis.append(\"g\");\n\n      chartAxisText.append(\"g\").selectAll(\"text\").data([\"100% Female Leaders\", \"100% Male Leaders\"]).enter().append(\"text\").attr(\"x\", function (d, i) {\n        return width / 2;\n      }).attr(\"y\", function (d, i) {\n        if (i == 0) {\n          return 0;\n        }\n        return height;\n      }).attr(\"class\", \"swarm-axis-tick-text\").text(function (d) {\n        return d;\n      }).style(\"text-anchor\", function (d, i) {\n        return \"middle\";\n      }).style(\"dominant-baseline\", \"text-after-edge\");\n\n      chartAxisText.append(\"g\").selectAll(\"text\").data([\"100% Male Staff\", \"100% Female Staff\"]).enter().append(\"text\").attr(\"x\", function (d, i) {\n        if (i == 0) {\n          return 0;\n        }\n        return width;\n      }).attr(\"y\", height / 2).attr(\"class\", \"swarm-axis-tick-text\").text(function (d) {\n        return d;\n      }).style(\"text-anchor\", function (d, i) {\n        if (i == 0) {\n          return \"end\";\n        }\n        return \"start\";\n      });\n    }\n    buildAxis();\n\n    var chartSvgDoubleChangeG = chartSvgDoubleChange.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    chartSvgDoubleChangeG.selectAll(\"circle\").data(newsNest).enter().append(\"circle\").attr(\"class\", \"scatter-circle-double-axis\").attr(\"r\", function (d) {\n      return radiusScale(d.value.yearMap.get(2014).total_num);\n    }).attr(\"cx\", function (d) {\n      return xScale(getPercentType(\"gender\", d.value.yearMap.get(2014)));\n      return diffScale(d.value.diff);\n    }).attr(\"cy\", function (d) {\n      return yScale(getPercentType(\"supGender\", d.value.yearMap.get(2014)));\n    }).on(\"mouseover\", function (d) {});\n\n    chartDiv.append(\"div\").attr(\"class\", \"swarm-chart-logos\").style(\"transform\", \"translate(\" + margin.left + \"px\" + \",\" + margin.top + \"px\" + \")\").selectAll(\"div\").data(newsNest).enter().append(\"div\").style(\"transform\", function (d) {\n      return \"translate(\" + xScale(getPercentType(\"gender\", d.value.yearMap.get(2014))) + \"px\" + \",\" + yScale(getPercentType(\"supGender\", d.value.yearMap.get(2014))) + \"px\" + \")\";\n    }).attr(\"class\", \"swarm-chart-logo-container\").append(\"div\").style(\"width\", function (d) {\n      return \"1px\";\n    }).style(\"height\", function (d) {\n      return \"1px\";\n    }).attr(\"class\", \"swarm-chart-logo\").style(\"width\", function (d) {\n      return radiusScale(d.value.yearMap.get(2014).total_num) * 2 + \"px\";\n    }).style(\"height\", function (d) {\n      return radiusScale(d.value.yearMap.get(2014).total_num) * 2 + \"px\";\n    }).style(\"background-image\", function (d) {\n      if (d.value.companyName == \"the new york times\") {\n        return \"url(assets/ny-times-logo.svg)\";\n      }\n    });\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo) {\n\n  var cut = \"gender\";\n  // var cut = \"supGender\"\n  var countMin = 100;\n\n  function getAverage(data) {\n    if (cut == \"gender\") {\n      var mean = d3.mean(data, function (d) {\n        return +d.male_num / d.total_num;\n      });\n      return mean;\n    }\n    if (cut == \"supWhite\") {\n      return d3.mean(data, function (d) {\n        return +d.white_sup_num / d.total_sup_num;\n      });\n    }\n    if (cut == \"supGender\") {\n      return d3.mean(data, function (d) {\n        return +d.male_sup_num / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return +d.white_num / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\") {\n      return +data.male_num / data.total_num;\n    }\n    if (cut == \"supWhite\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (cut == \"supGender\") {\n      return +data.male_sup_num / data.total_sup_num;\n    }\n    return +data.white_num / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 40, left: 40 };\n  var width = 1000 - margin.left - margin.right;\n  var height = 500 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".slope-chart\");\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data([0, 20, 50, 100, 500]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    countMin = d;\n    buildChart();\n  });\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data([\"race\", \"gender\", \"supWhite\", \"supGender\"]).enter().append(\"p\").attr(\"class\", \"histogram-chart-toggle-item\").text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    cut = d;\n    buildChart();\n  });\n\n  var xScale = d3.scaleLinear().domain([.54, .75]).range([0, width]);\n\n  function buildChart() {\n\n    d3.selectAll(\".slope-chart-wrapper\").remove();\n\n    var chartDiv = container.append(\"svg\").attr(\"class\", \"slope-chart-wrapper\").attr(\"width\", width).attr(\"height\", height);\n\n    var miniMultiple = container.append(\"div\").attr(\"class\", \"slope-mini-multiple-div\");\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(2014)) {\n        return d;\n      }\n      return null;\n    });\n\n    var totalExtent = d3.extent(newsNest, function (d) {\n      return +d.value.maxTotal;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n\n    // function buildAxis(){\n    //  var chartAxis = chartDiv.append(\"g\")\n    //    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    //    .attr(\"class\",\"swarm-axis\")\n    //    ;\n    //\n    //  chartAxis.append(\"g\")\n    //    .append(\"line\")\n    //    .attr(\"x1\",0)\n    //    .attr(\"x2\",\"100%\")\n    //    .attr(\"y1\",height/2)\n    //    .attr(\"y2\",height/2)\n    //    .attr(\"class\",\"swarm-axis-line\")\n    //\n    // }\n    // buildAxis();\n\n    var chartG = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // function buildAverage(){\n    //   var chartAverage = chartDiv.append(\"g\")\n    //      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\")\n    //      .attr(\"class\",\"swarm-average\")\n    //      ;\n    //\n    //  chartAverage.append(\"text\")\n    //    .attr(\"class\",\"swarm-average-text swarm-average-text-label\")\n    //    .attr(\"x\",xScale(dataToMap.average))\n    //    .attr(\"y\",height*.33-19)\n    //    .text(\"Overall\")\n    //\n    //   chartAverage.append(\"text\")\n    //     .attr(\"class\",\"swarm-average-text\")\n    //     .attr(\"x\",xScale(dataToMap.average))\n    //     .attr(\"y\",height*.33-5)\n    //     .text(Math.round(dataToMap.average*100)+\"% Male\")\n    //\n    //   chartAverage.append(\"line\")\n    //     .attr(\"class\",\"swarm-average-line\")\n    //     .attr(\"x1\",xScale(dataToMap.average))\n    //     .attr(\"x2\",xScale(dataToMap.average))\n    //     .attr(\"y1\",height*.33)\n    //     .attr(\"y2\",height*.66)\n    //     ;\n    // }\n    // buildAverage();\n\n    var topRowCircle = chartG.append(\"g\").selectAll(\"circle\").data(newsNest).enter().append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n      return 3;\n    }).attr(\"cx\", function (d) {\n      return xScale(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"cy\", function (d) {\n      return 0;\n    }).style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    }).on(\"mouseover\", function (d) {\n      console.log(d);\n    });\n\n    var bottomRowCircle = chartG.append(\"g\").selectAll(\"circle\").data(newsNest).enter().append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n      return 3;\n    }).attr(\"cx\", function (d) {\n      return xScale(getPercent(d.value.values[0]));\n    }).attr(\"cy\", function (d) {\n      return 100;\n    }).style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    var rowLines = chartG.append(\"g\").selectAll(\"line\").data(newsNest).enter().append(\"line\").attr(\"class\", \"slope-line\").attr(\"x2\", function (d) {\n      return xScale(getPercent(d.value.values[0]));\n    }).attr(\"y2\", function (d) {\n      return 100;\n    }).attr(\"x1\", function (d) {\n      return xScale(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"y1\", function (d) {\n      return 0;\n    }).style(\"stroke\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    var miniWidth = 40;\n    var miniHeight = 100;\n\n    var multipleY = d3.scaleLinear().domain([.3, 1]).range([miniHeight, 0]);\n\n    var miniMultipleWrapper = miniMultiple.selectAll(\"div\").data(newsNest).enter().append(\"div\").attr(\"class\", \"mini-multiple-div\");\n\n    miniMultipleWrapper.append(\"p\").attr(\"class\", \"mini-multiple-text\").style(\"margin-top\", 20).text(function (d) {\n      return newsIDName.get(d.value.values[0].NewsID).Company;\n    });\n\n    var miniMultipleWrapperSvg = miniMultipleWrapper.append(\"svg\").attr(\"class\", \"slope-mini-svg\").attr(\"height\", miniHeight).style(\"height\", miniHeight + \"px\");\n\n    miniMultipleWrapperSvg.append(\"circle\").attr(\"cx\", function (d) {\n      return 0;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercent(d.value.values[0]));\n    }).attr(\"r\", 2).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    miniMultipleWrapperSvg.append(\"circle\").attr(\"cx\", function (d) {\n      return miniWidth;\n    }).attr(\"cy\", function (d) {\n      return multipleY(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"r\", 2).attr(\"class\", \"slope-small-dot\").style(\"fill\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    miniMultipleWrapperSvg.selectAll(\"line\").data([0, 1, 2, 4, 5]).enter().append(\"line\").attr(\"class\", \"slope-line-axis\").attr(\"y1\", function (d, i) {\n      return i * 20 + \"%\";\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d, i) {\n      return i * 20 + \"%\";\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    });\n\n    miniMultipleWrapperSvg.append(\"line\").attr(\"class\", \"slope-line\").attr(\"y1\", function (d) {\n      return multipleY(getPercent(d.value.values[0]));\n    }).attr(\"x1\", function (d) {\n      return 0;\n    }).attr(\"y2\", function (d) {\n      return multipleY(getPercent(d.value.yearMap.get(2014)));\n    }).attr(\"x2\", function (d) {\n      return miniWidth;\n    }).style(\"stroke\", function (d) {\n      var diff = getPercent(d.value.yearMap.get(2014)) - getPercent(d.value.values[0]);\n      if (diff > .01) {\n        return \"red\";\n      }\n      if (diff < .01) {\n        return \"green\";\n      }\n    });\n\n    // cell\n    //   .append(\"circle\")\n    //   .attr(\"class\",\"swarm-circle\")\n    //   .attr(\"r\", function(d){\n    //     return d.radius\n    //   })\n    //   // .attr(\"cx\", function(d) { return d.x; })\n    //   // .attr(\"cy\", function(d) { return d.y; })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(d.male_num/d.total_num);\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n\n    // dataToMap.values = d3.nest()\n    //   .key(function(d){\n    //     return Math.round(getPercent(d)*50)/50;\n    //   })\n    //   .sortKeys(function(a,b){\n    //     return a-b;\n    //   })\n    //   .entries(dataToMap.values)\n    //   ;\n    //\n    // chartDiv.append(\"div\")\n    //   .attr(\"class\",\"histogram-avg-div\")\n    //   .style(\"left\",function(d){\n    //     return (dataToMap.average*width+1)+\"px\"\n    //   })\n    //   .append(\"p\")\n    //   .text(Math.round(dataToMap.average*100)+\"%\")\n    //   ;\n    //\n    // var yearsColumn = chartDiv\n    //   .selectAll(\".histogram-year-container\")\n    //   .data(dataToMap.values)\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",\"histogram-year-container\")\n    //   .style(\"left\",function(d){\n    //     return (d.key*width+1)+\"px\"\n    //   })\n    //   ;\n    //\n    // yearsColumn\n    //   .selectAll(\"div\")\n    //   .data(function(d){\n    //     return d.values\n    //   })\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",function(d){\n    //     var state = null;\n    //     var region = null;\n    //     if(newsIdMap.has(d.NewsID)){\n    //       state = newsIdMap.get(d.NewsID).State;\n    //     }\n    //     if(regionMap.has(state)){\n    //       region = regionMap.get(state)[3];\n    //     }\n    //\n    //     if(region ==\"West\"){\n    //       region = \"green\"\n    //     }\n    //     if(region ==\"South\"){\n    //       region = \"blue\"\n    //     }\n    //     if(region ==\"Midwest\"){\n    //       region = \"purple\"\n    //     }\n    //     if(region ==\"Northeast\"){\n    //       region = \"yellow\"\n    //     }\n    //     return \"histogram-year-item \"+region\n    //   })\n    //   .style(\"background-color\",function(d){\n    //     // return backgroundFunction(d)\n    //     return null\n    //   })\n    //   .on(\"mouseover\",function(d){\n    //     console.log(newsIDName.get(d.NewsID).Company);\n    //   })\n    //   ;\n    //\n    // yearsColumn.append(\"p\")\n    //   .text(function(d,i){\n    //     if(i%5 == 0 || i==0 || i==yearsColumn.size()-1){\n    //       return Math.round(d.key*100)+\"%\";\n    //     }\n    //     return null;\n    //\n    //   })\n    //   ;\n  }\n  function backgroundFunction(d) {\n    var state = null;\n    var region = null;\n    if (newsIdMap.has(d.NewsID)) {\n      state = newsIdMap.get(d.NewsID).State;\n    }\n    if (regionMap.has(state)) {\n      region = regionMap.get(state)[3];\n    }\n    if (region == \"West\") {\n      return \"green\";\n    }\n    if (region == \"South\") {\n      return \"blue\";\n    }\n    if (region == \"Midwest\") {\n      return \"purple\";\n    }\n    if (region == \"Northeast\") {\n      return \"yellow\";\n    }\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(mapData, latLongData, newsIDLocation, newsIDInfo, top_3_data) {\n\n  var yearSelected = 2015;\n\n  var top3Map = d3.map(top_3_data, function (d) {\n    return d.Organization.toLowerCase();\n  });\n\n  var cut = \"race\";\n  var group = \"all\";\n  var countMin = 50;\n\n  function getAverage(data) {\n\n    if (cut == \"gender\" && group == \"all\") {\n      return d3.mean(data, function (d) {\n        return (d.total_num - d.male_num) / d.total_num;\n      });\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.white_sup_num) / d.total_sup_num;\n      });\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.male_sup_num) / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return (+d.total_num - +d.white_num) / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\" && group == \"all\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return (+data.total_sup_num - +data.white_sup_num) / data.total_sup_num;\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  var latLongMap = d3.map(latLongData, function (d) {\n    return d.NewsID;\n  });\n  var newsIdMap = d3.map(newsIDLocation, function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var margin = { top: 40, right: 40, bottom: 20, left: 40 };\n  var width = 1000 - margin.left - margin.right;\n  var height = 250 - margin.top - margin.bottom;\n  var horzScale = d3.scaleLinear().domain([0, 1]).range([0, width]);\n  var container = d3.select(\".swarm-leader\");\n\n  // container.append(\"p\")\n  //   .attr(\"class\",\"chart-title\")\n  //   .text(\"Newsrooms Broken-down by Gender\")\n  //   ;\n\n  var toggles = container.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n  var sizeCats = [0, 20, 50, 100, 500];\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n    if (i == 0) {\n      return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    }\n    if (i == sizeCats.length - 1) {\n      return \"back-curve histogram-chart-toggle-item\";\n    }\n    return \"histogram-chart-toggle-item\";\n  }).text(function (d) {\n    return d;\n  }).on(\"click\", function (d) {\n    var dataSelected = d;\n    d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n      if (d == dataSelected) {\n        return true;\n      }\n      return false;\n    });\n    countMin = d;\n    buildChart();\n  });\n\n  var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n    if (i == 0) {\n      return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    }\n    if (i == raceGenderToggleData.length - 1) {\n      return \"back-curve histogram-chart-toggle-item\";\n    }\n    return \"histogram-chart-toggle-item\";\n  }).text(function (d) {\n    if (d == \"race\") {\n      return \"Race\";\n    }\n    return \"Gender\";\n  }).on(\"click\", function (d) {\n    var dataSelected = d;\n    d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n      if (d == dataSelected) {\n        return true;\n      }\n      return false;\n    });\n    cut = d;\n    buildChart();\n  });\n\n  var leaderToggleData = [\"all\", \"leader\"];\n\n  toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type\").selectAll(\"p\").data(leaderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n    if (i == 0) {\n      return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    }\n    if (i == leaderToggleData.length - 1) {\n      return \"back-curve histogram-chart-toggle-item\";\n    }\n    return \"histogram-chart-toggle-item\";\n  }).text(function (d) {\n    if (d == \"all\") {\n      return \"All Staff\";\n    }\n    return \"Leadership\";\n  }).on(\"click\", function (d) {\n    var dataSelected = d;\n    d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n      if (d == dataSelected) {\n        return true;\n      }\n      return false;\n    });\n    group = d;\n    buildChart();\n  });\n\n  var xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]);\n  if (cut == \"race\") {\n    xScale.domain([0, 1]);\n  }\n\n  function buildChart() {\n\n    d3.selectAll(\".swarm-leader-chart-container\").remove();\n\n    var chartDivContainer = container.append(\"div\").attr(\"class\", \"swarm-leader-chart-container\").style(\"width\", width + margin.left + margin.right + \"px\");\n\n    var chartToolTip = chartDivContainer.append(\"div\").attr(\"class\", \"swarm-chart-tool-tip\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").text(function (d) {\n      return d;\n    });\n\n    var filteredMapData = mapData.filter(function (d) {\n      if (cut == \"supWhite\" || cut == \"supGender\") {\n        return d.total_num > countMin && d.total_sup_num > 0;\n      }\n      return d.total_num > countMin;\n    });\n\n    var yearNest = d3.nest().key(function (d) {\n      return +d.Year;\n    }).rollup(function (leaves) {\n      var average = getAverage(leaves);\n      return { average: average, values: leaves };\n    }).entries(filteredMapData);\n\n    var newsNest = d3.nest().key(function (d) {\n      return +d.NewsID;\n    }).rollup(function (leaves) {\n      var map = d3.map(leaves, function (d) {\n        return d.Year;\n      });\n      var maxTotalNum = d3.max(leaves, function (d) {\n        return d.total_num;\n      });\n      return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n    }).entries(filteredMapData);\n\n    var diffArray = [];\n\n    newsNest = newsNest.filter(function (d) {\n      if (d.value.yearMap.has(yearSelected)) {\n        return d;\n      }\n      return null;\n    });\n\n    for (var item in newsNest) {\n      newsNest[item].companyName = newsIDName.get(newsNest[item].key).Company;\n      newsNest[item].top3Data = top3Map.get(newsNest[item].companyName);\n      var diff = getPercent(newsNest[item].value.yearMap.get(yearSelected)) - getPercent(newsNest[item].value.values[0]);\n      diffArray.push(diff);\n      newsNest[item].value.diff = diff;\n    }\n    ;\n\n    var newsMap = d3.map(newsNest, function (d) {\n      return d.key;\n    });\n\n    var diffExtent = d3.extent(diffArray, function (d) {\n      return d;\n    });\n    var colorScale = d3.scaleLinear().domain(diffExtent).range([\"green\", \"red\"]);\n    var genderColorScale = d3.scaleLinear().domain([.2, .5, .8]).range([\"#2161fa\", \"#dddddd\", \"#ff3333\"]);\n    if (cut == \"race\") {\n      genderColorScale.domain([0, .5, 1]);\n    }\n\n    var dataToMap = yearNest.filter(function (d) {\n      return d.key == yearSelected;\n    })[0].value.values;\n\n    var totalExtent = d3.extent(dataToMap, function (d) {\n      return +d.total_num;\n    });\n    var radiusScale = d3.scaleLinear().domain(totalExtent).range([5, 30]);\n\n    dataToMap.forEach(function (d, i) {\n      d.radius = radiusScale(d.total_num);\n      d.companyName = newsIDName.get(+d.NewsID).Company;\n      d.top3Data = top3Map.get(d.companyName);\n    });\n\n    var dataNest = d3.nest().key(function (d) {\n      if (+d.top3Data[\"TOP3-nonwhite\"] > 0) {\n        return 1;\n      }\n      return 0;\n    }).entries(dataToMap);\n\n    function buildAnSVG(dataSet) {\n\n      var forceCollide = d3.forceCollide().radius(function (d) {\n        return d.radius + 1;\n      }).iterations(1);\n\n      var simulation = d3.forceSimulation(dataSet).force(\"x\", d3.forceX(function (d) {\n        return xScale(getPercent(d));\n      }).strength(1)).force(\"y\", d3.forceY(height / 2)).force(\"collide\", forceCollide).stop();\n\n      var chartDiv = chartDivContainer.append(\"svg\").attr(\"class\", \"swarm-chart-wrapper\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n\n      function buildAxis() {\n\n        var chartAxis = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-axis\");\n\n        var tickData = [.2, .3, .5, .7, .8];\n        if (cut == \"race\") {\n          tickData = [0, .3, .5, .7, 1];\n        }\n\n        var ticks = chartAxis.append(\"g\").attr(\"class\", \"swarm-axis-tick-container\").selectAll(\"g\").data(tickData).enter().append(\"g\").attr(\"class\", \"swarm-axis-tick-g\");\n\n        ticks.append(\"line\").style(\"stroke\", function (d) {\n          if (d == .5) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", function (d, i) {\n          if (d == .5) {\n            return height / 2;\n          }\n          return 0;\n        }).attr(\"y2\", function (d) {\n          if (d == .5) {\n            return 0;\n          }\n          return height * .05;\n        }).attr(\"class\", \"swarm-axis-tick\");\n\n        ticks.append(\"text\").attr(\"x\", function (d) {\n          return xScale(d);\n        }).attr(\"y\", -6).attr(\"class\", \"swarm-axis-tick-text\").style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (i == tickData.length - 1) {\n            return \"end\";\n          }\n          return null;\n        }).style(\"fill\", function (d, i) {\n          if (d == .5) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).text(function (d, i) {\n          if (i == 0) {\n            if (cut == \"race\") {\n              return Math.floor((1 - d) * 100) + \"% White Staff\";\n            }\n            return Math.floor((1 - d) * 100) + \"% Male Staff\";\n          }\n          if (i == tickData.length - 1) {\n            if (cut == \"race\") {\n              return Math.floor(d * 100) + \"% Non-White Staff\";\n            }\n            return Math.floor(d * 100) + \"% Female Staff\";\n          }\n          if (d == .5) {\n            return \"50/50  Split\";\n          }\n          if (d < .5) {\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n\n        chartAxis.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n      }\n      buildAxis();\n\n      var chartG = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      function buildAverage() {\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(dataToMap.average)).attr(\"y\", height * .2 - 22).text(\"Overall\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text\").attr(\"x\", xScale(dataToMap.average)).attr(\"y\", height * .2 - 7).text(function () {\n          if (cut == \"race\") {\n            return Math.round((1 - dataToMap.average) * 100) + \"% White\";\n          }\n          return Math.round((1 - dataToMap.average) * 100) + \"% Male\";\n        });\n\n        chartAverage.append(\"line\").attr(\"class\", \"swarm-average-line\").attr(\"x1\", xScale(dataToMap.average)).attr(\"x2\", xScale(dataToMap.average)).attr(\"y1\", height * .2).attr(\"y2\", height * .8);\n      }\n      // buildAverage();\n\n      for (var i = 0; i < 250; ++i) {\n        simulation.tick();\n      }var cell = chartG.selectAll(\"g\").data(dataSet).enter().append(\"g\");\n\n      cell.append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n        return d.radius;\n      }).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      }).on(\"mouseover\", function (d) {\n        var data = d;\n        chartToolTip.style(\"visibility\", \"visible\").style(\"top\", data.y + data.radius + \"px\").style(\"left\", data.x + data.radius + 50 + \"px\").text(newsIDName.get(d.NewsID).Company + \" - \" + Math.floor(getPercent(d) * 100) + \"%\");\n      }).on(\"mouseout\", function (d) {\n        chartToolTip.style(\"visibility\", null).text(\"\");\n      }).style(\"fill\", function (d) {\n        var value = getPercent(d);\n        return genderColorScale(value);\n      });\n    }\n\n    buildAnSVG(dataNest[0].values);\n    buildAnSVG(dataNest[1].values);\n\n    // var searchDiv = chartDivContainer.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-div\")\n    //\n    // searchDiv\n    //   .append(\"input\")\n    //   .attr(\"class\",\"swarm-chart-search\")\n    //   .attr(\"placeholder\",\"Find a Newsroom\")\n    //   ;\n\n    // chartDivContainer.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-source\")\n    //   .selectAll(\"p\")\n    //   .data([\"Source: ASNE Survey, 2017\",\"At least 50 staff\"])\n    //   .enter()\n    //   .append(\"p\")\n    //   .attr(\"class\",\"swarm-chart-source-text\")\n    //   .text(function(d){\n    //     return d;\n    //   })\n    //   ;\n\n    // chartDivContainer.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-logos\")\n    //   .style(\"transform\", \"translate(\" + margin.left+\"px\" + \",\" + margin.top+\"px\" + \")\")\n    //   .selectAll(\"div\")\n    //   .data(dataToMap.values)\n    //   .enter()\n    //   .append(\"div\")\n    //   .style(\"transform\",function(d){\n    //      return \"translate(\" + d.x+\"px\" + \",\" + d.y+\"px\" + \")\"\n    //   })\n    //   .attr(\"class\",\"swarm-chart-logo-container\")\n    //   .append(\"div\")\n    //   .style(\"width\", function(d){\n    //     return \"1px\"\n    //   })\n    //   .style(\"height\", function(d){\n    //     return \"1px\"\n    //   })\n    //   .attr(\"class\",\"swarm-chart-logo\")\n    //   .style(\"width\", function(d){\n    //     return d.radius*2+\"px\"\n    //   })\n    //   .style(\"height\", function(d){\n    //     return d.radius*2+\"px\"\n    //   })\n    //   .style(\"background-image\",function(d){\n    //     if(newsIDName.get(d.NewsID).Company==\"the new york times\"){\n    //       return \"url(assets/ny-times-logo.svg)\"\n    //     }\n    //   })\n    //   ;\n  }\n  buildChart();\n}\n\nexports.default = { init: init };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _geolib = __webpack_require__(18);\n\nvar _geolib2 = _interopRequireDefault(_geolib);\n\nvar _locate = __webpack_require__(15);\n\nvar _locate2 = _interopRequireDefault(_locate);\n\nvar _urlParameter = __webpack_require__(16);\n\nvar _urlParameter2 = _interopRequireDefault(_urlParameter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mobile = false;\nvar fullWidth = false;\nvar tablet = false;\nif (/Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n  mobile = true;\n}\n\nvar viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\nvar viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n\nvar cutAmount = 4;\nif (viewportWidth < 800) {\n  cutAmount = 3;\n}\nif (viewportWidth < 700) {\n  cutAmount = 2;\n}\nif (viewportWidth < 500) {\n  cutAmount = 1;\n}\n\nvar urlParam = _urlParameter2.default.get('view');\nvar urlParamCut = _urlParameter2.default.get('filter');\nvar urlParamEmbed = _urlParameter2.default.get('embed');\n\nconsole.log(urlParamEmbed);\n\nif (urlParamEmbed) {\n  d3.select(\"#content\").classed(\"embedded\", true);\n}\n\nfunction wrapTwo(text, width) {\n  text.each(function () {\n    var text = d3.select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.3,\n        // ems\n    y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")),\n        tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n      }\n    }\n  });\n}\n\nfunction wrap(text, width) {\n  text.each(function () {\n    var text = d3.select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.05,\n        // ems\n    y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")),\n        tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\").style(\"font-weight\", 500);\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        tspan = text.append(\"tspan\").style(\"font-size\", \"12px\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n      }\n    }\n  });\n}\nfunction wrapThree(text, width) {\n  text.each(function () {\n    var text = d3.select(this),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        lineHeight = 1.3,\n        // ems\n    y = text.attr(\"y\"),\n        dy = parseFloat(text.attr(\"dy\")),\n        tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(\" \"));\n      if (tspan.node().getComputedTextLength() > width) {\n        line.pop();\n        tspan.text(line.join(\" \"));\n        line = [word];\n        tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n      }\n    }\n  });\n}\n\nvar states = [[\"Maine\", \"ME\", 1, \"Northeast\", 23], [\"Vermont\", \"VT\", 2, \"Northeast\", 50], [\"New Hampshire\", \"NH\", 3, \"Northeast\", 33], [\"Rhode Island\", \"RI\", 4, \"Northeast\", 44], [\"Massachusetts\", \"MA\", 5, \"Northeast\", 25], [\"Connecticut\", \"CT\", 6, \"Northeast\", 9], [\"Delaware\", \"DE\", 7, \"Northeast\", 10], [\"New Jersey\", \"NJ\", 8, \"Northeast\", 34], [\"New York\", \"NY\", 9, \"Northeast\", 36], [\"Pennsylvania\", \"PA\", 10, \"Northeast\", 42], [\"District of Columbia\", \"DC\", 11, \"Northeast\", 11], [\"Maryland\", \"MD\", 12, \"Northeast\", 24], [\"Virginia\", \"VA\", 13, \"South\", 51], [\"North Carolina\", \"NC\", 14, \"South\", 37], [\"South Carolina\", \"SC\", 15, \"South\", 45], [\"Georgia\", \"GA\", 16, \"South\", 13], [\"Alabama\", \"AL\", 17, \"South\", 1], [\"Mississippi\", \"MS\", 18, \"South\", 28], [\"Louisiana\", \"LA\", 19, \"South\", 22], [\"Arkansas\", \"AR\", 20, \"South\", 5], [\"Tennessee\", \"TN\", 21, \"South\", 47], [\"Kentucky\", \"KY\", 22, \"South\", 21], [\"West Virginia\", \"WV\", 23, \"South\", 54], [\"Oklahoma\", \"OK\", 24, \"Midwest\", 40], [\"Colorado\", \"CO\", 25, \"West\", 8], [\"Utah\", \"UT\", 26, \"West\", 49], [\"Idaho\", \"ID\", 27, \"West\", 16], [\"Wyoming\", \"WY\", 28, \"West\", 56], [\"Montana\", \"MT\", 29, \"West\", 30], [\"North Dakota\", \"ND\", 30, \"Midwest\", 38], [\"South Dakota\", \"SD\", 31, \"Midwest\", 46], [\"Nebraska\", \"NE\", 32, \"Midwest\", 31], [\"Kansas\", \"KS\", 33, \"Midwest\", 20], [\"Iowa\", \"IA\", 34, \"Midwest\", 19], [\"Minnesota\", \"MN\", 35, \"Midwest\", 27], [\"Wisconsin\", \"WI\", 36, \"Midwest\", 55], [\"Indiana\", \"IN\", 37, \"Midwest\", 18], [\"Missouri\", \"MO\", 38, \"Midwest\", 29], [\"Ohio\", \"OH\", 39, \"Midwest\", 39], [\"Michigan\", \"MI\", 40, \"Midwest\", 26], [\"Illinois\", \"IL\", 41, \"Midwest\", 17], [\"Florida\", \"FL\", 42, \"South\", 12], [\"California\", \"CA\", 43, \"West\", 6], [\"Nevada\", \"NV\", 44, \"West\", 32], [\"Texas\", \"TX\", 45, \"South\", 48], [\"Arizona\", \"AZ\", 46, \"West\", 4], [\"New Mexico\", \"NM\", 47, \"West\", 35], [\"Alaska\", \"AK\", 48, \"West\", 2], [\"Washington\", \"WA\", 49, \"West\", 53], [\"Oregon\", \"OR\", 50, \"West\", 41], [\"Hawaii\", \"HI\", 51, \"West\", 15]];\n\nfunction init(rawMapData, latLongData, newsIDInfo, stateTopo, censusData, censusOverride, new_2018) {\n\n  // mapData = mapData.concat(new_2018)\n\n\n  var mergedData = [];\n  var newDataIDs = new_2018.map(function (d) {\n    return +d.NewsID;\n  });\n  var oldIDs = rawMapData.filter(function (d) {\n    return +d.Year == 2017;\n  });\n\n  // for (var newsRoom in oldIDs){\n  //   if (newDataIDs.indexOf(+oldIDs[newsRoom][\"NewsID\"]) == -1){\n  //     oldIDs[newsRoom][\"Year\"] = 2018;\n  //     mergedData.push(oldIDs[newsRoom])\n  //   }\n  // }\n\n  mergedData = new_2018; //mergedData.concat(new_2018);\n\n  var mapData = rawMapData.concat(mergedData);\n\n  var newToggleForRaceAndGender;\n  var alphaSort = \"\";\n  var searchMap;\n  var footerContainer;\n  var stepperContainerToggle;\n  var stepperBack;\n  var chartTableItem;\n  var miniMultipleWrapper;\n  var toggleType;\n  var miniTextHeight = 70;\n  var miniMargin = { top: 0, right: 20, bottom: 0, left: 20 };\n  var miniWidth = 70 - miniMargin.left - miniMargin.right;\n  var miniHeight = 90 - miniMargin.top - miniMargin.bottom;\n  var multipleY = d3.scaleLinear().domain([.2, .5]).range([miniHeight, 0]);\n  var embedLinkText;\n  var embedLinkInput;\n  var censusOverrideMap = d3.map(censusOverride, function (d) {\n    return +d.news_id;\n  });\n  var extentOverride;\n\n  var mapBig = false;\n  var censusMap = d3.map(censusData, function (d) {\n    return d.city_state;\n  });\n  var searchInput;\n  var newsIDSearch = \"\";\n  var searchResults;\n  var searchResultText;\n  var newsIDSearchColor = \"#7354ab\";\n  var searchAlphaSortLetters;\n  var searchResultsContainer;\n  var yearSelected = 2018;\n  var yearOld = 2001;\n  var currentChart = \"swarm\";\n  var previousChart = \"swarm\";\n  var previousCut = \"gender\";\n  var cut = \"gender\";\n\n  if (urlParamCut != \"\") {\n    previousCut = urlParamCut;\n    cut = urlParamCut;\n  }\n\n  var group = \"all\";\n  var newsIDSearchList = [];\n  var countMin = 25;\n  var mouseoverOffsetX = 20;\n  var mouseoverOffsetY = -14;\n  var stepperSequence = [\"swarm\", \"swarm-scatter\", \"arrow-scatter\", \"arrow-scatter-full\", \"table\"];\n  var companyImages = [\"the new york times\", \"the wall street journal\", \"los angeles times\", \"usa today\"];\n  var tableData = [];\n  function getAverage(data) {\n\n    if (cut == \"gender\" && group == \"all\") {\n      return d3.mean(data, function (d) {\n        return (d.total_num - d.male_num) / d.total_num;\n      });\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.white_sup_num) / d.total_sup_num;\n      });\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return d3.mean(data, function (d) {\n        return (+d.total_sup_num - +d.male_sup_num) / d.total_sup_num;\n      });\n    }\n    return d3.mean(data, function (d) {\n      return (+d.total_num - +d.white_num) / d.total_num;\n    });\n  }\n\n  function getPercent(data) {\n    if (cut == \"gender\" && group == \"all\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (cut == \"race\" && group != \"all\") {\n      return (+data.total_sup_num - +data.white_sup_num) / data.total_sup_num;\n    }\n    if (cut == \"gender\" && group != \"all\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    return (+data.total_num - +data.white_num) / data.total_num;\n  }\n\n  function getPercentType(kind, dataSet) {\n    var data = dataSet.yearMap.get(yearSelected);\n\n    if (kind == \"gender-old\") {\n      kind = \"gender\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year == yearOld;\n      });\n      if (data.length > 0) {\n        data = data[0];\n      } else {\n        return \"n/a\";\n      }\n      // data = dataSet.yearMap.get(yearOld)\n    }\n    if (kind == \"race-old\") {\n      kind = \"race\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year == yearOld;\n      });\n      if (data.length > 0) {\n        data = data[0];\n      } else {\n        return \"n/a\";\n      }\n      // data = dataSet.yearMap.get(yearOld)\n    }\n    if (kind == \"white-old\") {\n      kind = \"white\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year == yearOld;\n      });\n      if (data.length > 0) {\n        data = data[0];\n      } else {\n        return \"n/a\";\n      }\n      // data = dataSet.yearMap.get(yearOld)\n    }\n    if (kind == \"black-old\") {\n      kind = \"black\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year == yearOld;\n      });\n      if (data.length > 0) {\n        data = data[0];\n      } else {\n        return \"n/a\";\n      }\n      // data = dataSet.yearMap.get(yearOld)\n    }\n    if (kind == \"hisp-old\") {\n      kind = \"hisp\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year == yearOld;\n      });\n      if (data.length > 0) {\n        data = data[0];\n      } else {\n        return \"n/a\";\n      }\n      // data = dataSet.yearMap.get(yearOld)\n    }\n    if (kind == \"asian-old\") {\n      kind = \"asian\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year == yearOld;\n      });\n      if (data.length > 0) {\n        data = data[0];\n      } else {\n        return \"n/a\";\n      }\n    }\n    if (kind == \"sup-white-old\") {\n      kind = \"supWhiteRaw\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year == yearOld;\n      });\n      if (data.length > 0) {\n        data = data[0];\n      } else {\n        return \"n/a\";\n      }\n      // data = dataSet.yearMap.get(yearOld)\n    }\n    if (kind == \"sup-gender-old\") {\n      kind = \"supGender\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year == yearOld;\n      });\n      if (data.length > 0) {\n        data = data[0];\n      } else {\n        return \"n/a\";\n      }\n      // data = dataSet.yearMap.get(yearOld)\n    }\n    if (kind == \"sup-black-old\") {\n      kind = \"supBlack\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year == yearOld;\n      });\n      if (data.length > 0) {\n        data = data[0];\n      } else {\n        return \"n/a\";\n      }\n      // data = dataSet.yearMap.get(yearOld)\n    }\n    if (kind == \"sup-hisp-old\") {\n      kind = \"supHisp\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year == yearOld;\n      });\n      if (data.length > 0) {\n        data = data[0];\n      } else {\n        return \"n/a\";\n      }\n      // data = dataSet.yearMap.get(yearOld)\n    }\n    if (kind == \"sup-asian-old\") {\n      kind = \"supAsian\";\n      data = dataSet.values.filter(function (d) {\n        return +d.Year == yearOld;\n      });\n      if (data.length > 0) {\n        data = data[0];\n      } else {\n        return \"n/a\";\n      }\n      // data = dataSet.yearMap.get(yearOld)\n    }\n    if (kind == \"gender\") {\n      return +(data.total_num - data.male_num) / data.total_num;\n    }\n    if (kind == \"supWhite\") {\n      return (+data.total_sup_num - +data.white_sup_num) / data.total_sup_num;\n    }\n    if (kind == \"supBlack\") {\n      return +data.black_sup_num / data.total_sup_num;\n    }\n    if (kind == \"supHisp\") {\n      return +data.hisp_sup_num / data.total_sup_num;\n    }\n    if (kind == \"supAsian\") {\n      return +data.asian_sup_num / data.total_sup_num;\n    }\n    if (kind == \"supWhiteAdjusted\") {\n      var racePoint = (+data.total_sup_num - +data.white_sup_num) / data.total_sup_num - (1 - dataSet.whiteCensus);\n      return racePoint;\n    }\n    if (kind == \"supGender\") {\n      return (+data.total_sup_num - +data.male_sup_num) / data.total_sup_num;\n    }\n    if (kind == \"raceRaw\") {\n      return (+data.total_num - +data.white_num) / data.total_num;\n    }\n    if (kind == \"white\") {\n      return +data.white_num / data.total_num;\n    }\n    if (kind == \"black\") {\n      return +data.black_num / data.total_num;\n    }\n    if (kind == \"hisp\") {\n      return +data.hisp_num / data.total_num;\n    }\n    if (kind == \"asian\") {\n      return +data.asian_num / data.total_num;\n    }\n    if (kind == \"supWhiteRaw\") {\n      return +data.white_sup_num / data.total_sup_num;\n    }\n    if (kind == \"genderStaff\") {\n\n      return +(data.total_num - data.male_num - (+data.total_sup_num - +data.male_sup_num)) / (data.total_num - data.total_sup_num);\n    }\n    if (kind == \"raceStaff\") {\n      return (+data.total_num - +data.white_num - (+data.total_sup_num - +data.white_sup_num)) / (data.total_num - data.total_sup_num);\n    }\n    if (kind == \"whiteStaff\") {\n      return (+data.white_num - +data.white_sup_num) / (data.total_num - data.total_sup_num);\n    }\n    if (kind == \"blackStaff\") {\n      return (+data.black_num - +data.black_sup_num) / (data.total_num - data.total_sup_num);\n    }\n    if (kind == \"hispStaff\") {\n      return (+data.hisp_num - +data.hisp_sup_num) / (data.total_num - data.total_sup_num);\n    }\n    if (kind == \"asianStaff\") {\n      return (+data.asian_num - +data.asian_sup_num) / (data.total_num - data.total_sup_num);\n    }\n    var racePoint = (+data.total_num - +data.white_num) / data.total_num - (1 - dataSet.whiteCensus);\n    return racePoint;\n  }\n\n  newsIDInfo.forEach(function (d) {\n    var first = d.Company.charAt(0);\n    var second = \"\";\n    if (d.Company.split(\" \").length > 1) {\n      second = d.Company.split(\" \")[1].charAt(0);\n    }\n    d.chars = [first, second];\n\n    var override = {};\n    var hasOverride = false;\n    if (censusOverrideMap.has(+d.NewsID)) {\n      override = censusOverrideMap.get(+d.NewsID);\n      hasOverride = true;\n    }\n    d.override = override;\n    d.hasOverride = hasOverride;\n  });\n\n  var latLongMap = d3.map(latLongData.filter(function (d) {\n    return d.lng != \"NULL\";\n  }), function (d) {\n    return d.NewsID;\n  });\n  var newsIDName = d3.map(newsIDInfo, function (d) {\n    return d.NewsID;\n  });\n  var regionMap = d3.map(states, function (d) {\n    return d[1];\n  });\n\n  var newsIdSelected = 108;\n\n  var margin = { top: 40, right: 20, bottom: 70, left: 20 };\n  var width = 1000 - margin.left - margin.right;\n  var height = 300 - margin.top - margin.bottom;\n  var container = d3.select(\".swarm\");\n  if (viewportWidth < 1000) {\n    width = viewportWidth - margin.left - margin.right;\n  }\n  if (viewportWidth < 400 || mobile) {\n    height = 400 - margin.top - margin.bottom;\n  }\n\n  var chartTopSection = container.append(\"div\").attr(\"class\", \"chart-top-section\");\n\n  function buildStepper() {\n\n    var stepperContainer = chartTopSection.append(\"div\").attr(\"class\", \"stepper-container\");\n\n    var stepperTextArray = [\"The Newspaper Diversity Survey measures the percentage of women and minorities working in US newsrooms. The results<span class='note-new-data'>*</span> from \" + yearSelected + \"&rsquo;s survey are in.\", \"Newsrooms are about 32 percetage points more white than the audience they report on.\", \"When measuring leadership, newsrooms with more diversity tended to also have diverse staffs.\", \"change over time\", \"change over time 2\"];\n\n    var stepperText = stepperContainer.append(\"div\").attr(\"class\", \"stepper-container-text-container\").append(\"p\").attr(\"class\", \"stepper-container-text\").html(function (d) {\n      return stepperTextArray[0];\n    });\n\n    stepperContainerToggle = stepperContainer.append(\"div\").attr(\"class\", \"stepper-toggle-row\");\n\n    function changeStepper(direction) {\n\n      stepperPlayIcon.style(\"display\", \"none\");\n\n      stepperPlayText.transition().duration(750).text(\"Loading...\").transition().duration(250).style(\"opacity\", 0).on(\"end\", function () {\n        stepperPlayIcon.style(\"display\", \"block\");\n      }).transition().duration(250).style(\"opacity\", 1).text(\"Resume\");\n\n      var previous;\n\n      stepperContainerToggleContainerSteps.each(function (d, i) {\n        if (d3.select(this).classed(\"stepper-item-selected\") == true) {\n          previous = i;\n        }\n      });\n\n      if (previous == 4 && direction == \"forward\") {\n        previous = -1;\n      }\n\n      if (direction == \"forward\") {\n        currentChart = stepperSequence[previous + 1];\n        stepperContainerToggleContainerSteps.classed(\"stepper-item-selected\", function (d, i) {\n          if (d == currentChart && i == previous + 1) {\n            return true;\n          }\n          return false;\n        });\n      } else {\n        currentChart = stepperSequence[previous - 1];\n        stepperContainerToggleContainerSteps.classed(\"stepper-item-selected\", function (d, i) {\n          if (d == currentChart && i == previous - 1) {\n            return true;\n          }\n          return false;\n        });\n      }\n\n      buildChart(currentChart);\n    }\n\n    stepperBack = stepperContainerToggle.append(\"div\").attr(\"class\", \"stepper-back\").on(\"click\", function (d) {\n      changeStepper(\"backward\");\n    });\n    var stepperPlay = stepperContainerToggle.append(\"div\").attr(\"class\", \"stepper-play-button\").on(\"click\", function (d) {\n      changeStepper(\"forward\");\n    });\n\n    stepperBack.append(\"svg\").attr(\"viewBox\", \"0 0 24 14\").attr(\"width\", \"100%\").attr(\"height\", \"100%\").append(\"path\").attr(\"d\", \"M0 7.002a.999.999 0 0 0 .286.693l.006.012 6 6a1 1 0 0 0 1.414-1.414L3.414 7.998H23a1 1 0 0 0 0-2H3.414l4.292-4.291A1 1 0 0 0 6.292.293l-6 6-.006.01a.978.978 0 0 0-.208.313.974.974 0 0 0-.078.382v.004z\");\n\n    var stepperPlayIcon = stepperPlay.append(\"div\").attr(\"class\", \"stepper-arrow\");\n\n    var stepperPlayText = stepperPlay.append(\"p\").attr(\"class\", \"stepper-play-text\").text(\"Start\");\n\n    var stepperContainerToggleContainer = stepperContainerToggle.append(\"div\").attr(\"class\", \"stepper-item-container\");\n\n    var toggleText = [\"View \" + yearSelected + \" <span>Gender</span> and <span>Race</span> Data\", \"How Leadership Compares\", \"How Top Newsrooms Changed\", \"Overall Change for All Newsrooms\", \"Individual Newsroom Demographics\"];\n\n    var stepNumToText = [yearSelected + \" results\", \"Leadership\", yearOld + \" vs. \" + yearSelected + \": Top Newsrooms\", \"Overall Change\", \"My Newsroom\"];\n\n    if (viewportWidth < 620) {\n      stepNumToText = [yearSelected + \" Results\", \"Newsroom Leaders\", \"Top Newsrooms\", \"Change\", \"My Newsroom\"];\n    }\n\n    var stepperContainerToggleContainerSteps = stepperContainerToggleContainer.selectAll(\"div\").data(stepperSequence).enter().append(\"div\").attr(\"class\", function (d, i) {\n      if (urlParam != \"\") {\n        if (i == urlParam) {\n          return \"stepper-item stepper-item-selected\";\n        }\n      } else {\n        if (i == 0) {\n          return \"stepper-item stepper-item-selected\";\n        }\n      }\n\n      return \"stepper-item\";\n    }).html(function (d, i) {\n      if (i == 4) {\n        return \"<span class='stepper-text'>\" + stepNumToText[i] + \"</span>\";\n      }\n      return \"<span class='stepper-text'>\" + stepNumToText[i] + \"</span>\" + \"<span class='stepper-bar'> | </span>\";\n      // return i+1;\n    }).on(\"mouseover\", function (d, i) {\n      var item = i;\n      var dataSelected = d;\n      stepperContainerToggleContainerHover.style(\"visibility\", function (d, i) {\n        if (d == dataSelected && !mobile) {\n          return \"visible\";\n        }\n        return null;\n      }).html(function () {\n        return toggleText[item];\n      });\n    }).on(\"mouseout\", function () {\n      stepperContainerToggleContainerHover.style(\"visibility\", null);\n    }).on(\"click\", function (d, i) {\n\n      embedLinkText.text(\"Embed this chart\");\n      embedLinkInput.style(\"display\", null);\n\n      _urlParameter2.default.set('view', i);\n\n      var num = i;\n\n      // stepperText\n      //   .transition()\n      //   .duration(500)\n      //   .style(\"opacity\",0)\n      //   .on(\"end\",function(){\n      //     stepperText.text(stepperTextArray[i])\n      //       .transition()\n      //       .duration(500)\n      //       .style(\"opacity\",1)\n      //       ;\n      //   });\n\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\".stepper-item\").classed(\"stepper-item-selected\", function (d, i) {\n        if (i == num) {\n          return true;\n        }\n        return false;\n      });\n      currentChart = d;\n      buildChart(d);\n    });\n\n    var stepperContainerToggleContainerHover = stepperContainerToggleContainerSteps.append(\"div\").attr(\"class\", \"stepper-item-hover\").html(function (d) {\n      return \"\";\n    });\n  }\n  buildStepper();\n\n  function searchSpectrum() {\n\n    // var searchDiv = toggles.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-div\")\n    //\n    // searchDiv\n    //   .append(\"input\")\n    //   .attr(\"class\",\"swarm-chart-search\")\n    //   .attr(\"placeholder\",\"Find a Newsroom\")\n    //   .on(\"focus\",function(d){\n    //     searchResultsContainer.style(\"display\",\"block\")\n    //   })\n    //   .on(\"focusout\",function(d){\n    //     searchResultsContainer.style(\"display\",null)\n    //   })\n    //   ;\n    //\n    // var searchResultsContainer = searchDiv\n    //   .append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-results\");\n    //\n    // var searchAlphaSort = searchResultsContainer\n    //   .append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-results-alpha-container\");\n    //\n    // searchAlphaSort.append(\"p\")\n    //   .text(\"filter\")\n    //   .attr(\"class\",\"swarm-chart-search-results-alpha-label\");\n    //\n    // searchAlphaSort\n    //   .append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-results-alpha-item-container\")\n    //   .selectAll(\"p\")\n    //   .data([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"])\n    //   .enter()\n    //   .append(\"p\")\n    //   .attr(\"class\",\"swarm-chart-search-results-alpha-item\")\n    //   .text(function(d){\n    //     return d;\n    //   })\n    //   ;\n    //\n    // var searchResults = searchResultsContainer.append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-results-result-container\")\n    //   .selectAll(\"div\")\n    //   .data(newsIDInfo)\n    //   .enter()\n    //   .append(\"div\")\n    //   .attr(\"class\",\"swarm-chart-search-results-result\")\n    //   .append(\"p\")\n    //   .attr(\"class\",\"swarm-chart-search-results-result-text\")\n    //   .text(function(d){\n    //     return d.Company;\n    //   })\n    //   ;\n    //\n\n\n    var searchArray = [];\n    var searchResultMouseOver = false;\n\n    searchInput.on(\"keyup\", keyupedFilmColumn);\n    //\n    function keyupedFilmColumn() {\n      searchNewsroom(this.value.trim());\n    }\n\n    function searchNewsroom(value) {\n      if (value.length > 2) {\n        // searchResults.style(\"display\",\"block\");\n\n        var escapeString = function escapeString(s) {\n          return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n        };\n\n        searchAlphaSortLetters.style(\"color\", null).style(\"text-decoration\", null);\n        alphaSort = \"\";\n\n        var re = new RegExp(\"\\\\b\" + escapeString(value), \"i\");\n        // var filteredSpectrumData = spectrumData.filter(function(d,i){\n        //   var string = d.genreList;\n        //   if(genreSelected == \"all\" && stage == 3){\n        //     return +d.gross > 45;\n        //   }\n        //   else if(genreSelected ==\"all\" && stage == 2){\n        //     return d;\n        //   }\n        //   else if(stage == 3){\n        //     var substring = genreSelected;\n        //     return +d.gross > 45 && string.indexOf(substring) > -1;\n        //   }\n        //   return string.indexOf(substring) > -1\n        // })\n        // ;\n        //\n\n        searchResults.style(\"display\", function (d, i) {\n          if (re.test(d.value.companyName)) {\n            return \"block\";\n          }\n          return \"none\";\n        });\n\n        // searchArray = _.filter(filteredSpectrumData, function(d,i) {\n        //   return re.test(d[\"title\"]);\n        // })\n        // ;\n        //\n        // //\n        // var searchDivData = searchResults.selectAll(\"p\")\n        //   .data(searchArray, function(d){\n        //     return d[\"imdb_id\"];\n        //   })\n        //   ;\n        //\n        // var searchEnter = searchDivData\n        //   .enter()\n        //   .append(\"p\")\n        //   .attr(\"class\",\"tk-futura-pt search-result\")\n        //   .html(function(d){\n        //     var final_str = d.title.replace(re, function(str) {return '<b><u>'+str+'</u></b>'});\n        //     var percent = \"<span class='search-result-percent'><span style='color:\"+maleColor+\";'>\"+percentFormat(1-d.female_percent)+\"</span>/<span style='color:\"+femaleColor+\";'>\"+percentFormat(d.female_percent)+\"</span></span>\";\n        //     return final_str + \" \" + percent;\n        //   })\n        //   .on(\"click\",function(d){\n        //     genreSelected = \"all\";\n        //     updateSpectrumSearch(d);\n        //     d3.selectAll(\".filter-item-spectrum\").style(\"background-color\",null).style(\"box-shadow\",null).style(\"border-color\",null).style(\"font-weight\",null);\n        //     d3.select(\".filter-item-spectrum\").style(\"background-color\",\"#F5F5F5\").style(\"box-shadow\",\"inset 0 3px 5px rgba(0,0,0,.125)\").style(\"border-color\",\"#adadad\").style(\"font-weight\",\"500\");\n        //     if(mobile){\n        //       searchResults.style(\"display\",\"none\");\n        //     }\n        //   })\n        //   ;\n        //\n        // searchDivData.exit().remove();\n      } else {\n        searchResults.style(\"display\", null);\n      }\n    };\n  }\n\n  var xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n  var yScale = d3.scaleLinear().domain([0, .1]).range([height, 0]);\n\n  var chartDivContainer = container.append(\"div\").attr(\"class\", \"swarm-chart-container\").style(\"width\", width + margin.left + margin.right + \"px\");\n\n  var chartDivContainerTable = chartDivContainer.append(\"div\").attr(\"class\", \"swarm-chart-container-table\");\n\n  var chartTitle = chartDivContainer.append(\"p\").attr(\"class\", \"chart-title\").html(\"Newsrooms, Broken-down <span>by Gender</span>\").style(\"left\", margin.left + \"px\");\n\n  // var miniMultiple = chartDivContainer.append(\"div\")\n  //   .attr(\"class\",\"slope-mini-multiple-div\")\n  //   ;\n\n  var chartToolTip = chartDivContainer.append(\"div\").attr(\"class\", \"swarm-chart-tool-tip\").style(\"transform\", \"translate(\" + margin.left + \"px\" + \",\" + margin.top + \"px\" + \")\").on(\"click\", function () {\n    chartToolTip.style(\"visibility\", null);\n  });\n\n  var chartDiv = chartDivContainer.append(\"svg\").attr(\"class\", \"swarm-chart-wrapper\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom);\n\n  var defs = chartDiv.append(\"svg:defs\");\n\n  defs.append(\"marker\") // This section adds in the arrows\n  .attr(\"id\", \"arrow-head\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 0).attr(\"refY\", 0).attr(\"markerWidth\", 5).attr(\"markerHeight\", 3).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#d8d8d8\");\n\n  var linearGradientRight = defs.append(\"linearGradient\").attr(\"id\", \"gradient-blue\").attr(\"x1\", 0).attr(\"x2\", 1).attr(\"y1\", 0).attr(\"y2\", 0);\n\n  var linearGradientAverage = defs.append(\"linearGradient\").attr(\"id\", \"gradient-average\").attr(\"x1\", 0).attr(\"x2\", 1).attr(\"y1\", 0).attr(\"y2\", 0);\n\n  linearGradientAverage.append(\"stop\").attr(\"stop-color\", \"black\").attr(\"stop-opacity\", .15);\n\n  linearGradientAverage.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"black\").attr(\"stop-opacity\", 1);\n\n  linearGradientRight.append(\"stop\").attr(\"stop-color\", \"blue\").attr(\"stop-opacity\", .15);\n\n  linearGradientRight.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"blue\").attr(\"stop-opacity\", 1);\n\n  var linearGradientLeft = defs.append(\"linearGradient\").attr(\"id\", \"gradient-red\").attr(\"x1\", 1).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 0);\n\n  linearGradientLeft.append(\"stop\").attr(\"stop-color\", \"red\").attr(\"stop-opacity\", .15);\n\n  linearGradientLeft.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"red\").attr(\"stop-opacity\", 1);\n\n  var linearGradientStartRight = defs.append(\"linearGradient\").attr(\"id\", \"gradient-right\").attr(\"x1\", 0).attr(\"x2\", 1).attr(\"y1\", 0).attr(\"y2\", 0);\n\n  linearGradientStartRight.append(\"stop\").attr(\"stop-color\", \"#a7a7a7\").attr(\"stop-opacity\", .15);\n\n  linearGradientStartRight.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"#a7a7a7\").attr(\"stop-opacity\", 1);\n\n  var linearGradientStartLeft = defs.append(\"linearGradient\").attr(\"id\", \"gradient-left\").attr(\"x1\", 1).attr(\"x2\", 0).attr(\"y1\", 0).attr(\"y2\", 0);\n\n  linearGradientStartLeft.append(\"stop\").attr(\"stop-color\", \"#868686\").attr(\"stop-opacity\", .15);\n\n  linearGradientStartLeft.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", \"#868686\").attr(\"stop-opacity\", 1);\n\n  defs.append(\"marker\") // This section adds in the arrows\n  .attr(\"id\", \"arrow-head-black\").attr(\"viewBox\", \"0 -5 10 10\").attr(\"refX\", 0).attr(\"refY\", 0).attr(\"markerWidth\", 7).attr(\"markerHeight\", 10).attr(\"orient\", \"auto\").append(\"path\").attr(\"d\", \"M0,-5L10,0L0,5\").attr(\"fill\", \"#000000\");\n\n  var filteredMapData = mapData.filter(function (d) {\n    if (cut == \"supWhite\" || cut == \"supGender\") {\n      return d.total_num > countMin && d.total_sup_num > 0;\n    }\n    return d; //d.total_num > countMin;\n  });\n\n  var maxPercentArray = [];\n  var diffArray = [];\n  var raceDiffArray = [];\n  var averageArray = [];\n\n  var newsNest = d3.nest().key(function (d) {\n    return +d.NewsID;\n  }).rollup(function (leaves) {\n    var map = d3.map(leaves, function (d) {\n      return d.Year;\n    });\n    var maxTotalNum = d3.max(leaves, function (d) {\n      return d.total_num;\n    });\n    var maxPercent = d3.max(leaves, function (d) {\n      return getPercent(d);\n    });\n    maxPercentArray.push(maxPercent);\n    return { yearMap: map, values: leaves, maxTotal: maxTotalNum };\n  }).entries(filteredMapData);\n\n  var cutOutData = [];\n  var searchDataSet = [];\n\n  newsNest = newsNest.filter(function (d) {\n    if (d.value.yearMap.has(yearSelected)) {\n      return d;\n    }\n    return null;\n  });\n\n  var totalExtent = d3.extent(newsNest, function (d) {\n    return +d.value.yearMap.get(yearSelected).total_num;\n  });\n\n  totalExtent[1] = 600;\n\n  var radiusScale = d3.scaleLinear().domain([countMin, totalExtent[1]]).range([4, 24]).clamp(true);\n\n  for (var item in newsNest) {\n\n    var currentSup = getPercentType(\"supGender\", newsNest[item].value);\n    var currentYear = getPercentType(\"gender\", newsNest[item].value);\n    var previousYear = getPercentType(\"gender-old\", newsNest[item].value);\n\n    var diff = 0;\n    if (previousYear == \"n/a\") {\n      diff = null;\n    } else {\n      diff = currentYear - previousYear;\n    }\n\n    var whiteCensus = 9999;\n    var blackCensus = 9999;\n    var hispanicCensus = 9999;\n    var asianCensus = 9999;\n    var femaleCensus = 50;\n\n    var companyData = newsIDName.get(newsNest[item].key);\n    var cityState = companyData.City + \" \" + companyData.State;\n    newsNest[item].value.companyData = companyData;\n\n    if (companyData.hasOverride) {\n      whiteCensus = +companyData.override.white / 100;\n      blackCensus = +companyData.override.black / 100;\n      hispanicCensus = +companyData.override.hispanic / 100;\n      femaleCensus = companyData.override.female;\n      asianCensus = companyData.override.asian / 100;\n      if (femaleCensus != \"n/a\") {\n        femaleCensus = +femaleCensus / 100;\n      }\n    } else if (censusMap.has(cityState)) {\n\n      whiteCensus = +censusMap.get(cityState).white_2015 / 100;\n      blackCensus = +censusMap.get(cityState).black_2015 / 100;\n      hispanicCensus = +censusMap.get(cityState).hispanic_2015 / 100;\n      femaleCensus = censusMap.get(cityState).female_2015 / 100;\n      asianCensus = censusMap.get(cityState).asian_2015 / 100;\n    }\n    newsNest[item].value.whiteCensus = whiteCensus;\n    newsNest[item].value.blackCensus = blackCensus;\n    newsNest[item].value.hispanicCensus = hispanicCensus;\n    newsNest[item].value.femaleCensus = femaleCensus;\n    newsNest[item].value.asianCensus = asianCensus;\n\n    var raceDiff = 0;\n\n    if (getPercentType(\"race-old\", newsNest[item].value) == \"n/a\") {\n      raceDiff = null;\n    } else {\n      raceDiff = getPercentType(\"race\", newsNest[item].value) - getPercentType(\"race-old\", newsNest[item].value);\n    }\n\n    diffArray.push(diff);\n    raceDiffArray.push(raceDiff);\n\n    newsNest[item].value.companyName = companyData.Company;\n\n    var first = companyData.Company.charAt(0);\n    var second = \"\";\n    if (companyData.Company.split(\" \").length > 1) {\n      second = companyData.Company.split(\" \")[1].charAt(0);\n    }\n    newsNest[item].value.chars = [first, second];\n\n    newsNest[item].value.whiteDelta = getPercentType(\"race\", newsNest[item].value);\n    newsNest[item].value.diff = diff;\n    newsNest[item].value.raceDiff = raceDiff;\n    var totalCount = +newsNest[item].value.yearMap.get(yearSelected).total_num;\n    newsNest[item].value.radius = radiusScale(totalCount);\n    newsNest[item].value.currentYear = currentYear;\n    newsNest[item].value.previousYear = previousYear;\n    newsNest[item].value.currentSup = currentSup;\n\n    if (latLongMap.has(newsNest[item].key)) {\n      var locationData = latLongMap.get(newsNest[item].key);\n      newsNest[item].value.location = { latitude: +locationData.lat, longitude: +locationData.lng };\n      newsNest[item].value.hasLocation = true;\n    } else {\n      newsNest[item].value.hasLocation = false;\n    }\n\n    // newsNest[item].top3Data = top3Map.get(newsNest[item].companyName);\n  }\n  ;\n\n  newsNest = newsNest.filter(function (d) {\n    searchDataSet.push(d);\n    var count = d.value.yearMap.get(yearSelected).total_num;\n    if (count > countMin) {\n      return d;\n    } else {\n      cutOutData.push(d);\n    }\n    return null;\n  });\n\n  newsNest = newsNest.sort(function (a, b) {\n    return b.value.radius - a.value.radius;\n  });\n\n  var countMini = -1;\n\n  for (var item in newsNest) {\n    newsNest[item].value.miniChart = -1;\n    if (newsNest[item].value.yearMap.has(yearOld) && countMini < 21) {\n      countMini = countMini + 1;\n      newsNest[item].value.miniChart = countMini;\n    }\n  };\n\n  var newsNestAverageT0 = d3.mean(newsNest, function (d) {\n    if (d.value.previousYear == \"n/a\") {\n      return null;\n    }\n    return d.value.previousYear;\n  });\n  var newsNestAverageT1 = d3.mean(newsNest, function (d) {\n    return d.value.currentYear;\n  });\n  var newsNestSupAverageT1 = d3.mean(newsNest, function (d) {\n    return getPercentType(\"supGender\", d.value);\n  });\n\n  var newsMap = d3.map(newsNest, function (d) {\n    return d.key;\n  });\n\n  var diffExtent = d3.extent(diffArray, function (d) {\n    return d;\n  });\n  var colorScale = d3.scaleLinear().domain(diffExtent).range([\"green\", \"red\"]);\n  var genderColorScale = d3.scaleLinear().domain([.2, .5, .8]).range([\"#2161fa\", \"#dddddd\", \"#ff3333\"]);\n\n  if (cut == \"race\") {\n    genderColorScale.domain([0, .5, 1]);\n  }\n\n  var cell;\n  var cellCircle;\n  var cellImages;\n  var cellText;\n  var cellCircleTwo;\n  var cellLine;\n  var cellDash;\n\n  var chartAxis = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-axis\");\n\n  var chartG = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  var duration = 750;\n\n  function buildChart(chartType) {\n    var rebuildAxis = false;\n\n    if (chartType != \"new\" && chartType != \"swarm\") {\n      stepperBack.style(\"visibility\", \"visible\").style(\"pointer-events\", \"all\");\n      if (previousChart != chartType || chartType == \"table\") {\n        previousChart = chartType;\n        rebuildAxis = true;\n      } else if (previousCut != cut) {\n        previousCut = cut;\n        rebuildAxis = true;\n      } else {\n        rebuildAxis = false;\n      }\n    } else {\n      stepperBack.style(\"visibility\", null).style(\"pointer-events\", null);\n    }\n\n    var highlightedPosition = [0, 0, 0];\n\n    var highlightedStrokeColor = \"#555555\";\n    var highlightedCircleStrokeDarkness = 2;\n\n    function highlightedItem(selectedItem) {\n      if (chartType == \"swarm\" || chartType == \"new\") {\n        selectedItem.style(\"stroke-width\", \"2px\").style(\"stroke\", d3.color(selectedItem.style(\"stroke\")).darker(highlightedCircleStrokeDarkness));\n      }\n    }\n\n    function mouseOverEvents(data, element) {\n      chartToolTip.selectAll(\"div\").remove();\n\n      var chartToolTipContainer = chartToolTip.append(\"div\");\n\n      var chartToolTipCompany = chartToolTipContainer.append(\"p\").attr(\"class\", \"swarm-chart-tool-tip-company\").style(\"text-transform\", function (d) {\n        if (data.value.companyName == \"usa today\") {\n          return \"none\";\n        }\n        return null;\n      }).html(function (d) {\n        var oldData = newDataIDs.indexOf(+data.key);\n        var textValue = \"\";\n        if (data.value.companyName == \"usa today\") {\n          textValue = \"USA Today\";\n        } else if (data.value.companyName.length > 30) {\n          textValue = data.value.companyName.replace(/\\b\\w/g, function (l) {\n            return l.toUpperCase();\n          }).slice(0, 30) + \"...\";\n        } else {\n          textValue = data.value.companyName.replace(/\\b\\w/g, function (l) {\n            return l.toUpperCase();\n          });\n        }\n        if (oldData == -1) {\n          textValue = textValue + \"<span>2017 data</span>\";\n        }\n        return textValue;\n      });\n\n      var colData = [\"white\", \"black\", \"hisp.\", \"asian\", \"female\"];\n      var dataForToolTip = [{ cut: \"leaders\", cols: colData }, { cut: \"staff\", cols: colData }, { cut: \"census\", cols: colData }];\n\n      var rows = chartToolTipContainer.selectAll(\"div\").data(dataForToolTip).enter().append(\"div\").attr(\"class\", \"swarm-chart-tool-tip-row\");\n\n      var rowLabels = rows.append(\"p\").attr(\"class\", \"swarm-chart-tool-tip-row-label\").html(function (d) {\n        if (d.cut == \"census\") {\n          var cityString = \"\";\n          if (data.value.companyData.hasOverride) {\n\n            cityString = data.value.companyData.override.coverage_area;\n            if (cityString > 30) {\n              cityString = cityString.slice(0, 27) + \"...\";\n            }\n          } else {\n            cityString = data.value.companyData.City + \", \" + data.value.companyData.State;\n          }\n          return \"census<span>\" + cityString + \"</span>\";\n        }\n        if (d.cut == \"staff\" && chartType != \"swarm-scatter\") {\n          return \"all\";\n        }\n        return d.cut;\n      });\n\n      var cols = rows.selectAll(\"div\").data(function (d) {\n        return d.cols;\n      }).enter().append(\"div\").attr(\"class\", \"swarm-chart-tool-tip-col\");\n\n      cols.append(\"p\").attr(\"class\", \"swarm-chart-tool-tip-col-label\").text(function (d) {\n        if (d3.select(this.parentNode.parentNode).datum().cut == \"leaders\") {\n          return d;\n        }\n        return null;\n      });\n\n      cols.append(\"p\").text(function (d) {\n        var cutData = d3.select(this.parentNode.parentNode).datum().cut;\n        if (cutData == \"census\") {\n          if (d == \"female\") {\n            var femaleData = data.value.femaleCensus;\n            if (femaleData == \"n/a\") {\n              return femaleData;\n            }\n            return Math.round(data.value.femaleCensus * 100) + \"%\";\n          }\n          if (d == \"white\") {\n            return Math.round(data.value.whiteCensus * 100) + \"%\";\n          }\n          if (d == \"hisp.\") {\n            return Math.round(data.value.hispanicCensus * 100) + \"%\";\n          }\n          if (d == \"black\") {\n            return Math.round(data.value.blackCensus * 100) + \"%\";\n          }\n          if (d == \"asian\") {\n            return Math.round(data.value.asianCensus * 100) + \"%\";\n          }\n        }\n        if (cutData == \"staff\") {\n          if (chartType == \"swarm-scatter\") {\n            if (d == \"white\") {\n              return Math.round(getPercentType(\"whiteStaff\", data.value) * 100) + \"%\";\n            }\n            if (d == \"black\") {\n              return Math.round(getPercentType(\"blackStaff\", data.value) * 100) + \"%\";\n            }\n            if (d == \"hisp.\") {\n              return Math.round(getPercentType(\"hispStaff\", data.value) * 100) + \"%\";\n            }\n            if (d == \"asian\") {\n              return Math.round(getPercentType(\"asianStaff\", data.value) * 100) + \"%\";\n            }\n            if (d == \"female\") {\n              return Math.round(getPercentType(\"genderStaff\", data.value) * 100) + \"%\";\n            }\n          }\n          if (d == \"white\") {\n            return Math.round(getPercentType(\"white\", data.value) * 100) + \"%\";\n          }\n          if (d == \"black\") {\n            return Math.round(getPercentType(\"black\", data.value) * 100) + \"%\";\n          }\n          if (d == \"hisp.\") {\n            return Math.round(getPercentType(\"hisp\", data.value) * 100) + \"%\";\n          }\n          if (d == \"asian\") {\n            return Math.round(getPercentType(\"asian\", data.value) * 100) + \"%\";\n          }\n          if (d == \"female\") {\n            return Math.round(getPercentType(\"gender\", data.value) * 100) + \"%\";\n          }\n        }\n        if (cutData = \"leaders\") {\n          if (d == \"white\") {\n            return Math.round(getPercentType(\"supWhiteRaw\", data.value) * 100) + \"%\";\n          }\n          if (d == \"black\") {\n            return Math.round(getPercentType(\"supBlack\", data.value) * 100) + \"%\";\n          }\n          if (d == \"hisp.\") {\n            return Math.round(getPercentType(\"supHisp\", data.value) * 100) + \"%\";\n          }\n          if (d == \"asian\") {\n            return Math.round(getPercentType(\"supAsian\", data.value) * 100) + \"%\";\n          }\n          if (d == \"female\") {\n            return Math.round(getPercentType(\"supGender\", data.value) * 100) + \"%\";\n          }\n        }\n        return \"tbd\";\n      }).attr(\"class\", \"swarm-chart-tool-tip-text\");\n\n      if (chartType == \"swarm\" || chartType == \"new\") {\n\n        element.style(\"stroke\", function () {\n          return \"black\";\n        });\n\n        chartToolTip.style(\"visibility\", \"visible\").style(\"top\", function (d) {\n          if (viewportWidth < 450 || mobile) {\n            return \"0px\";\n          }\n          return data.y + mouseoverOffsetY + \"px\";\n        }).style(\"left\", function (d) {\n          if (viewportWidth < 450 || mobile) {\n            return \"0px\";\n          }\n          return data.x + data.value.radius + mouseoverOffsetX + \"px\";\n        });\n      } else if (chartType == \"swarm-scatter\") {\n\n        element.style(\"stroke\", function () {\n          return \"black\";\n        });\n        chartToolTip.style(\"visibility\", \"visible\").style(\"top\", function () {\n          if (viewportWidth < 450 || mobile) {\n            return \"0px\";\n          }\n          if (cut == \"race\") {\n            return yScale(getPercentType(\"supWhite\", data.value)) + mouseoverOffsetY + \"px\";\n          }\n          return yScale(getPercentType(\"supGender\", data.value)) + mouseoverOffsetY + \"px\";\n        }).style(\"left\", function () {\n          if (viewportWidth < 450 || mobile) {\n            return \"0px\";\n          }\n          if (cut == \"race\") {\n            return xScale(getPercentType(\"raceStaff\", data.value)) + data.value.radius + mouseoverOffsetX + \"px\";\n          }\n          return xScale(getPercentType(\"genderStaff\", data.value)) + data.value.radius + mouseoverOffsetX + \"px\";\n        });\n      }\n    }\n    function mouseOutEvents(data, element) {\n\n      chartToolTip.style(\"visibility\", null);\n\n      if (chartType == \"swarm\" || chartType == \"new\") {\n\n        element.style(\"stroke\", function (d) {\n          var value = getPercentType(cut, d.value);\n          if (+d.key == newsIDSearch) {\n            return newsIDSearchColor;\n          }\n          if (d.key == newsIdSelected) {\n            return d3.color(genderColorScale(value)).darker(highlightedCircleStrokeDarkness);\n          }\n          return d3.color(genderColorScale(value)).darker(1);\n        });\n      } else if (chartType == \"swarm-scatter\") {\n        element.style(\"stroke\", function (d) {\n          var value = getPercentType(cut, d.value);\n          if (+d.key == newsIDSearch) {\n            return newsIDSearchColor;\n          }\n          if (d.key == newsIdSelected) {\n            return d3.color(genderColorScale(value)).darker(highlightedCircleStrokeDarkness);\n          }\n          return null;\n        });\n      } else if (chartType == \"arrow-scatter\") {\n        // element\n        //   .style(\"stroke\",null)\n        //   ;\n      }\n    }\n\n    function changeTitle() {\n      var title = \"Newsroom <span>Gender</span> Breakdown\";\n      if (cut == \"race\") {\n        if (viewportWidth > 450) {\n          title = \"Newsroom <span>White/Non-White</span> Breakdown vs. Audience\";\n        } else {\n          title = \"Newsroom <span>Racial</span> Breakdown vs. Audience\";\n        }\n      }\n      if (chartType == \"swarm-scatter\") {\n        title = \"Newsroom <span>Leadership</span> vs. Staff\";\n        // if(cut == \"race\"){\n        //   title = \"Racial Break-down of Staff vs. <span>Leaders</span>\";\n        // }\n      }\n      // else if(chartType == \"mini-multiple\"){\n      //   title = \"<span>Change</span> in Gender Breakdown from 2002 - 2017\"\n      // }\n      else if (chartType == \"arrow-scatter\") {\n          title = \"How Newsrooms <span>Changed, \" + yearOld + \" - \" + yearSelected + \"</span>\";\n          // title = \"How Newsrooms <span>Changed, \"+yearOld+\" - \"+yearSelected+\"</span><span class='chart-title-note'><span class='red'>*</span>Newsroom Uses 2017 Data</span>\"\n        } else if (chartType == \"arrow-scatter-full\") {\n          title = \"How Newsrooms <span>Changed, \" + yearOld + \" - \" + yearSelected + \"</span>\";\n          // title = \"How Newsrooms <span>Changed, \"+yearOld+\" - \"+yearSelected+\"</span><span class='chart-title-note'><span class='red'>*</span>Newsroom Uses 2017 Data</span>\"\n        } else if (chartType == \"table\") {\n          title = \"Individual Newsroom Demographics\";\n          // title = \"Individual Newsroom Demographics<span class='chart-title-note'><span class='red'>*</span>Newsroom Uses 2017 Data</span>\"\n        }\n      chartTitle.html(title);\n    }\n    function setWidths(chartType) {\n      if (cut == \"gender\") {\n        if (chartType == \"swarm-scatter\") {\n          extentOverride = d3.extent(newsNest, function (d) {\n            return getPercentType(\"genderStaff\", d.value);\n          });\n        } else {\n          extentOverride = d3.extent(newsNest, function (d) {\n            return getPercentType(\"gender\", d.value);\n          });\n        }\n      } else {\n        extentOverride = d3.extent(newsNest, function (d) {\n          return getPercentType(\"race\", d.value);\n        });\n      }\n\n      if (chartType == \"swarm\" || chartType == \"new\") {\n        margin = { top: 40, right: 20, bottom: 50, left: 20 };\n        width = 1000 - margin.left - margin.right;\n        height = 325 - margin.top - margin.bottom;\n        if (viewportWidth < 1000) {\n          width = viewportWidth - margin.left - margin.right;\n        }\n        if (viewportWidth < 400 || mobile) {\n          height = 400 - margin.top - margin.bottom;\n        }\n        if (cut == \"race\") {\n          xScale.domain([-1, 1]).range([0, width]).clamp(true);\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return d.value.whiteDelta;\n          });\n          genderColorScale.domain([-1, 0, 1]);\n        } else if (cut == \"gender\") {\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return getPercentType(\"gender\", d.value);\n          });\n          xScale.domain([.2, .8]).range([0, width]).clamp(true);\n          if (extentOverride[0] < .2) {\n            xScale.domain([extentOverride[0], .8]);\n          }\n          if (extentOverride[1] > .8) {\n            xScale.domain([.2, extentOverride[1]]);\n          }\n          if (extentOverride[0] < .2 && extentOverride[1] > .8) {\n            xScale.domain([extentOverride[0], extentOverride[1]]);\n          }\n          genderColorScale.domain([.2, .5, .8]);\n        }\n      } else if (chartType == \"swarm-scatter\") {\n        newToggleForRaceAndGender.classed(\"swarm-scatter-selected\", true);\n        margin = { top: 0, right: 20, bottom: 60, left: 20 };\n        width = 680 - margin.left - margin.right;\n        if (viewportWidth < 680) {\n          margin = { top: 30, right: 20, bottom: 60, left: 20 };\n          width = viewportWidth - margin.left - margin.right;\n        }\n        height = 575 - margin.top - margin.bottom;\n        if (viewportWidth < 680) {\n          height = 475 - margin.top - margin.bottom;\n        }\n        xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n        yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n        if (cut == \"race\") {\n          xScale.domain([0, .85]).range([0, width]).clamp(true);\n          yScale.domain([0, .85]).range([height, 0]).clamp(true);\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return getPercentType(\"raceStaff\", d.value);\n          });\n          newsNestSupAverageT1 = d3.mean(newsNest, function (d) {\n            return getPercentType(\"supWhite\", d.value);\n          });\n        } else {\n          xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n          yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n          if (extentOverride[0] < .2) {\n            xScale.domain([extentOverride[0], .8]);\n          }\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return getPercentType(\"genderStaff\", d.value);\n          });\n          newsNestSupAverageT1 = d3.mean(newsNest, function (d) {\n            return getPercentType(\"supGender\", d.value);\n          });\n        }\n      } else if (chartType == \"arrow-scatter\") {\n        newToggleForRaceAndGender.classed(\"arrow-scatter-selected\", true);\n        margin = { top: 70, right: 100, bottom: 40, left: 200 };\n        width = 950 - margin.left - margin.right;\n        if (viewportWidth < 950) {\n          margin = { top: 70, right: 20, bottom: 40, left: 200 };\n          width = viewportWidth - margin.left - margin.right;\n        }\n        if (viewportWidth < 450) {\n          margin = { top: 65, right: 20, bottom: 40, left: 150 };\n          width = viewportWidth - margin.left - margin.right;\n        }\n        height = 450 - margin.top - margin.bottom;\n        xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n        yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n        if (viewportWidth < 600) {\n          xScale = d3.scaleLinear().domain([.25, .75]).range([0, width]).clamp(true);\n          yScale = d3.scaleLinear().domain([.25, .75]).range([height, 0]).clamp(true);\n        }\n        if (cut == \"gender\") {\n          if (extentOverride[0] < .2) {\n            xScale.domain([extentOverride[0], .8]);\n          } else if (extentOverride[1] > .8) {\n            xScale.domain([.2, extentOverride[1]]);\n          } else if (extentOverride[1] > .8 && extentOverride[0] < .2) {\n            xScale.domain([extentOverride[0], extentOverride[1]]);\n          }\n        }\n        if (cut == \"race\") {\n          xScale.domain([-1, 1]).range([0, width]).clamp(true);\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return d.value.whiteDelta;\n          });\n          genderColorScale.domain([-1, 0, 1]);\n          if (viewportWidth < 820) {\n            xScale.domain([-1, 0]).range([0, width]).clamp(true);\n          }\n        }\n      } else if (chartType == \"arrow-scatter-full\") {\n\n        margin = { top: 70, right: 150, bottom: 40, left: 150 };\n        width = 950 - margin.left - margin.right;\n        if (viewportWidth < 950) {\n          newToggleForRaceAndGender.classed(\"arrow-scatter-full-selected\", true);\n          margin = { top: 70, right: 50, bottom: 40, left: 50 };\n          width = viewportWidth - margin.left - margin.right;\n        }\n        if (viewportWidth < 400) {\n          newToggleForRaceAndGender.classed(\"arrow-scatter-full-selected\", false);\n          margin = { top: 50, right: 50, bottom: 40, left: 10 };\n          width = viewportWidth - margin.left - margin.right;\n        }\n        if (viewportWidth < 700) {\n          if (cut == \"race\") {\n            margin = { top: 50, right: 10, bottom: 40, left: 10 };\n            width = viewportWidth - margin.left - margin.right;\n          }\n        }\n        height = 450 - margin.top - margin.bottom;\n        xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n        yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n\n        if (cut == \"gender\") {\n          if (extentOverride[0] < .2) {\n            xScale.domain([extentOverride[0], .8]);\n          } else if (extentOverride[1] > .8) {\n            xScale.domain([.2, extentOverride[1]]);\n          } else if (extentOverride[1] > .8 && extentOverride[0] < .2) {\n            xScale.domain([extentOverride[0], extentOverride[1]]);\n          }\n        }\n\n        newsNestAverageT0 = d3.mean(newsNest, function (d) {\n          if (d.value.previousYear == \"n/a\") {\n            return null;\n          }\n          return d.value.previousYear;\n        });\n        newsNestAverageT1 = d3.mean(newsNest, function (d) {\n          return d.value.currentYear;\n        });\n        if (cut == \"race\") {\n          xScale.domain([-1, 1]).range([0, width]).clamp(true);\n          if (viewportWidth < 700) {\n            xScale.domain([-1, .35]).range([0, width]).clamp(true);\n          }\n          if (viewportWidth < 450) {\n            xScale.domain([-.75, .35]).range([0, width]).clamp(true);\n          }\n          newsNestAverageT0 = d3.mean(newsNest, function (d) {\n            var result = getPercentType(\"race-old\", d.value);\n            if (result == \"n/a\") {\n              return null;\n            }\n            return result;\n          });\n          newsNestAverageT1 = d3.mean(newsNest, function (d) {\n            return d.value.whiteDelta;\n          });\n          genderColorScale.domain([-1, 0, 1]);\n        }\n      } else if (chartType == \"table\") {\n        if (viewportWidth < 700) {\n          newToggleForRaceAndGender.classed(\"table-selected\", true);\n          margin = { top: 70, right: 50, bottom: 40, left: 50 };\n          width = viewportWidth - margin.left - margin.right;\n        }\n        chartDivContainerTable.transition().duration(0).style(\"opacity\", 1);\n        margin = { top: 40, right: 20, bottom: 20, left: 20 };\n        width = 1000 - margin.left - margin.right;\n        height = 250 - margin.top - margin.bottom;\n        if (urlParamEmbed != \"\") {\n          height = 210 - margin.top - margin.bottom;\n        }\n        if (viewportWidth < 1000) {\n          margin = { top: 40, right: 20, bottom: 20, left: 20 };\n          width = viewportWidth - margin.left - margin.right;\n        }\n        if (viewportWidth < 700) {\n          margin = { top: 160, right: 20, bottom: 20, left: 20 };\n          width = viewportWidth - margin.left - margin.right;\n          height = 280 - margin.top - margin.bottom;\n          console.log(urlParamEmbed);\n          if (urlParamEmbed != \"\") {\n            console.log(\"here\");\n            height = 210 - margin.top - margin.bottom;\n          }\n        }\n        if (viewportWidth < 450) {\n          margin = { top: 160, right: 20, bottom: 20, left: 20 };\n          width = viewportWidth - margin.left - margin.right;\n          height = 210 - margin.top - margin.bottom;\n        }\n\n        xScale = d3.scaleLinear().domain([.2, .8]).range([0, width]).clamp(true);\n        yScale = d3.scaleLinear().domain([.2, .8]).range([height, 0]).clamp(true);\n        radiusScale.range([4, 27]);\n        toggleType.style(\"visibility\", \"hidden\");\n        searchMap.style(\"display\", \"block\");\n      }\n      if (chartType != \"table\" && chartType != \"new\") {\n        radiusScale.range([4, 27]);\n        searchMap.style(\"display\", null);\n        toggleType.style(\"visibility\", null);\n        chartDivContainerTable.transition().duration(0).style(\"opacity\", 0);\n        ;\n      }\n      if (chartType != \"arrow-scatter\" && chartType != \"arrow-scatter-full\" && chartType != \"new\") {\n        cellLine.transition().duration(0).style(\"opacity\", 0);\n      }\n      if (chartType != \"arrow-scatter\" && chartType != \"new\") {\n        cellCircleTwo.transition().duration(0).style(\"opacity\", 0);\n        cell.style(\"opacity\", null);\n        cellText.transition().duration(0).style(\"opacity\", 0);\n      }\n      if (chartType != \"arrow-scatter-full\" && chartType != \"new\") {\n        cellText.style(\"transform\", null);\n        cellDash.style(\"opacity\", 0);\n      }\n      if (chartType == \"swarm-scatter\" || chartType == \"arrow-scatter\" || chartType == \"arrow-scatter-full\") {\n        searchResultsContainer.classed(\"search-results-top-shift\", true);\n      } else if (chartType != \"new\") {\n        searchResultsContainer.classed(\"search-results-top-shift\", false);\n      }\n\n      if (viewportWidth > 450) {\n        chartTitle.transition().duration(500).style(\"width\", width + \"px\").style(\"left\", 0 + \"px\").style(\"text-align\", null);\n      } else {\n        if (chartType == \"table\") {\n          chartTitle.transition().duration(500).style(\"width\", \"90%\").style(\"left\", 0 + \"px\").style(\"text-align\", \"center\");\n        } else {\n          chartTitle.transition().duration(500).style(\"width\", \"90%\").style(\"left\", 0 + \"px\").style(\"text-align\", null);\n        }\n      }\n\n      if (chartType != \"swarm-scatter\" && chartType != \"new\") {\n        newToggleForRaceAndGender.classed(\"swarm-scatter-selected\", false);\n      }\n      if (chartType != \"arrow-scatter\" && chartType != \"new\") {\n        newToggleForRaceAndGender.classed(\"arrow-scatter-selected\", false);\n      }\n      if (chartType != \"arrow-scatter-full\" && chartType != \"new\") {\n        newToggleForRaceAndGender.classed(\"arrow-scatter-full-selected\", false);\n      }\n      if (chartType != \"table\" && chartType != \"new\") {\n        newToggleForRaceAndGender.classed(\"table-selected\", false);\n      }\n\n      if (chartType == \"new\") {} else if (chartType == \"arrow-scatter-full\" || chartType == \"arrow-scatter\") {\n        searchResultText.style(\"pointer-events\", function (d) {\n          var result = getPercentType(\"gender-old\", d.value);\n          if (result == \"n/a\") {\n            return \"none\";\n          }\n          return null;\n        }).text(function (d) {\n          var result = getPercentType(\"gender-old\", d.value);\n          if (result == \"n/a\") {\n            return \"(Unavail: No 2001 Data) \" + d.value.companyName.replace(/\\b\\w/g, function (l) {\n              return l.toUpperCase();\n            });\n          }\n          return d.value.companyName.replace(/\\b\\w/g, function (l) {\n            return l.toUpperCase();\n          });\n        });\n      } else {\n        searchResultText.style(\"pointer-events\", null).text(function (d) {\n          return d.value.companyName.replace(/\\b\\w/g, function (l) {\n            return l.toUpperCase();\n          });\n        });\n      }\n\n      chartDivContainer.transition().duration(duration)\n      // .delay(duration)\n      .style(\"width\", width + margin.left + margin.right + \"px\");\n\n      chartToolTip.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      chartDiv.transition().duration(duration).attr(\"height\", height + margin.top + margin.bottom)\n      // .transition()\n      // .duration(duration)\n      .attr(\"width\", width + margin.left + margin.right);\n\n      chartG.transition().duration(500).attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      chartAxis.transition().duration(500).attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    }\n\n    changeTitle();\n\n    setWidths(chartType);\n\n    if (chartType == \"swarm-scatter\") {\n      // }\n\n      var buildAxis = function buildAxis() {\n\n        var chartAxisContainer = chartAxis.append(\"g\");\n\n        var chartAxisLines = chartAxisContainer.append(\"g\");\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-scatter-rect-gender-g\").append(\"line\").attr(\"class\", \"swarm-scatter-rect-gender-line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", function (d) {\n          return height / 2;\n        }).attr(\"y2\", function (d) {\n          return height / 2;\n        }).style(\"visibility\", function () {\n          if (cut == \"race\") {\n            return \"hidden\";\n          }\n          return null;\n        });\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-scatter-x-axis-lines\").selectAll(\"line\").data(function () {\n          if (cut == \"race\") {\n            return [.1, .3, .5, .7];\n          }\n          return [.25, .35, .45, .55, .65, .75];\n        }).enter().append(\"line\").attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", 0).attr(\"y2\", height).attr(\"class\", \"swarm-axis-line\");\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-scatter-y-axis-lines\").selectAll(\"line\").data(function () {\n          if (cut == \"race\") {\n            return [.1, .3, .5, .7];\n          }\n          return [.3, .5, .4, .6, .7];\n        }).enter().append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", function (d) {\n          return yScale(d);\n        }).attr(\"y2\", function (d) {\n          return yScale(d);\n        }).attr(\"class\", \"swarm-axis-line\");\n\n        var chartAxisText = chartAxisContainer.append(\"g\");\n\n        chartAxisText.append(\"g\").selectAll(\"text\").data(function () {\n          if (viewportWidth < 450) {\n            if (cut == \"race\") {\n              return [\"← More White\", \"Staff Race\", \"More Non-white →\"];\n            }\n            return [\"← More Male Staff\", \"Staff Gender\", \"More Female Staff →\"];\n          }\n          if (cut == \"race\") {\n            return [\"← More White\", \"Staff Race\", \"More People of Color →\"];\n          }\n          return [\"← More Male Staff\", \"Staff Gender\", \"More Female Staff →\"];\n        }).enter().append(\"text\").attr(\"x\", function (d, i) {\n          if (i == 0) {\n            return 0;\n          }\n          if (i == 1) {\n            return width / 2;\n          }\n          return width;\n        }).attr(\"y\", function (d, i) {\n          return height;\n        }).attr(\"class\", function (d, i) {\n          if (i != 1) {\n            return \"swarm-axis-tick-text scatter-axis-chart-text scatter-axis-chart-side\";\n          }\n          return \"swarm-axis-tick-text scatter-axis-chart-text\";\n        }).text(function (d) {\n          return d;\n        }).style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (i != 1) {\n            return \"end\";\n          }\n          return \"middle\";\n        });\n\n        chartAxisText.append(\"g\").selectAll(\"text\").data(function () {\n          if (cut == \"race\") {\n            return [{ text: \"75% Leaders are Not White\", value: .75 }, { text: \"Leaders: 50-50 White/Non-White\", value: .5 }, { text: \"25% Non-White\", value: .25 }, { text: \"0% Non-White Leaders\", value: .0 }];\n          }\n          return [{ text: \"75% Leaders are Women\", value: .75 }, { text: \"65% Female\", value: .65 }, { text: \"Leaders: 50-50 Male/Female\", value: .5 }, { text: \"35% Female\", value: .35 }, { text: \"25% Leaders are Female\", value: .25 }];\n        }).enter().append(\"text\").attr(\"transform\", \"translate(\" + (width - 10) + \",0)\").attr(\"y\", function (d, i) {\n          return yScale(d.value);\n        }).attr(\"class\", function (d, i) {\n          return \"swarm-axis-tick-text scatter-axis-chart-text-y\";\n        }).style(\"text-anchor\", function (d, i) {\n          return \"end\";\n        }).text(function (d) {\n          return d.text;\n        }).attr(\"dy\", 0).call(wrap, 95);\n      };\n\n      var buildAverage = function buildAverage() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        function leastSquares(xSeries, ySeries) {\n          var reduceSumFunc = function reduceSumFunc(prev, cur) {\n            return prev + cur;\n          };\n\n          var xBar = xSeries.reduce(reduceSumFunc) * 1.0 / xSeries.length;\n          var yBar = ySeries.reduce(reduceSumFunc) * 1.0 / ySeries.length;\n\n          var ssXX = xSeries.map(function (d) {\n            return Math.pow(d - xBar, 2);\n          }).reduce(reduceSumFunc);\n\n          var ssYY = ySeries.map(function (d) {\n            return Math.pow(d - yBar, 2);\n          }).reduce(reduceSumFunc);\n\n          var ssXY = xSeries.map(function (d, i) {\n            return (d - xBar) * (ySeries[i] - yBar);\n          }).reduce(reduceSumFunc);\n\n          var slope = ssXY / ssXX;\n          var intercept = yBar - xBar * slope;\n          var rSquare = Math.pow(ssXY, 2) / (ssXX * ssYY);\n\n          return { slope: slope, intercept: intercept, r2: rSquare };\n        }\n        var xValues = cellCircle.data().map(function (d) {\n          if (cut == \"race\") {\n            return getPercentType(\"raceStaff\", d.value);\n          }\n          return getPercentType(\"genderStaff\", d.value);\n        });\n        var yValues = cellCircle.data().map(function (d) {\n          if (cut == \"race\") {\n            return getPercentType(\"supWhite\", d.value);\n          }\n          return getPercentType(\"supGender\", d.value);\n        });\n        var linear = leastSquares(xValues, yValues);\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        var chartAnnotation = chartAverage.append(\"g\").attr(\"class\", \"swarm-annnotation\");\n\n        chartAverage.append(\"line\").attr(\"class\", \"swarm-scatter-regression-line\").attr(\"x1\", 0).attr(\"y1\", yScale(linear.intercept)).attr(\"x2\", function (d) {\n          if (cut == \"race\") {\n            return xScale(.85);\n          }\n          return xScale(.85);\n        }).attr(\"y2\", function () {\n          if (cut == \"race\") {\n            return yScale(.85 * linear.slope + linear.intercept);\n          }\n          return yScale(.85 * linear.slope + linear.intercept);\n        });\n\n        var regressionAnnotation = chartAnnotation.append(\"g\").attr(\"class\", \"swarm-scatter-regression-annotation\").attr(\"transform\", function () {\n          if (cut == \"race\") {\n            return \"translate(\" + xScale(.8 * .8) + \",\" + yScale(.8 * .8 * linear.slope + linear.intercept) + \")\";\n          }\n          return \"translate(\" + xScale(.8 * .8) + \",\" + yScale(.8 * .8 * linear.slope + linear.intercept) + \")\";\n        });\n\n        regressionAnnotation.append(\"text\").attr(\"class\", \"swarm-scatter-regression-annotation-text\").text(function () {\n          if (cut == \"race\") {\n            return \"Newsrooms with racially diverse leadership tend to have a racially diverse staff\";\n          }\n          return \"Newsrooms with female leadership tend to have more women on staff\";\n        }).attr(\"transform\", \"translate(\" + -40 + \",\" + -55 + \")\").attr(\"dy\", 0).call(wrapTwo, 250);\n\n        regressionAnnotation.append(\"line\").attr(\"class\", \"swarm-scatter-regression-annotation-line\").attr(\"x1\", -35).attr(\"y1\", -35).attr(\"x2\", -5).attr(\"y2\", -5).attr(\"marker-end\", \"url(#arrow-head-black)\");\n\n        var highlightedAnnotationOffset = 150;\n        //\n        var highlightedAnnotation = chartAverage.append(\"g\").attr(\"transform\", \"translate(\" + highlightedPosition[0] + \",\" + highlightedPosition[1] + \")\");\n        //\n        highlightedAnnotation.append(\"line\").attr(\"class\", \"swarm-axis-annotation-line\").attr(\"x1\", highlightedPosition[2]).attr(\"x2\", highlightedPosition[2] + highlightedAnnotationOffset).attr(\"y1\", 0).attr(\"y2\", 0).style(\"stroke\", highlightedStrokeColor);\n        //\n        highlightedAnnotation.append(\"text\").text(function (d) {\n          return newsIDName.get(newsIdSelected).Company;\n        }).attr(\"class\", \"swarm-axis-annotation-text\").attr(\"x\", highlightedPosition[2] + highlightedAnnotationOffset).style(\"text-anchor\", \"start\");\n\n        // chartAnnotation.append(\"line\")\n        //   .attr(\"x1\",function(){\n        //     if(cut==\"race\"){\n        //       return xScale(.5);\n        //     }\n        //     return xScale(.65);\n        //   })\n        //   .attr(\"x2\",function(){\n        //     if(cut==\"race\"){\n        //       return xScale(.55)\n        //     }\n        //     return xScale(.7)\n        //   })\n        //   .attr(\"y1\",height-20)\n        //   .attr(\"y2\",height-20)\n        //   .attr(\"class\",\"swarm-annnotation-line\")\n        //   .attr(\"marker-end\", function(d){\n        //     return \"url(#arrow-head)\"\n        //   })\n        //   ;\n\n        // chartAnnotation.append(\"text\")\n        //   .style(\"transform\",function(){\n        //     if(cut == \"race\"){\n        //       var transform = \"translate(\"+(xScale(.5)-10)+\"px,\"+(height-20)+\"px) rotate(0)\";\n        //       return transform;\n        //     }\n        //     var transform = \"translate(\"+(xScale(.65)-10)+\"px,\"+(height-20)+\"px) rotate(0)\";\n        //     return transform;\n        //   })\n        //   .attr(\"class\",\"swarm-annnotation-text swarm-scatter-y-annnotation-text\")\n        //   .text(function(d){\n        //     if(cut==\"race\"){\n        //       return \"People of Color Staff\"\n        //     }\n        //     return \"Women Staff\";\n        //   })\n        //   ;\n        //\n        chartAnnotation.append(\"line\").attr(\"x1\", 20).attr(\"x2\", 20).attr(\"y1\", function () {\n          if (cut == \"race\") {\n            return yScale(.7);\n          }\n          return yScale(.75);\n        }).attr(\"y2\", 15).attr(\"class\", \"swarm-annnotation-line\").attr(\"marker-end\", function (d) {\n          return \"url(#arrow-head)\";\n        });\n\n        chartAnnotation.append(\"text\").style(\"transform\", function () {\n          if (cut == \"race\") {\n            var transform = \"translate(\" + 20 + \"px,\" + (yScale(.7) + 10) + \"px) rotate(270deg)\";\n            return transform;\n          }\n          var transform = \"translate(\" + 20 + \"px,\" + (yScale(.75) + 10) + \"px) rotate(270deg)\";\n          return transform;\n        }).attr(\"class\", \"swarm-annnotation-text swarm-scatter-y-annnotation-text\").text(function (d) {\n          if (cut == \"race\") {\n            return \"People of Color Leadership\";\n          }\n          return \"Women Leaders\";\n        });\n\n        console.log(\"2388\");\n        chartAverage.append(\"circle\").attr(\"class\", \"swarm-circle swarm-circle-average\").attr(\"cx\", xScale(newsNestAverageT1)).attr(\"cy\", function (d) {\n          return yScale(newsNestSupAverageT1);\n        }).attr(\"r\", 6);\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", yScale(newsNestSupAverageT1) - 12).style(\"fill\", \"black\").text(\"Average\");\n      };\n\n      cellCircle = cell.selectAll(\".swarm-circle\").on(\"mouseover\", function (d) {\n        var data = d;\n        mouseOverEvents(data, d3.select(this));\n      }).on(\"mouseout\", function (d) {\n        var data = d;\n        mouseOutEvents(data, d3.select(this));\n      });\n\n      cellCircle.transition().duration(duration).delay(function (d, i) {\n        if (urlParam != \"\") {\n          return 0;\n        }\n        return i * 10;\n      }).style(\"opacity\", 1).attr(\"cx\", function (d) {\n        if (cut == \"race\") {\n          return xScale(getPercentType(\"raceStaff\", d.value));\n        }\n        return xScale(getPercentType(\"genderStaff\", d.value));\n      }).attr(\"r\", function (d) {\n        return d.value.radius;\n      }).attr(\"cy\", function (d) {\n        if (cut == \"race\") {\n          return yScale(getPercentType(\"supWhite\", d.value));\n        }\n        return yScale(getPercentType(\"supGender\", d.value));\n      }).style(\"fill\", function (d) {\n        if (+d.key == newsIDSearch) {\n          return newsIDSearchColor;\n        }\n        return null;\n      }).style(\"stroke\", function (d) {\n        var value = getPercentType(cut, d.value);\n\n        if (+d.key == newsIDSearch) {\n          return newsIDSearchColor;\n        }\n        if (+d.key == newsIdSelected) {\n          return d3.color(genderColorScale(value)).darker(highlightedCircleStrokeDarkness);\n        }\n        return null;\n      }).style(\"stroke-width\", function (d) {\n        if (d.key == newsIdSelected) {\n          return \"2px\";\n        }\n        return null;\n      }).each(function (d) {\n        if (d.key == newsIdSelected) {\n          var item = d3.select(this);\n\n          var y = 0;\n          var x = 0;\n          if (cut == \"race\") {\n            y = yScale(getPercentType(\"supWhite\", d.value));\n          } else {\n            y = yScale(getPercentType(\"supGender\", d.value));\n          }\n\n          if (cut == \"race\") {\n            x = xScale(getPercentType(\"raceStaff\", d.value));\n          } else {\n            x = xScale(getPercentType(\"genderStaff\", d.value));\n          }\n          highlightedPosition = [x, y, d.value.radius];\n        }\n      });\n\n      cellCircle.filter(function (d) {\n        return +d.key == newsIDSearch;\n      }).style(\"stroke-opacity\", .5).style(\"z-index\", 1000000000).transition(\"border\").duration(1000).style(\"stroke-width\", \"10px\").transition(\"border\").duration(1000).style(\"stroke-width\", \"1px\").style(\"stroke-opacity\", 1);\n\n      cellImages = cell.selectAll(\".swarm-image-container\");\n\n      cellImages.transition().duration(duration).style(\"opacity\", 1).attr(\"transform\", function (d) {\n        if (cut == \"race\") {\n          return \"translate(\" + xScale(getPercentType(\"raceStaff\", d.value)) + \",\" + yScale(getPercentType(\"supWhite\", d.value)) + \")\";\n        }\n        return \"translate(\" + xScale(getPercentType(\"genderStaff\", d.value)) + \",\" + yScale(getPercentType(\"supGender\", d.value)) + \")\";\n      });\n\n      // if(rebuildAxis){\n      chartAxis.select(\"g\").transition().duration(250).style(\"opacity\", 0).on(\"end\", function (d) {\n        d3.select(this).remove();\n        buildAxis();\n      });\n\n      buildAverage();\n    } else if (chartType == \"swarm\") {\n      var _buildAxis = function _buildAxis() {\n\n        var chartAxisContainer = chartAxis.append(\"g\");\n\n        var tickData = [.2, .3, .5, .7, .8];\n        if (extentOverride[0] < .2 || extentOverride[1] > .8) {\n          var tickData = [.2, .5, .8];\n        }\n        var midPoint = .5;\n        if (cut == \"race\") {\n          tickData = [-1, -.5, -.25, 0, .25, 1];\n          midPoint = 0;\n        }\n        if (viewportWidth < 700) {\n          tickData = [.2, .5, .8];\n          if (cut == \"race\") {\n            tickData = [-1, 0, 1];\n            midPoint = 0;\n          }\n        }\n\n        var ticks = chartAxisContainer.append(\"g\").attr(\"class\", \"swarm-axis-tick-container\").selectAll(\"g\").data(tickData).enter().append(\"g\").attr(\"class\", \"swarm-axis-tick-g\");\n\n        ticks.append(\"line\").style(\"stroke\", function (d) {\n          if (d == midPoint) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", function (d, i) {\n          if (d == midPoint) {\n            return height / 2;\n          }\n          return 0;\n        }).attr(\"y2\", function (d) {\n          if (d == midPoint) {\n            return 0;\n          }\n          return height * .05;\n        }).attr(\"class\", \"swarm-axis-tick\");\n\n        ticks.append(\"text\").attr(\"x\", function (d) {\n          return xScale(d);\n        }).attr(\"y\", -9).attr(\"class\", \"swarm-axis-tick-text\").style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (i == tickData.length - 1) {\n            return \"end\";\n          }\n          return null;\n        }).style(\"fill\", function (d, i) {\n          if (d == midPoint) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).text(function (d, i) {\n          if (i == 0) {\n            if (cut == \"race\") {\n              if (viewportWidth < 450) {\n                return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts. White\";\n              }\n              return \"More White vs. City* Census\";\n            }\n            return Math.floor((1 - d) * 100) + \"% Male Staff\";\n          }\n          if (i == tickData.length - 1) {\n            if (cut == \"race\") {\n              if (viewportWidth < 450) {\n                return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts. Non-white\";\n              }\n              return \"More People of Color vs. City* Census\";\n            }\n            return Math.floor(d * 100) + \"% Female Staff\";\n          }\n          if (d == midPoint) {\n            if (cut == \"race\") {\n              return \"Parity with City*\";\n            }\n            return \"50/50  Split\";\n          }\n          if (d < midPoint) {\n            if (cut == \"race\") {\n              return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts.\";\n            }\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          if (cut == \"race\") {\n            return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts.\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n\n        chartAxisContainer.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n      };\n\n      // if(rebuildAxis){\n\n\n      var _buildAverage = function _buildAverage() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        var chartAnnotation = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-annnotation\");\n\n        if (!mobile && viewportWidth > 550) {\n          var adjustWidth = 0;\n          if (viewportWidth < 650) {\n            adjustWidth = 100;\n          }\n\n          chartAnnotation.append(\"line\").attr(\"x1\", width - 147 + adjustWidth).attr(\"x2\", width - 10).attr(\"y1\", height / 2 + 25).attr(\"y2\", height / 2 + 25).attr(\"class\", \"swarm-annnotation-line\").attr(\"marker-end\", function (d) {\n            return \"url(#arrow-head)\";\n          });\n\n          chartAnnotation.append(\"text\").attr(\"x\", width - 147 + adjustWidth).attr(\"y\", height / 2 + 25).attr(\"class\", \"swarm-annnotation-text\").text(function (d) {\n            if (cut == \"race\") {\n              return \"More People of Color\";\n            }\n            return \"More Women\";\n          });\n        }\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\").style(\"opacity\", 0);\n\n        var highlightedAnnotationOffset = height - highlightedPosition[1];\n\n        var highlightedAnnotation = chartAverage.append(\"g\").attr(\"transform\", \"translate(\" + highlightedPosition[0] + \",\" + highlightedPosition[1] + \")\");\n\n        highlightedAnnotation.append(\"line\").attr(\"class\", \"swarm-axis-annotation-line\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", highlightedPosition[2]).attr(\"y2\", highlightedAnnotationOffset).style(\"stroke\", highlightedStrokeColor);\n\n        highlightedAnnotation.append(\"text\").text(newsIDName.get(newsIdSelected).Company).attr(\"class\", \"swarm-axis-annotation-text\").attr(\"y\", highlightedAnnotationOffset + 10);\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 22).text(\"Average\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 7).text(function () {\n          if (cut == \"race\") {\n            return Math.round(Math.abs(newsNestAverageT1) * 100) + \" pts. over-represented white\";\n          }\n          return Math.round((1 - newsNestAverageT1) * 100) + \"% Male\";\n        });\n\n        chartAverage.append(\"line\").attr(\"class\", \"swarm-average-line\").attr(\"x1\", xScale(newsNestAverageT1)).attr(\"x2\", xScale(newsNestAverageT1)).attr(\"y1\", height * .2).attr(\"y2\", height * .8);\n\n        chartAverage.transition().duration(duration).delay(duration).style(\"opacity\", 1);\n      };\n\n      var forceCollide = d3.forceCollide().radius(function (d) {\n        return d.value.radius + 1;\n      }).iterations(1);\n\n      var simulation = d3.forceSimulation(newsNest).force(\"x\", d3.forceX(function (d) {\n        return xScale(getPercentType(cut, d.value));\n      }).strength(1)).force(\"y\", d3.forceY(height / 2)).force(\"collide\", forceCollide).stop();\n\n      chartAxis.select(\"g\").transition().duration(500).style(\"opacity\", 0).on(\"end\", function (d) {\n        d3.select(this).remove();\n        _buildAxis();\n      });\n      // }\n\n      for (var i = 0; i < 250; ++i) {\n        simulation.tick();\n      }cell.each(function (d) {\n        if (d.key == newsIdSelected) {\n          highlightedPosition = [d.x, d.y, d.value.radius];\n        }\n      });\n\n      cellCircle = cell.selectAll(\".swarm-circle\").on(\"mouseover\", function (d) {\n        var data = d;\n        mouseOverEvents(data, d3.select(this));\n      }).on(\"mouseout\", function (d) {\n        var data = d;\n        mouseOutEvents(data, d3.select(this));\n      });\n\n      cellCircle.transition().duration(duration).style(\"opacity\", 1).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      }).style(\"fill\", function (d) {\n        if (+d.key == newsIDSearch) {\n          return newsIDSearchColor;\n        }\n        var value = getPercentType(cut, d.value);\n        return genderColorScale(value);\n      }).attr(\"r\", function (d) {\n        return d.value.radius;\n      }).style(\"stroke\", function (d) {\n        var value = getPercentType(cut, d.value);\n        if (+d.key == newsIDSearch) {\n          return newsIDSearchColor;\n        }\n        if (d.key == newsIdSelected) {\n          return d3.color(genderColorScale(value)).darker(highlightedCircleStrokeDarkness);\n        }\n        return d3.color(genderColorScale(value)).darker(1);\n      }).style(\"stroke-width\", function (d) {\n        if (d.key == newsIdSelected) {\n          return \"2px\";\n        }\n        return null;\n      });\n\n      cellCircle.filter(function (d) {\n        return +d.key == newsIDSearch;\n      }).style(\"stroke-opacity\", .5).transition(\"border\").duration(1000).style(\"stroke-width\", \"10px\").transition(\"border\").duration(1000).style(\"stroke-width\", \"1px\").style(\"stroke-opacity\", 1);\n\n      cellImages = cell.selectAll(\".swarm-image-container\");\n\n      cellImages.transition().duration(duration).style(\"opacity\", 1).attr(\"transform\", function (d) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      });\n\n      _buildAverage();\n    } else if (chartType == \"new\") {\n      var _buildAxis2 = function _buildAxis2() {\n\n        var chartAxisContainer = chartAxis.append(\"g\");\n\n        var tickData = [.2, .3, .5, .7, .8];\n        var midPoint = .5;\n        if (cut == \"race\") {\n          tickData = [-1, -.5, -.25, 0, .25, 1];\n          if (viewportWidth < 750) {\n            tickData = [-1, -.25, 0, .25, 1];\n          }\n          midPoint = 0;\n        }\n        if (viewportWidth < 700) {\n          tickData = [.2, .5, .8];\n          if (cut == \"race\") {\n            tickData = [-1, 0, 1];\n            midPoint = 0;\n          }\n        }\n\n        var ticks = chartAxisContainer.append(\"g\").attr(\"class\", \"swarm-axis-tick-container\").selectAll(\"g\").data(tickData).enter().append(\"g\").attr(\"class\", \"swarm-axis-tick-g\");\n\n        ticks.append(\"line\").style(\"stroke\", function (d) {\n          if (d == midPoint) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", function (d, i) {\n          if (d == midPoint) {\n            return height / 2;\n          }\n          return 0;\n        }).attr(\"y2\", function (d) {\n          if (d == midPoint) {\n            return 0;\n          }\n          return height * .05;\n        }).attr(\"class\", \"swarm-axis-tick\");\n\n        ticks.append(\"text\").attr(\"x\", function (d) {\n          return xScale(d);\n        }).attr(\"y\", -9).attr(\"class\", \"swarm-axis-tick-text\").style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (i == tickData.length - 1) {\n            return \"end\";\n          }\n          return null;\n        }).style(\"fill\", function (d, i) {\n          if (d == midPoint) {\n            return \"#888\";\n          }\n          return genderColorScale(d);\n        }).text(function (d, i) {\n          if (i == 0) {\n            if (cut == \"race\") {\n              if (viewportWidth < 750) {\n                return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts. White\";\n              }\n              return \"More White vs. City* Census\";\n            }\n            return Math.floor((1 - d) * 100) + \"% Male Staff\";\n          }\n          if (i == tickData.length - 1) {\n            if (cut == \"race\") {\n              if (viewportWidth < 750) {\n                return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts. Non-white\";\n              }\n              return \"More People of Color vs. City* Census\";\n            }\n            return Math.floor(d * 100) + \"% Female Staff\";\n          }\n          if (d == midPoint) {\n            if (cut == \"race\") {\n              return \"Parity with City*\";\n            }\n            return \"50/50  Split\";\n          }\n          if (d < midPoint) {\n            if (cut == \"race\") {\n              return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts.\";\n            }\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          if (cut == \"race\") {\n            return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts.\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n\n        chartAxisContainer.append(\"g\").append(\"line\").attr(\"x1\", 0).attr(\"x2\", width).attr(\"y1\", height / 2).attr(\"y2\", height / 2).attr(\"class\", \"swarm-axis-line\");\n      };\n\n      var _buildAverage2 = function _buildAverage2() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        var chartAnnotation = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-annnotation\");\n\n        if (!mobile && viewportWidth > 550) {\n          var adjustWidth = 0;\n          if (viewportWidth < 650) {\n            adjustWidth = 100;\n          }\n          chartAnnotation.append(\"line\").attr(\"x1\", width - 147 + adjustWidth).attr(\"x2\", width - 10).attr(\"y1\", height / 2 + 25).attr(\"y2\", height / 2 + 25).attr(\"class\", \"swarm-annnotation-line\").attr(\"marker-end\", function (d) {\n            return \"url(#arrow-head)\";\n          });\n\n          chartAnnotation.append(\"text\").attr(\"x\", width - 147 + adjustWidth).attr(\"y\", height / 2 + 25).attr(\"class\", \"swarm-annnotation-text\").text(function (d) {\n            if (cut == \"race\") {\n              return \"More People of Color\";\n            }\n            return \"More Women\";\n          });\n        }\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text swarm-average-text-label\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 22).text(\"Average\");\n\n        chartAverage.append(\"text\").attr(\"class\", \"swarm-average-text\").attr(\"x\", xScale(newsNestAverageT1)).attr(\"y\", height * .2 - 7).text(function () {\n          if (cut == \"race\") {\n            return Math.round(Math.abs(newsNestAverageT1) * 100) + \" pts. over-represented white\";\n          }\n          return Math.round((1 - newsNestAverageT1) * 100) + \"% Male\";\n        });\n\n        chartAverage.append(\"line\").attr(\"class\", \"swarm-average-line\").attr(\"x1\", xScale(newsNestAverageT1)).attr(\"x2\", xScale(newsNestAverageT1)).attr(\"y1\", height * .2).attr(\"y2\", height * .8);\n\n        var result = {\n          ip: '24.194.26.74',\n          country_code: 'US',\n          country_name: 'United States',\n          region_code: 'CA',\n          region_name: 'Massachusetts',\n          city: 'New York',\n          zip_code: '01230',\n          time_zone: 'America/New_York',\n          latitude: 42.3601,\n          longitude: -71.0589,\n          metro_code: 532\n        };\n\n        (0, _locate2.default)('fd4d87f605681c0959c16d9164ab6a4a', function (err, response) {\n\n          var locations = [];\n\n          if (response) {\n            result = response;\n          }\n\n          cell.each(function (d) {\n            if (d.value.hasLocation && result != null) {\n              var itemB = d.value.location;\n              var distance = _geolib2.default.getDistanceSimple(result, itemB);\n              if (distance < 200000) {\n                locations.push(d);\n              }\n            }\n          });\n\n          if (locations.length > 1) {\n\n            locations = locations.sort(function (a, b) {\n              return +b.value.maxTotal - +a.value.maxTotal;\n            }).filter(function (d) {\n              if ([\"nj\", \"ny\", \"ct\"].indexOf(result.region_code.toLowerCase()) > -1) {\n                return d;\n              }\n              return d.value.companyData.State == result.region_code.toLowerCase();\n            });\n            locations = locations.slice(0, cutAmount);\n          }\n          if (locations.length != 0) {\n\n            tableData = locations;\n            newsIdSelected = +locations[0].key;\n            highlightedPosition = [locations[0].x, locations[0].y, locations[0].value.radius];\n\n            var highlightedAnnotationOffset = height - highlightedPosition[1];\n\n            var highlightedAnnotation = chartAverage.append(\"g\").attr(\"transform\", \"translate(\" + highlightedPosition[0] + \",\" + highlightedPosition[1] + \")\");\n\n            highlightedAnnotation.append(\"line\").attr(\"class\", \"swarm-axis-annotation-line\").attr(\"x1\", 0).attr(\"x2\", 0).attr(\"y1\", highlightedPosition[2]).attr(\"y2\", highlightedAnnotationOffset).style(\"stroke\", highlightedStrokeColor);\n\n            highlightedAnnotation.append(\"text\").text(newsIDName.get(newsIdSelected).Company).attr(\"class\", \"swarm-axis-annotation-text\").attr(\"y\", highlightedAnnotationOffset + 10);\n\n            cellCircle.each(function (d, i, j) {\n              if (+d.key == newsIdSelected) {\n                highlightedItem(d3.select(this));\n              }\n            });\n          } else {\n            tableData = newsNest.slice(0, cutAmount);\n          }\n          if (urlParam != \"\" && +urlParam != 0) {\n            currentChart = stepperSequence[urlParam];\n            buildChart(currentChart);\n          }\n        });\n      };\n\n      var capitalizeFirstLetter = function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n      };\n\n      var forceCollide = d3.forceCollide().radius(function (d) {\n        return d.value.radius + 1;\n      }).iterations(1);\n\n      var simulation = d3.forceSimulation(newsNest).force(\"x\", d3.forceX(function (d) {\n        return xScale(getPercentType(cut, d.value));\n      }).strength(1)).force(\"y\", d3.forceY(height / 2)).force(\"collide\", forceCollide).stop();\n\n      for (var i = 0; i < 250; ++i) {\n        simulation.tick();\n      }cell = chartG.selectAll(\"g\").data(newsNest).enter().append(\"g\").attr(\"class\", \"swarm-cell-g\");\n\n      cellLine = cell.append(\"path\").attr(\"class\", \"swarm-line\");\n\n      console.log(\"3071\");\n\n      cellCircleTwo = cell.append(\"circle\").attr(\"class\", \"swarm-circle-two\").attr(\"r\", function (d) {\n        return 4;\n      }).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      });\n\n      console.log(\"3085\");\n\n      cellCircle = cell.append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n        return d.value.radius;\n      }).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      }).on(\"mouseover\", function (d) {\n        var data = d;\n        mouseOverEvents(data, d3.select(this));\n      }).on(\"mouseout\", function (d) {\n        var data = d;\n        mouseOutEvents(data, d3.select(this));\n      }).style(\"fill\", function (d) {\n        if (+d.key == newsIDSearch) {\n          return newsIDSearchColor;\n        }\n        var value = getPercentType(cut, d.value);\n        return genderColorScale(value);\n      }).style(\"stroke\", function (d) {\n        var value = getPercentType(cut, d.value);\n        if (+d.key == newsIDSearch) {\n          return newsIDSearchColor;\n        }\n        if (d.key == newsIdSelected) {\n          return d3.color(genderColorScale(value)).darker(highlightedCircleStrokeDarkness);\n        }\n        return d3.color(genderColorScale(value)).darker(1);\n      });\n\n      cellImages = cell.append(\"g\").attr(\"transform\", function (d, i) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      }).attr(\"class\", \"swarm-image-container\");\n\n      cellImages.append(\"image\").attr(\"class\", \"swarm-image\").attr(\"xlink:href\", function (d) {\n        if (d.value.companyName == \"Newsday (Long Island)\") {\n          return \"assets/newsday-logo.svg\";\n        }\n        if (d.value.companyName == \"the new york times\") {\n          return \"assets/ny-times-logo.svg\";\n        }\n        if (d.value.companyName == \"chicago tribune\") {\n          return \"assets/chicago-tribune-logo.svg\";\n        }\n        if (d.value.companyName == \"the wall street journal\") {\n          return \"assets/wsj-logo.svg\";\n        }\n        if (d.value.companyName == \"Los Angeles Times\") {\n          return \"assets/la-times.svg\";\n        }\n        if (d.value.companyName == \"usa today\") {\n          return \"assets/usa-today-logo.svg\";\n        }\n        if (d.value.companyName == \"the washington post\") {\n          return \"assets/wapo-logo.png\";\n        }\n        return null;\n      }).attr(\"width\", function (d) {\n        return d.value.radius * 2 * .7;\n      }).attr(\"height\", function (d) {\n        return d.value.radius * 2 * .7;\n      })\n      // .style(\"transform\",function(d){\n      //   return \"translate(\"+(-1*d.value.radius*2*.7)/2+\"px,\"+(-1*d.value.radius*2*.7)/2+\"px)\"\n      // })\n      .attr(\"style\", function (d) {\n        return \"-webkit-transform: translate(\" + -1 * d.value.radius * 2 * .7 / 2 + \"px,\" + -1 * d.value.radius * 2 * .7 / 2 + \"px); transform:translate(\" + -1 * d.value.radius * 2 * .7 / 2 + \"px,\" + -1 * d.value.radius * 2 * .7 / 2 + \"px);\";\n      });\n\n\n      cellText = cell.append(\"text\").attr(\"x\", function (d, i) {\n        return d.x;\n      }).attr(\"y\", function (d, i) {\n        return d.y;\n      }).attr(\"class\", \"swarm-text\").style(\"opacity\", 0).attr(\"class\", \"swarm-text\").text(function (d) {\n        var text = d.value.companyName.replace(/\\b\\w/g, function (l) {\n          return l.toUpperCase();\n        });\n        return text;\n      });\n\n      cellText.filter(function (d) {\n        return newDataIDs.indexOf(+d.key) == -1;\n      }).append(\"tspan\").attr(\"dx\", 2).text(function (d) {\n        return \"*\";\n      });\n\n      cellDash = cell.append(\"line\").attr(\"class\", \"swarm-text-dash\").style(\"opacity\", 0);\n\n      footerContainer = container.append(\"div\").attr(\"class\", \"footer-container\").append(\"div\").attr(\"class\", \"footer-wrapper\");\n\n      footerContainer.append(\"div\").attr(\"class\", \"news-lab-logo\").append(\"p\").html(\"*105 of 292 newsrooms are compared to a geography larger than a city, (e.g., USA Today: USA. Boston Globe: Massachusetts). Geographies were approximated using public data.\");\n\n      var embedLink = footerContainer.append(\"div\").attr(\"class\", \"embed-link\");\n\n      embedLinkText = embedLink.append(\"p\").append(\"span\").attr(\"class\", \"embed-link-text\").text(\"Embed This Chart\").on(\"click\", function (d) {\n        d3.select(this).text(\"Paste code into your site\");\n        embedLinkInput.style(\"display\", \"block\").attr(\"readonly\", true).attr(\"value\", function (d) {\n          return \"<iframe src='https://googletrends.github.io/asne/index.html?view=\" + stepperSequence.indexOf(currentChart) + \"&filter=\" + cut + \"' frameborder='0'></iframe>\";\n        });\n      });\n\n      embedLinkInput = embedLink.append(\"input\");\n\n      d3.select(\".note-new-data\").on(\"click\", function (d) {\n        d3.select(\".footer-highlight\").classed(\"footer-highlighted\", true);\n        document.getElementById('footer-element').scrollIntoView();\n      });\n\n      footerContainer.append(\"div\").attr(\"class\", \"swarm-chart-source\").attr(\"id\", \"footer-element\").selectAll(\"p\").data([\"Source: ASNE, Census: &lsquo;11-&lsquo;15\", \"American Community Survey.\", \"Newsrooms shown are those\", \"with 25 total staff or more\"])\n      // .data([\"Source: ASNE, Census: &lsquo;11-&lsquo;15\",\"American Community Survey.\",\"Newsrooms shown are those\",\"with 25 total staff or more\",\"<span class='note-new-data-footer'>*</span>About two-thirds of newsrooms did not respond to the 2018 survey and use data from 2017. This year’s respondents are here.\"])\n      .enter().append(\"p\").attr(\"class\", \"swarm-chart-source-text\").style(\"margin-top\", function (d, i) {\n        if (i == 1 || i == 4) {\n          return \"10px\";\n        }\n        return null;\n      }).classed(\"footer-highlight\", function (d, i) {\n        if (i == 4) {\n          return true;\n        }\n        return false;\n      }).html(function (d) {\n        return d;\n      });\n\n      window.addEventListener('click', function (e) {\n        if (document.getElementById('search-results-box').contains(e.target)) {\n          // Clicked in box\n        } else {\n          chartToolTip.style(\"visibility\", null);\n          searchResultsContainer.style(\"display\", null);\n        }\n      });\n\n      window.addEventListener('touchstart', function (e) {\n        if (document.getElementById('search-results-box').contains(e.target)) {\n          // Clicked in box\n        } else {\n          chartToolTip.style(\"visibility\", null);\n          searchResultsContainer.style(\"display\", null);\n        }\n      });\n\n      buildToggles();\n      searchSpectrum();\n\n      _buildAxis2();\n      _buildAverage2();\n    } else if (chartType == \"arrow-scatter\") {\n      var drawArrow = function drawArrow(t0, t1, topOffset) {\n        var d = t1 > t0 ?\n        // (\"M\"+t0+\",0 L\"+t1+\",0 Z\") :\n        \"M\" + (t1 - 6) + \",\" + topOffset + \" L\" + (t1 - 12) + \",\" + (topOffset + 4) + \" L\" + (t1 - 12) + \",\" + (topOffset + 1.5) + \" L\" + t0 + \",\" + topOffset + \" L\" + (t1 - 12) + \",\" + (topOffset - 1.5) + \" L\" + (t1 - 12) + \",\" + (topOffset - 4) + \" L\" + (t1 - 6) + \",\" + topOffset : \"M\" + (t1 + 6) + \",\" + topOffset + \" L\" + (t1 + 12) + \",\" + (topOffset + 4) + \" L\" + (t1 + 12) + \",\" + (topOffset + 1.5) + \" L\" + t0 + \",\" + topOffset + \" L\" + (t1 + 12) + \",\" + (topOffset - 1.5) + \" L\" + (t1 + 12) + \",\" + (topOffset - 4) + \" L\" + (t1 + 6) + \",\" + topOffset;\n\n        // (\"M0,\" + (t1-2) + \" L4,\" + (t1-8) + \" L1.5,\" + (t1-8) + \" L0,\" + t0 + \" L-1.5,\" + (t1-8) + \" L-4,\" + (t1-8) + \" Z\") :\n        // (\"M0,\" + (t1-2) + \" L4,\" + (t1-8) + \" L1.5,\" + (t1-8) + \" L0,\" + t0 + \" L-1.5,\" + (t1-8) + \" L-4,\" + (t1-8) + \" Z\") :\n        // (\"M0,\" + (t1+2) + \" L4,\" + (t1+8) + \" L1.5,\" + (t1+8) + \" L0,\" + t0 + \" L-1.5,\" + (t1+8) + \" L-4,\" + (t1+8) + \" Z\");\n        return d;\n      };\n\n      var drawDiamond = function drawDiamond(t0, t1) {\n        return \"M0,\" + (t1 - 4) + \" L4,\" + (t1 - 8)\n        // + \" L1.5,\" + (t1-8)\n        + \" L0,\" + (t1 - 12) + \" L-4,\" + (t1 - 8) + \" Z\";\n      };\n\n      var _buildAxis3 = function _buildAxis3() {\n        var chartAxisContainer = chartAxis.append(\"g\");\n        var chartAxisLines = chartAxisContainer.append(\"g\");\n\n        var linesData = [.2, .35, .5, .65, .8];\n        if (cut == \"race\") {\n          linesData = [-1, -.25, 0, .25, 1];\n        }\n\n        if (viewportWidth < 820) {\n          var linesData = [.25, .5, .75];\n          if (cut == \"race\") {\n            linesData = [-1, 0];\n          }\n        }\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-arrow-x-axis-lines\").selectAll(\"line\").data(linesData).enter().append(\"line\").attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", -10).attr(\"y2\", items * rowSpacing).attr(\"class\", \"swarm-axis-line\").style(\"stroke\", function (d, i) {\n          if (d == .5) {\n            return \"rgba(0, 0, 0, 0.09)\";\n          }\n          return null;\n        }).style(\"stroke-width\", function (d, i) {\n          if (d == .5) {\n            return \"2px\";\n          }\n          return null;\n        });\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-scatter-y-axis-lines\").selectAll(\"line\").data(d3.range(items)).enter().append(\"line\").attr(\"x1\", function (d, i) {\n          if (i == 0 || i == switchNum) {\n            return -140;\n          }\n          return -15;\n        }).attr(\"x2\", width + 15).attr(\"y1\", function (d, i) {\n          return i * rowSpacing; //yScale(d);\n        }).attr(\"y2\", function (d, i) {\n          return i * rowSpacing; //yScale(d);\n        }).attr(\"class\", \"swarm-axis-line\");\n\n        var chartAxisText = chartAxisContainer.append(\"g\");\n\n        chartAxisText.append(\"g\").selectAll(\"text\").data(linesData).enter().append(\"text\").attr(\"x\", function (d, i) {\n          return xScale(d);\n        }).attr(\"y\", function (d, i) {\n          return 0;\n        }).attr(\"class\", function (d, i) {\n          return \"swarm-arrow-tick-text\";\n        }).style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (d == 1 && cut == \"race\") {\n            return \"end\";\n          }\n          if (d == .75) {\n            if (viewportWidth < 651) {\n              return \"end\";\n            }\n          }\n          if (d == .8) {\n            return \"end\";\n          }\n          if (viewportWidth < 820) {\n            if (cut == \"race\") {\n              return \"end\";\n            }\n          }\n          return null;\n        }).text(function (d, i) {\n          if (i == 0) {\n            if (cut == \"race\") {\n              if (viewportWidth < 820) {\n                return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts. white\";\n              }\n              return \"More White vs. City* Census\";\n              return Math.floor(Math.abs(d) * 100) + \" pts. over-represented white\";\n            }\n            return Math.floor((1 - d) * 100) + \"% Male\";\n          }\n          if (d == 0) {\n            if (cut == \"race\") {\n              if (viewportWidth < 820) {\n                return \"Parity w/Census\";\n              }\n              return \"Parity with Census\";\n            }\n          }\n          if (d < .5) {\n            if (cut == \"race\") {\n              return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts.\";\n            }\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          if (d == .5 && cut != \"race\") {\n            return \"50/50 Split\";\n          }\n          if (d == .75) {\n            if (viewportWidth < 651) {\n              return Math.floor(d * 100) + \"% Female\";\n            }\n          }\n          if (d == .8) {\n            return Math.floor(d * 100) + \"% Female\";\n          }\n          if (d == 1 && cut == \"race\") {\n            if (viewportWidth < 820) {\n              return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts. more non-white vs. census\";\n            }\n            return \"More People of Color vs. City* Census\";\n            return Math.floor(d * 100) + \" pts. over-represented people of color\";\n          }\n          if (cut == \"race\") {\n            return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts.\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n      };\n\n      var _buildAverage3 = function _buildAverage3() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        var chartAnnotation = chartAverage.append(\"g\").attr(\"class\", \"swarm-annnotation\");\n\n        var chartAnnotationDots = [\"gender-old\", \"gender\"];\n        if (cut == \"race\") {\n          chartAnnotationDots = [\"race-old\", \"race\"];\n        }\n\n        var chartAnnotationTop = chartAnnotation.append(\"g\").selectAll(\"g\").data(chartAnnotationDots).enter().append(\"g\").attr(\"class\", \"swarm-arrow-annotation-top\").attr(\"transform\", function (d, i) {\n          return \"translate(\" + xScale(getPercentType(d, chartAnnotationData.value)) + \",\" + 0 + \")\";\n        }).style(\"opacity\", 0);\n\n        chartAnnotationTop.transition().duration(arrowDuration).delay(function (d, i) {\n          if (!rebuildAxis) {\n            return 0;\n          }\n          if (i == 0) {\n            return delay;\n          }\n          return 0;\n        }).style(\"opacity\", 1);\n\n        var chartAnnotationText = [\"Gender Diversity Improved\", \"Gender Diversity Dropped\"];\n        if (cut == \"race\") {\n          chartAnnotationText = [\"Race Diversity Improved\", \"Race Diversity Dropped\"];\n        }\n\n        var chartAnnotationLeft = chartAnnotation.append(\"g\").selectAll(\"text\").data(chartAnnotationText).enter().append(\"text\").attr(\"class\", \"swarm-arrow-annotation-left\").attr(\"x\", 0).attr(\"y\", function (d, i) {\n          if (i == 0) {\n            return 0;\n          }\n          return rowSpacing * switchNum;\n        }).text(function (d) {\n          return d;\n        });\n\n        var chartAnnotationTopOffset = -30;\n\n        chartAnnotationTop.append(\"text\").attr(\"y\", chartAnnotationTopOffset).attr(\"x\", 0).attr(\"class\", \"swarm-arrow-annotation-top-text\").style(\"fill\", function (d) {\n          if (d == \"gender\") {\n            return \"#dab30b\";\n          }\n          return \"#888\";\n        }).style(\"text-anchor\", function (d, i) {\n          if (cut == \"race\") {\n            if (d == \"race\") {\n              return \"start\";\n            }\n            return \"end\";\n          }\n          return null;\n        }).text(function (d) {\n          if (viewportWidth < 651) {\n            if (d == \"gender\" || d == \"race\") {\n              return \"In \" + yearSelected;\n            }\n            return \"In \" + yearOld;\n          }\n          if (cut == \"race\") {\n            if (d == \"race\") {\n              return \"Race in \" + yearSelected;\n            }\n            return \"Race in \" + yearOld;\n          }\n          if (d == \"gender\") {\n            return \"Gender in \" + yearSelected;\n          }\n          return \"Gender in \" + yearOld;\n        });\n\n        chartAnnotationTop.append(\"line\").attr(\"y1\", 0).attr(\"y2\", chartAnnotationTopOffset).attr(\"x1\", 0).attr(\"x2\", 0).attr(\"class\", \"swarm-arrow-annotation-top-line\").style(\"stroke\", function (d) {\n          if (viewportWidth < 651) {\n            return \"black\";\n          }\n          if (d == \"gender\") {\n            return \"#c1a427\";\n          }\n          return \"#888\";\n        });\n      };\n\n      var arrowDuration = duration;\n\n      var switchSet = false;\n      var switchNum = 0;\n\n      if (!rebuildAxis) {\n        arrowDuration = 0;\n      }\n\n      var rowSpacing = 15;\n      // cellCircle = cell.selectAll(\"circle\")\n      var chartAnnotationData;\n\n      var cellFiltered = cell.filter(function (d) {\n        return d.value.miniChart > -1 || d.key == newsIDSearch;\n      }).sort(function (a, b) {\n        if (cut == \"race\") {\n          return b.value.raceDiff - a.value.raceDiff;\n        }\n        return b.value.diff - a.value.diff;\n      }).each(function (d, i) {\n        d.value.arrowSort = i;\n\n        if (d.value.diff < 0 && cut != \"race\") {\n          if (!switchSet) {\n            switchSet = true;\n            switchNum = i + 2;\n          }\n          d.value.arrowSort = i + 2;\n        }\n        if (d.value.raceDiff < 0 && cut == \"race\") {\n          if (!switchSet) {\n            switchSet = true;\n            switchNum = i + 2;\n          }\n          d.value.arrowSort = i + 2;\n        }\n\n        if (i == 0) {\n          chartAnnotationData = d;\n        }\n      });\n\n      var items = cellFiltered.size() + 2;\n\n      var delay = 500;\n\n      cell.filter(function (d) {\n        return d.value.miniChart == -1 && d.key != newsIDSearch;\n      }).style(\"opacity\", 0);\n\n      cellCircle = cell.selectAll(\".swarm-circle\").on(\"mouseover\", function (d) {}).on(\"mouseout\", function (d) {});\n\n      cellCircle.filter(function (d) {\n        return d.value.miniChart > -1 || d.key == newsIDSearch;\n      }).style(\"opacity\", 1).style(\"fill\", null).style(\"stroke\", null).transition().duration(arrowDuration).attr(\"r\", 4).attr(\"cx\", function (d) {\n        if (cut == \"race\") {\n          return xScale(getPercentType(\"race\", d.value));\n        }\n        return xScale(getPercentType(\"gender\", d.value));\n      }).attr(\"cy\", function (d, i) {\n        return d.value.arrowSort * rowSpacing + rowSpacing / 2;\n      });\n\n      cellImages = cell.selectAll(\".swarm-image-container\");\n\n      cellImages.filter(function (d) {\n        return d.value.miniChart > -1 || d.key == newsIDSearch;\n      }).transition().duration(duration).style(\"opacity\", 0);\n\n      cellText = cell.selectAll(\".swarm-text\");\n\n      cellText.style(\"text-anchor\", null).style(\"fill\", function (d) {\n        if (+d.key == newsIdSelected) {\n          return \"black\";\n        }\n        return null;\n      }).style(\"font-weight\", function (d) {\n        if (+d.key == newsIdSelected) {\n          return 600;\n        }\n        return null;\n      }).filter(function (d) {\n        return d.value.miniChart > -1 || d.key == newsIDSearch;\n      }).style(\"opacity\", null).transition().duration(arrowDuration).attr(\"x\", function (d) {\n        return 0;\n      }).attr(\"y\", function (d, i) {\n        return d.value.arrowSort * rowSpacing + rowSpacing / 2;\n      });\n\n      var defaultFontSize = 11;\n\n      cellCircleTwo = cell.selectAll(\".swarm-circle-two\").on(\"mouseover\", function (d) {}).on(\"mouseout\", function (d) {});\n\n      cellCircleTwo.filter(function (d) {\n        return d.value.miniChart > -1 || d.key == newsIDSearch;\n      }).attr(\"r\", 4).attr(\"cx\", function (d) {\n        if (cut == \"race\") {\n          var result = getPercentType(\"race-old\", d.value);\n          if (result == \"n/a\") {\n            return null;\n          }\n          return xScale(result);\n        }\n        var result = getPercentType(\"gender-old\", d.value);\n        if (result == \"n/a\") {\n          return null;\n        }\n        return xScale(result);\n      }).attr(\"cy\", function (d, i, j) {\n        return d.value.arrowSort * rowSpacing + rowSpacing / 2;\n      }).transition().duration(arrowDuration).delay(function (d) {\n        if (!rebuildAxis) {\n          return 0;\n        }\n        return d.value.arrowSort * 10 + delay;\n      }).style(\"opacity\", 1);\n\n      cellText.filter(function (d) {\n        if (d.key == newsIDSearch) {\n          return d;\n        }\n        return null;\n      }).style(\"fill\", newsIDSearchColor).style(\"font-weight\", 600).transition().duration(duration).style(\"font-size\", \"15px\").transition().duration(duration).style(\"font-size\", defaultFontSize + \"px\");\n\n      cellCircleTwo.filter(function (d) {\n        if (d.key == newsIDSearch) {\n          return d;\n        }\n        return null;\n      }).transition().duration(duration).style(\"fill\", newsIDSearchColor).style(\"stroke\", newsIDSearchColor).transition().duration(duration).style(\"fill\", null).style(\"stroke\", null);\n\n      cellCircle.filter(function (d) {\n        if (d.key == newsIDSearch) {\n          return d;\n        }\n        return null;\n      }).transition().duration(duration).style(\"fill\", newsIDSearchColor).style(\"stroke\", newsIDSearchColor).transition().duration(duration).style(\"fill\", null).style(\"stroke\", null);\n\n      cellLine = cell.selectAll(\".swarm-line\");\n\n      cellLine.filter(function (d) {\n        return d.value.miniChart > -1 || d.key == newsIDSearch;\n      }).transition().duration(0).attr(\"d\", function (d) {\n        if (cut == \"race\") {\n          var t0 = xScale(getPercentType(\"race-old\", d.value));\n          var t1 = xScale(getPercentType(\"race-old\", d.value));\n          if (Math.abs(d.value.raceDiff) < .02) {\n            return \"\";\n          }\n          if (d.value.raceDiff > .02) {\n            return drawArrow(xScale(getPercentType(\"race-old\", d.value)), xScale(getPercentType(\"race-old\", d.value) + .02), d.value.arrowSort * rowSpacing + rowSpacing / 2);\n          }\n          return drawArrow(xScale(getPercentType(\"race-old\", d.value)), xScale(getPercentType(\"race-old\", d.value) - .02), d.value.arrowSort * rowSpacing + rowSpacing / 2);\n        } else {\n          var t0 = xScale(getPercentType(\"gender-old\", d.value));\n          var t1 = xScale(getPercentType(\"gender-old\", d.value));\n          if (Math.abs(d.value.diff) < .02) {\n            return \"\";\n          }\n          if (d.value.diff > .02) {\n            return drawArrow(xScale(getPercentType(\"gender-old\", d.value)), xScale(getPercentType(\"gender-old\", d.value) + .02), d.value.arrowSort * rowSpacing + rowSpacing / 2);\n          }\n          return drawArrow(xScale(getPercentType(\"gender-old\", d.value)), xScale(getPercentType(\"gender-old\", d.value) - .02), d.value.arrowSort * rowSpacing + rowSpacing / 2);\n        }\n      }).attr(\"fill\", function (d) {\n        if (d.value.raceDiff > 0 && cut == \"race\") {\n          return \"url(#gradient-right)\";\n        }\n        if (d.value.diff > 0 && cut != \"race\") {\n          return \"url(#gradient-right)\";\n        }\n        return \"url(#gradient-left)\";\n      }).transition().duration(arrowDuration).delay(function (d) {\n        if (!rebuildAxis) {\n          return 0;\n        }\n        return d.value.arrowSort * 10 + delay + duration;\n      }).style(\"opacity\", 1).transition().duration(function () {\n        if (!rebuildAxis) {\n          return 0;\n        }\n        return 400;\n      }).delay(function (d, i) {\n        if (!rebuildAxis) {\n          return 0;\n        }\n        return d.value.arrowSort * 15;\n      }).attrTween(\"d\", function (d) {\n        if (cut == \"race\") {\n          var t0 = xScale(getPercentType(\"race-old\", d.value));\n          var t1 = xScale(getPercentType(\"race\", d.value));\n          return function (t) {\n            if (Math.abs(d.value.raceDiff) < .02) {\n              return \"\";\n            }\n            if (d.value.raceDiff > .02) {\n              return drawArrow(xScale(getPercentType(\"race-old\", d.value)), (xScale(getPercentType(\"race\", d.value)) - xScale(getPercentType(\"race-old\", d.value) + .02)) * t + xScale(getPercentType(\"race-old\", d.value) + .02), d.value.arrowSort * rowSpacing + rowSpacing / 2);\n            } else if (d.value.raceDiff < -.02) {\n              return drawArrow(xScale(getPercentType(\"race-old\", d.value)), xScale(getPercentType(\"race-old\", d.value) - .02) - Math.abs(xScale(getPercentType(\"race\", d.value)) - xScale(getPercentType(\"race-old\", d.value) - .02)) * t, d.value.arrowSort * rowSpacing + rowSpacing / 2);\n            }\n          };\n        } else {\n          var t0 = xScale(getPercentType(\"gender-old\", d.value));\n          var t1 = xScale(getPercentType(\"gender\", d.value));\n          return function (t) {\n            if (Math.abs(d.value.diff) < .02) {\n              return \"\";\n            }\n            if (d.value.diff > .02) {\n              return drawArrow(xScale(getPercentType(\"gender-old\", d.value)), (xScale(getPercentType(\"gender\", d.value)) - xScale(getPercentType(\"gender-old\", d.value) + .02)) * t + xScale(getPercentType(\"gender-old\", d.value) + .02), d.value.arrowSort * rowSpacing + rowSpacing / 2);\n            } else if (d.value.diff < -.02) {\n              return drawArrow(xScale(getPercentType(\"gender-old\", d.value)), xScale(getPercentType(\"gender-old\", d.value) - .02) - Math.abs(xScale(getPercentType(\"gender\", d.value)) - xScale(getPercentType(\"gender-old\", d.value) - .02)) * t, d.value.arrowSort * rowSpacing + rowSpacing / 2);\n            }\n          };\n        }\n      });\n\n      chartAxis.select(\"g\").transition().duration(250).style(\"opacity\", 0).on(\"end\", function (d) {\n        d3.select(this).remove();\n        _buildAxis3();\n      });\n\n      _buildAverage3();\n    } else if (chartType == \"arrow-scatter-full\") {\n      var _drawArrow = function _drawArrow(t0, t1, topOffset) {\n        var d = t1 > t0 ?\n        // (\"M\"+t0+\",0 L\"+t1+\",0 Z\") :\n        \"M\" + (t1 - 6) + \",\" + topOffset + \" L\" + (t1 - 12) + \",\" + (topOffset + 4) + \" L\" + (t1 - 12) + \",\" + (topOffset + 1.5) + \" L\" + t0 + \",\" + topOffset + \" L\" + (t1 - 12) + \",\" + (topOffset - 1.5) + \" L\" + (t1 - 12) + \",\" + (topOffset - 4) + \" L\" + (t1 - 6) + \",\" + topOffset : \"M\" + (t1 + 6) + \",\" + topOffset + \" L\" + (t1 + 12) + \",\" + (topOffset + 4) + \" L\" + (t1 + 12) + \",\" + (topOffset + 1.5) + \" L\" + t0 + \",\" + topOffset + \" L\" + (t1 + 12) + \",\" + (topOffset - 1.5) + \" L\" + (t1 + 12) + \",\" + (topOffset - 4) + \" L\" + (t1 + 6) + \",\" + topOffset;\n\n        // (\"M0,\" + (t1-2) + \" L4,\" + (t1-8) + \" L1.5,\" + (t1-8) + \" L0,\" + t0 + \" L-1.5,\" + (t1-8) + \" L-4,\" + (t1-8) + \" Z\") :\n        // (\"M0,\" + (t1-2) + \" L4,\" + (t1-8) + \" L1.5,\" + (t1-8) + \" L0,\" + t0 + \" L-1.5,\" + (t1-8) + \" L-4,\" + (t1-8) + \" Z\") :\n        // (\"M0,\" + (t1+2) + \" L4,\" + (t1+8) + \" L1.5,\" + (t1+8) + \" L0,\" + t0 + \" L-1.5,\" + (t1+8) + \" L-4,\" + (t1+8) + \" Z\");\n        return d;\n      };\n\n      var _drawDiamond = function _drawDiamond(t0, t1, topOffset) {\n        return \"M\" + (t1 - 4) + \",\" + topOffset + \" L\" + (t1 - 8) + \",\" + (topOffset + 4)\n        // + \" L1.5,\" + (t1-8)\n        + \" L\" + (t1 - 12) + \",\" + (topOffset + 0) + \" L\" + (t1 - 8) + \",\" + (topOffset - 4) + \" Z\";\n      };\n\n      var getLineFill = function getLineFill(d) {\n        if (+d.key == +keepNewsIDSearch) {\n          return newsIDSearchColor;\n        }\n        if (cut == \"race\") {\n          if (Math.abs(d.value.raceDiff) < .03) {\n            return \"#888\";\n          }\n          if (d.value.raceDiff > 0) {\n            return \"url(#gradient-blue)\";\n          }\n        } else {\n          if (Math.abs(d.value.diff) < .02) {\n            return \"#888\";\n          }\n          if (d.value.diff > 0) {\n            return \"url(#gradient-blue)\";\n          }\n        }\n        return \"url(#gradient-red)\";\n      };\n\n      // }\n      var _buildAxis4 = function _buildAxis4() {\n        var chartAxisContainer = chartAxis.append(\"g\");\n        var chartAxisLines = chartAxisContainer.append(\"g\");\n\n        var linesData = [.2, .35, .5, .65, .8];\n        if (cut == \"race\") {\n          linesData = [-1, -.25, 0, .25, 1];\n          if (viewportWidth < 700) {\n            linesData = [-1, -.5, 0, .35];\n            if (viewportWidth < 450) {\n              linesData = [-.85, 0, .35];\n            }\n          }\n        }\n\n        chartAxisLines.append(\"g\").attr(\"class\", \"swarm-arrow-x-axis-lines\").selectAll(\"line\").data(linesData).enter().append(\"line\").attr(\"x1\", function (d) {\n          return xScale(d);\n        }).attr(\"x2\", function (d) {\n          return xScale(d);\n        }).attr(\"y1\", -10).attr(\"y2\", items * rowSpacing).attr(\"class\", \"swarm-axis-line\").style(\"stroke\", function (d, i) {\n          if (d == .5) {\n            return \"rgba(0, 0, 0, 0.09)\";\n          }\n          return null;\n        }).style(\"stroke-width\", function (d, i) {\n          if (d == .5) {\n            return \"2px\";\n          }\n          return null;\n        });\n\n        var chartAxisText = chartAxisContainer.append(\"g\");\n\n        chartAxisText.append(\"g\").selectAll(\"text\").data(linesData).enter().append(\"text\").attr(\"x\", function (d, i) {\n          return xScale(d);\n        }).attr(\"y\", function (d, i) {\n          return 0;\n        }).attr(\"class\", function (d, i) {\n          return \"swarm-arrow-tick-text\";\n        }).style(\"text-anchor\", function (d, i) {\n          if (i == 0) {\n            return \"start\";\n          }\n          if (viewportWidth < 700 && cut == \"race\") {\n            if (d == 0) {\n              return \"end\";\n            }\n          }\n          if (d == 1 && cut == \"race\") {\n            return \"end\";\n          }\n          if (d == .35 && cut == \"race\") {\n            return \"end\";\n          }\n          if (d == .8) {\n            return \"end\";\n          }\n          return null;\n        }).text(function (d, i) {\n          if (d == .35 && cut == \"race\") {\n            return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts. Non-white\";\n          }\n          if (i == 0) {\n            if (cut == \"race\") {\n              if (viewportWidth < 700) {\n                return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts White\";\n              }\n              return \"More White vs. City* Census\";\n              return Math.floor(Math.abs(d) * 100) + \" pts. over-represented white\";\n            }\n            return Math.floor((1 - d) * 100) + \"% Male\";\n          }\n          if (d == 0) {\n            if (cut == \"race\") {\n              if (viewportWidth < 750) {\n                return \"Parity w/census\";\n              }\n              return \"Parity with Census\";\n            }\n          }\n          if (d < .5) {\n            if (cut == \"race\") {\n              return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts.\";\n            }\n            return Math.floor((1 - d) * 100) + \"%\";\n          }\n          if (d == .5 && cut != \"race\") {\n            return \"50/50 Split\";\n          }\n          if (d == .8) {\n            return Math.floor(d * 100) + \"% Female\";\n          }\n          if (d == 1 && cut == \"race\") {\n            if (viewportWidth < 700) {\n              return \"+\" + Math.floor(d * 100) + \" pts Non-white\";\n            }\n            return \"More People of Color vs. City* Census\";\n            return Math.floor(d * 100) + \" pts. over-represented people of color\";\n          }\n          if (cut == \"race\") {\n            return \"+\" + Math.floor(Math.abs(d) * 100) + \" pts.\";\n          }\n          return Math.floor(d * 100) + \"%\";\n        });\n      };\n\n      var _buildAverage4 = function _buildAverage4() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        var annotationDataDiffData = [0, 0];\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        var chartAnnotation = chartAverage.append(\"g\").attr(\"class\", \"swarm-annnotation\");\n\n        var chartMouseoverBox = chartAverage.append(\"g\").attr(\"class\", \"arrow-swarm-full-mouseover\").selectAll(\"rect\").data(cellFiltered.data()).enter().append(\"rect\").attr(\"width\", width).attr(\"height\", rowSpacing).attr(\"x\", function (d, i) {\n          return 0;\n        }).attr(\"y\", function (d) {\n          return d.value.arrowSort * rowSpacing - rowSpacing / 2;\n        }).attr(\"class\", \"arrow-swarm-full-mouseover-rect\").on(\"mouseover\", function (d) {\n\n          chartAnnotationAverage.style(\"opacity\", .5);\n          chartAnnotationDiff.style(\"opacity\", .5);\n\n          var item = d.key;\n\n          chartAverageText.style(\"visibility\", \"hidden\");\n\n          cellText.style(\"opacity\", function (d, i, j) {\n            if (getPercentType(\"gender-old\", d.value) == \"n/a\") {\n              return 0;\n            }\n            if (d.key == item) {\n              return 1;\n            }\n            return 0;\n          }).style(\"fill\", function (d) {\n            if (d.key == item) {\n              return \"black\";\n            }\n            if (cut == \"race\") {\n              if (Math.abs(d.value.raceDiff) < .02) {\n                return \"#888\";\n              }\n              if (d.value.raceDiff > 0) {\n                return \"blue\";\n              }\n            } else {\n              if (Math.abs(d.value.diff) < .02) {\n                return \"#888\";\n              }\n              if (d.value.diff > 0) {\n                return \"blue\";\n              }\n            }\n            return \"red\";\n          }).style(\"font-size\", \"14px\");\n          ;\n\n          cellDash.style(\"opacity\", function (d, i, j) {\n            if (d.key == item) {\n              return 1;\n            }\n            return 0;\n          });\n\n          cellLine.attr(\"fill\", function (d) {\n            if (d.key == item) {\n              return \"black\";\n            }\n            return getLineFill(d);\n          }).style(\"stroke\", function (d) {\n            if (d.key == item) {\n              return \"black\";\n            }\n            return \"none\";\n          });\n        }).on(\"mouseout\", function (d) {\n\n          chartAnnotationAverage.style(\"opacity\", null);\n          chartAnnotationDiff.style(\"opacity\", null);\n\n          chartAverageText.style(\"visibility\", null);\n\n          cellDash.style(\"opacity\", function (d, i, j) {\n            if (getPercentType(\"gender-old\", d.value) == \"n/a\") {\n              return 0;\n            }\n            if (cut == \"race\") {\n              if (getPercentType(\"race\", d.value) == annotationDataExtent[0] || getPercentType(\"race\", d.value) == annotationDataExtent[1]) {\n                return 1;\n              }\n              return 0;\n            } else {\n              if (getPercentType(\"gender\", d.value) == annotationDataExtent[0] || getPercentType(\"gender\", d.value) == annotationDataExtent[1]) {\n                return 1;\n              }\n              return 0;\n            }\n          });\n\n          cellText.style(\"opacity\", function (d, i, j) {\n            if (getPercentType(\"gender-old\", d.value) == \"n/a\") {\n              return 0;\n            }\n            if (cut == \"race\") {\n              if (viewportWidth < 700) {\n                return 0;\n              }\n              if (getPercentType(\"race\", d.value) == annotationDataExtent[0] || getPercentType(\"race\", d.value) == annotationDataExtent[1]) {\n                return 1;\n              }\n            } else {\n              if (getPercentType(\"gender\", d.value) == annotationDataExtent[0] || getPercentType(\"gender\", d.value) == annotationDataExtent[1]) {\n                return 1;\n              }\n            }\n            return 0;\n          }).style(\"fill\", function (d) {\n            if (cut == \"race\") {\n              if (Math.abs(d.value.raceDiff) < .02) {\n                return \"#888\";\n              }\n              if (d.value.raceDiff > 0) {\n                return \"blue\";\n              }\n            } else {\n              if (Math.abs(d.value.diff) < .02) {\n                return \"#888\";\n              }\n              if (d.value.diff > 0) {\n                return \"blue\";\n              }\n            }\n            return \"red\";\n          }).style(\"font-size\", null);\n          ;\n\n          cellLine.attr(\"fill\", function (d) {\n            return getLineFill(d);\n          }).style(\"stroke\", function (d) {\n            return \"none\";\n          });\n        });\n\n        chartAverage.append(\"g\").append(\"path\").attr(\"class\", \"arrow-scatter-line arrow-scatter-line-average\").attr(\"d\", function (d) {\n          var t0 = xScale(newsNestAverageT0);\n          var t1 = xScale(newsNestAverageT1);\n\n          if (Math.abs(newsNestAverageT1 - newsNestAverageT0) < .02) {\n            return _drawDiamond(t0, t1, height / 2 + 20);\n          }\n          return _drawArrow(t0, t1, height / 2 + 20);\n        }).attr(\"fill\", function (d) {\n          if (newsNestAverageT1 - newsNestAverageT0 > 0) {\n            return \"url(#gradient-average)\";\n          }\n          return \"url(#gradient)\";\n        }).attr(\"stroke\", \"none\").attr(\"fill-opacity\", 1);\n\n        var chartAverageText = chartAverage.append(\"g\").attr(\"class\", \"arrow-scatter-average-text\").attr(\"transform\", function (d, i) {\n          return \"translate(\" + xScale(newsNestAverageT1) + \",\" + (height / 2 + 20) + \")\";\n        }).append(\"text\").attr(\"class\", \"arrow-scatter-average-text-label\").text(function (d) {\n          return \"Average\";\n        });\n\n        for (var item in annotationDataDiff) {\n          if (annotationDataDiff[item] > .02) {\n            annotationDataDiffData[0] = annotationDataDiffData[0] + 1;\n          } else if (annotationDataDiff[item] < -.02) {\n            annotationDataDiffData[1] = annotationDataDiffData[1] + 1;\n          }\n        }\n\n        var chartAnnotationDiff = chartAnnotation.selectAll(\"text\").data(annotationDataDiffData).enter().append(\"text\").attr(\"class\", \"swarm-arrow-full-annotation-diff\").attr(\"transform\", function (d, i) {\n          if (cut == \"race\") {\n            if (viewportWidth < 700) {\n              if (viewportWidth < 600) {\n                if (i == 0) {\n                  return \"translate(\" + xScale(-1) + \",\" + height * annotationDataDiffData[0] / items / 2 + \")\";\n                }\n                return \"translate(\" + xScale(-1) + \",\" + height * (1 - annotationDataDiffData[1] / items / 2) + \")\";\n              }\n              if (i == 0) {\n                return \"translate(\" + xScale(0) + \",\" + height * annotationDataDiffData[0] / items / 2 + \")\";\n              }\n              return \"translate(\" + xScale(0) + \",\" + height * (1 - annotationDataDiffData[1] / items / 2) + \")\";\n            }\n            if (i == 0) {\n              return \"translate(\" + xScale(.3) + \",\" + height * annotationDataDiffData[0] / items / 2 + \")\";\n            }\n            return \"translate(\" + xScale(.3) + \",\" + height * (1 - annotationDataDiffData[1] / items / 2) + \")\";\n          } else {\n            if (i == 0) {\n              return \"translate(\" + xScale(.51) + \",\" + height * annotationDataDiffData[0] / items / 2 + \")\";\n            }\n            return \"translate(\" + xScale(.51) + \",\" + height * (1 - annotationDataDiffData[1] / items / 2) + \")\";\n          }\n        }).style(\"fill\", function (d, i) {\n          if (i == 0) {\n            return d3.color(\"blue\");\n          }\n          return d3.color(\"red\");\n        }).attr(\"x\", 0).attr(\"y\", 0).attr(\"dy\", 0).selectAll(\"tspan\").data(function (d, i) {\n          if (cut == \"race\") {\n            if (i == 0) {\n              return [Math.round(d / items * 100) + \"%\", \" of newsrooms \", \"gained\", \"racial diversity, \" + yearOld + \" - \" + yearSelected];\n            }\n            return [Math.round(d / items * 100) + \"%\", \" of newsrooms \", \"lost\", \"racial diversity, \" + yearOld + \" - \" + yearSelected];\n          } else {\n            if (i == 0) {\n              return [Math.round(d / items * 100) + \"%\", \" of newsrooms \", \"gained\", \"gender diversity, \" + yearOld + \" - \" + yearSelected];\n            }\n            return [Math.round(d / items * 100) + \"%\", \" of newsrooms \", \"lost\", \"gender diversity, \" + yearOld + \" - \" + yearSelected];\n          }\n        }).enter().append(\"tspan\").attr(\"x\", function (d, i) {\n          if (i == 3) {\n            return \"0\";\n          }\n          return null;\n        }).attr(\"y\", 0).attr(\"dy\", function (d, i) {\n          if (i == 3) {\n            return \"1.4em\";\n          }\n        }).text(function (d) {\n          return d;\n        });\n\n        var chartAnnotationAverage = chartAverage.append(\"g\").attr(\"class\", \"arrow-scatter-annoation-average\").attr(\"transform\", function (d, i) {\n          if (cut == \"race\") {\n            if (viewportWidth < 700) {\n              if (viewportWidth < 600) {\n                return \"translate(\" + xScale(-1) + \",\" + (height / 2 + 20) + \")\";\n              }\n              return \"translate(\" + xScale(0) + \",\" + (height / 2 + 20) + \")\";\n            }\n            return \"translate(\" + xScale(.3) + \",\" + (height / 2 + 20) + \")\";\n          }\n          return \"translate(\" + xScale(.51) + \",\" + (height / 2 + 20) + \")\";\n        }).append(\"text\").attr(\"class\", \"arrow-scatter-annoation-average-text\").text(function (d) {\n          if (cut == \"race\") {\n            return \"Average: \" + Math.round((newsNestAverageT1 - newsNestAverageT0) * 1000) / 10 + \"pt. gain vs. census\";\n          }\n          if (newsNestAverageT1 - newsNestAverageT0 > 0) {\n            return \"Average: \" + Math.round((newsNestAverageT1 - newsNestAverageT0) * 1000) / 10 + \"% increase in women\";\n          }\n          return \"Average: \" + Math.round((newsNestAverageT1 - newsNestAverageT0) * 1000) / 10 + \"% increase in men\";\n        });\n        //\n      };\n\n      // if(rebuildAxis){\n\n\n      var rowSpacing = 3.5;\n\n      var chartAnnotationData;\n\n      var annotationDataDiff = [];\n      var annotationTextArray = [];\n\n      var cellFiltered = cell.filter(function (d, i) {\n        return newsIDSearchList.indexOf(+d.key) == -1;\n      }).sort(function (a, b) {\n        if (cut == \"race\") {\n          return b.value.raceDiff - a.value.raceDiff;\n        } else {\n          return b.value.diff - a.value.diff;\n        }\n      }).each(function (d, i) {\n\n        if (cut == \"race\") {\n          annotationDataDiff.push(d.value.raceDiff);\n          annotationTextArray.push(getPercentType(\"race\", d.value));\n        } else {\n          annotationDataDiff.push(d.value.diff);\n          annotationTextArray.push(getPercentType(\"gender\", d.value));\n        }\n        d.value.arrowSort = i;\n      });\n\n      var annotationDataExtent = d3.extent(annotationTextArray);\n\n      var items = cellFiltered.size();\n\n      var delay = duration + 1000;\n\n      cellCircle = cell.selectAll(\".swarm-circle\");\n\n      cellCircle.transition().duration(duration).style(\"opacity\", 0);\n\n      cellImages = cell.selectAll(\".swarm-image-container\");\n\n      cellImages.transition().duration(duration).style(\"opacity\", 0);\n\n      var textAmount = 15;\n\n      cellText = cell.selectAll(\".swarm-text\");\n\n      cellText.transition().duration(0).attr(\"x\", function (d) {\n        if (getPercentType(\"gender-old\", d.value) == \"n/a\") {\n          return 0;\n        }\n        if (cut == \"race\") {\n          if (Math.abs(d.value.raceDiff) < .03) {\n            return xScale(getPercentType(\"race\", d.value)) + 7;\n          }\n          if (d.value.raceDiff > 0) {\n            return xScale(getPercentType(\"race\", d.value)) + 6;\n          }\n          return xScale(getPercentType(\"race\", d.value)) - 6;\n        } else {\n          if (Math.abs(d.value.diff) < .02) {\n            return xScale(getPercentType(\"gender\", d.value)) + 7;\n          }\n          if (d.value.diff > 0) {\n            return xScale(getPercentType(\"gender\", d.value)) + 6;\n          }\n          return xScale(getPercentType(\"gender\", d.value)) - 6;\n        }\n      }).style(\"opacity\", function (d, i, j) {\n        if (getPercentType(\"gender-old\", d.value) == \"n/a\") {\n          return 0;\n        }\n        if (viewportWidth < 600) {\n          return 0;\n        }\n        if (cut == \"race\") {\n          if (getPercentType(\"race\", d.value) == annotationDataExtent[0] || getPercentType(\"race\", d.value) == annotationDataExtent[1]) {\n            return 1;\n          }\n        }\n        if (getPercentType(\"gender\", d.value) == annotationDataExtent[0] || getPercentType(\"gender\", d.value) == annotationDataExtent[1]) {\n          return 1;\n        }\n        return 0;\n      }).style(\"fill\", function (d) {\n        if (getPercentType(\"gender-old\", d.value) == \"n/a\") {\n          return null;\n        }\n        if (cut == \"race\") {\n          if (Math.abs(d.value.raceDiff) < .03) {\n            return \"#888\";\n          }\n          if (d.value.raceDiff > 0) {\n            return \"blue\";\n          }\n          return \"red\";\n        } else {\n          if (Math.abs(d.value.diff) < .02) {\n            return \"#888\";\n          }\n          if (d.value.diff > 0) {\n            return \"blue\";\n          }\n          return \"red\";\n        }\n      }).attr(\"y\", function (d, i) {\n        if (getPercentType(\"gender-old\", d.value) == \"n/a\") {\n          return 0;\n        }\n        return d.value.arrowSort * rowSpacing;\n      }).style(\"text-anchor\", function (d, i) {\n        if (getPercentType(\"gender-old\", d.value) == \"n/a\") {\n          return null;\n        }\n        if (cut == \"race\") {\n          if (Math.abs(d.value.raceDiff) < .03) {\n            return \"start\";\n          }\n          if (d.value.raceDiff > 0) {\n            return \"start\";\n          }\n        } else {\n          if (Math.abs(d.value.diff) < .02) {\n            return \"start\";\n          }\n          if (d.value.diff > 0) {\n            return \"start\";\n          }\n        }\n        return \"end\";\n      }).style(\"transform\", \"none\");\n      //\n      cellDash = cell.selectAll(\".swarm-text-dash\");\n\n      cellDash.style(\"opacity\", function (d, i, j) {\n        if (getPercentType(\"gender-old\", d.value) == \"n/a\") {\n          return 0;\n        }\n        if (cut == \"race\") {\n          if (getPercentType(\"race\", d.value) == annotationDataExtent[0] || getPercentType(\"race\", d.value) == annotationDataExtent[1]) {\n            return 1;\n          }\n          return 0;\n        } else {\n          if (getPercentType(\"gender\", d.value) == annotationDataExtent[0] || getPercentType(\"gender\", d.value) == annotationDataExtent[1]) {\n            return 1;\n          }\n          return 0;\n        }\n      }).attr(\"y1\", function (d, i) {\n        return null;\n        return d.value.arrowSort * rowSpacing;\n      }).attr(\"y2\", function (d, i) {\n        return null;\n        return d.value.arrowSort * rowSpacing;\n      }).attr(\"x1\", function (d) {\n        return null;\n        if (cut == \"race\") {\n          if (Math.abs(d.value.raceDiff) < .03) {\n            return xScale(getPercentType(\"race\", d.value)) + 5;\n          }\n          if (d.value.raceDiff > 0) {\n            return xScale(getPercentType(\"race\", d.value)) + 4;\n          }\n          return xScale(getPercentType(\"race\", d.value)) - 4;\n        } else {\n          if (Math.abs(d.value.diff) < .02) {\n            return xScale(getPercentType(\"gender\", d.value)) + 5;\n          }\n          if (d.value.diff > 0) {\n            return xScale(getPercentType(\"gender\", d.value)) + 4;\n          }\n          return xScale(getPercentType(\"gender\", d.value)) - 4;\n        }\n      }).attr(\"x2\", function (d) {\n        return null;\n        if (cut == \"race\") {\n          if (Math.abs(d.value.raceDiff) < .02) {\n            return xScale(getPercentType(\"race\", d.value)) - 2;\n          }\n          if (d.value.raceDiff > 0) {\n            return xScale(getPercentType(\"race\", d.value)) - 4;\n          }\n          return xScale(getPercentType(\"race\", d.value)) + 4;\n        } else {\n          if (Math.abs(d.value.diff) < .02) {\n            return xScale(getPercentType(\"gender\", d.value)) - 2;\n          }\n          if (d.value.diff > 0) {\n            return xScale(getPercentType(\"gender\", d.value)) - 4;\n          }\n          return xScale(getPercentType(\"gender\", d.value)) + 4;\n        }\n      });\n\n      cellLine = cell.selectAll(\".swarm-line\");\n\n      var keepNewsIDSearch = newsIDSearch;\n\n      cellLine.transition().duration(0).attr(\"d\", function (d) {\n        if (getPercentType(\"gender-old\", d.value) == \"n/a\") {\n          return null;\n        }\n        if (cut == \"race\") {\n          var resultOld = getPercentType(\"race-old\", d.value);\n          if (resultOld == \"n/a\") {\n            return null;\n          }\n          var t0 = xScale(getPercentType(\"race-old\", d.value));\n          var t1 = xScale(getPercentType(\"race\", d.value));\n\n          if (Math.abs(d.value.raceDiff) < .03) {\n            return _drawDiamond(t0, t1, d.value.arrowSort * rowSpacing);\n          }\n          return _drawArrow(t0, t1, d.value.arrowSort * rowSpacing);\n        } else {\n          var resultOld = getPercentType(\"gender-old\", d.value);\n          if (resultOld == \"n/a\") {\n            return null;\n          }\n          var t0 = xScale(resultOld);\n          var t1 = xScale(getPercentType(\"gender\", d.value));\n\n          if (Math.abs(d.value.diff) < .02) {\n            return _drawDiamond(t0, t1, d.value.arrowSort * rowSpacing);\n          }\n          return _drawArrow(t0, t1, d.value.arrowSort * rowSpacing);\n        }\n      }).attr(\"fill\", function (d) {\n        return getLineFill(d);\n      }).style(\"stroke\", \"none\").transition().duration(750).delay(function (d, i) {\n        if (d.key == newsIDSearch) {\n          return 0;\n        }\n        return 250 + d.value.arrowSort * 10;\n      }).style(\"opacity\", function (d, i) {\n        return 1;\n      }).attr(\"transform\", function (d) {\n        if (d.key == newsIDSearch) {\n          return \"translate(0,\" + -d.value.arrowSort * rowSpacing + \")\";\n        }\n        return null;\n      }).transition().duration(750).attr(\"transform\", function (d) {\n        if (d.key == newsIDSearch) {\n          return \"translate(0,0)\";\n        }\n        return null;\n      });\n\n      // if(rebuildAxis){\n      chartAxis.select(\"g\").transition().duration(250).style(\"opacity\", 0).on(\"end\", function (d) {\n        d3.select(this).remove();\n        _buildAxis4();\n      });_buildAverage4();\n      // }\n    } else if (chartType == \"table\") {\n      var buildTable = function buildTable() {\n\n        chartTableItem = chartDivContainerTable.selectAll(\"div\").data(tableData).enter().append(\"div\").attr(\"class\", \"swarm-chart-table-company-container\");\n\n        chartTableItem.transition().duration(500).delay(function (d, i) {\n          return i * 100;\n        }).style(\"opacity\", 1).style(\"transform\", \"translate(0px,0px)\");\n\n        chartTableItem.append(\"p\").attr(\"class\", \"swarm-chart-table-company-name\").html(function (d) {\n          var oldData = newDataIDs.indexOf(+d.key);\n          var textValue = \"\";\n          if (d.value.companyName == \"usa today\") {\n            textValue = \"USA Today\";\n          } else if (d.value.companyName.length > 30) {\n            textValue = d.value.companyName.replace(/\\b\\w/g, function (l) {\n              return l.toUpperCase();\n            }).slice(0, 27) + \"...\";\n          } else {\n            textValue = d.value.companyName.replace(/\\b\\w/g, function (l) {\n              return l.toUpperCase();\n            });\n          }\n          if (oldData == -1) {\n            textValue = textValue + \"<span class='red'>*</span>\";\n          }\n          return textValue;\n\n          //\n          // var companyName = d.value.companyName\n          // if(companyName.length > 30){\n          //   return companyName.replace(/\\b\\w/g, l => l.toUpperCase()).slice(0,27)+\"...\"\n          // }\n          // return companyName.replace(/\\b\\w/g, l => l.toUpperCase())\n        });\n\n        var chartTableSection = chartTableItem.selectAll(\"div\").data(function (d, i) {\n          var itemCount = i;\n          var value = d;\n          return [\"staff\", \"leaders\", \"census\"].map(function (d) {\n            return { key: d, value: value, companyCount: itemCount };\n          });\n        }).enter().append(\"div\").attr(\"class\", \"swarm-chart-table-company-section\");\n\n        var chartTableRow = chartTableSection.selectAll(\"div\").data(function (d, i) {\n          var cat = d;\n          var years = [yearSelected, +yearOld];\n          if (cat.key == \"census\") {\n            years = [yearSelected];\n          }\n          return years.map(function (d) {\n            return { year: d, key: cat.key, value: cat.value, companyCount: cat.companyCount };\n          });\n        }).enter().append(\"div\").attr(\"class\", \"swarm-chart-table-company-row\");\n\n        var chartTablePercent = chartTableRow.selectAll(\".swarm-chart-table-company-percent\").data(function (d, i) {\n          var item = d;\n          var newThing = [\"white\", \"black\", \"hisp.\", \"asian\", \"female\"].map(function (d) {\n            return { year: item.year, key: item.key, value: item.value, cat: d, companyCount: item.companyCount };\n          });\n          return newThing;\n        }).enter().append(\"p\").attr(\"class\", \"swarm-chart-table-company-percent\").text(function (d) {\n          if (d.key == \"census\") {\n            if (d.cat == \"female\") {\n              var femaleData = d.value.value.femaleCensus;\n              if (femaleData == \"n/a\") {\n                return femaleData;\n              }\n              return Math.round(d.value.value.femaleCensus * 100) + \"%\";\n            }\n            if (d.cat == \"white\") {\n              return Math.round(d.value.value.whiteCensus * 100) + \"%\";\n            }\n            if (d.cat == \"hisp.\") {\n              if (d.year == yearSelected) {\n                return Math.round(d.value.value.hispanicCensus * 100) + \"%\";\n              }\n            }\n            if (d.cat == \"black\") {\n              if (d.year == yearSelected) {\n                return Math.round(d.value.value.blackCensus * 100) + \"%\";\n              }\n            }\n            if (d.cat == \"asian\") {\n              if (d.year == yearSelected) {\n                return Math.round(d.value.value.asianCensus * 100) + \"%\";\n              }\n            }\n          }\n          if (d.key == \"staff\") {\n\n            if (d.cat == \"white\") {\n              if (d.year == yearSelected) {\n                return Math.round(getPercentType(\"white\", d.value.value) * 100) + \"%\";\n              } else {\n                var result = getPercentType(\"white-old\", d.value.value);\n                if (result == \"n/a\") {\n                  return result;\n                }\n                return Math.round(result * 100) + \"%\";\n              }\n            }\n            if (d.cat == \"black\") {\n              if (d.year == yearSelected) {\n                return Math.round(getPercentType(\"black\", d.value.value) * 100) + \"%\";\n              } else {\n                var result = getPercentType(\"black-old\", d.value.value);\n                if (result == \"n/a\") {\n                  return result;\n                }\n                return Math.round(result * 100) + \"%\";\n              }\n            }\n            if (d.cat == \"hisp.\") {\n              if (d.year == yearSelected) {\n                return Math.round(getPercentType(\"hisp\", d.value.value) * 100) + \"%\";\n              } else {\n                var result = getPercentType(\"hisp-old\", d.value.value);\n                if (result == \"n/a\") {\n                  return result;\n                }\n                return Math.round(result * 100) + \"%\";\n              }\n            }\n            if (d.cat == \"asian\") {\n              if (d.year == yearSelected) {\n                return Math.round(getPercentType(\"asian\", d.value.value) * 100) + \"%\";\n              } else {\n                var result = getPercentType(\"asian-old\", d.value.value);\n                if (result == \"n/a\") {\n                  return result;\n                }\n                return Math.round(result * 100) + \"%\";\n              }\n            }\n            if (d.cat == \"female\") {\n              if (d.year == yearSelected) {\n                return Math.round(getPercentType(\"gender\", d.value.value) * 100) + \"%\";\n              } else {\n                var result = getPercentType(\"gender-old\", d.value.value);\n                if (result == \"n/a\") {\n                  return result;\n                }\n                return Math.round(result * 100) + \"%\";\n              }\n            }\n          }\n          if (d.key = \"leaders\") {\n\n            if (d.cat == \"white\") {\n              if (d.year == yearSelected) {\n                return Math.round(getPercentType(\"supWhiteRaw\", d.value.value) * 100) + \"%\";\n              } else {\n                var result = getPercentType(\"sup-white-old\", d.value.value);\n                if (result == \"n/a\") {\n                  return result;\n                }\n                return Math.round(result * 100) + \"%\";\n              }\n            }\n            if (d.cat == \"black\") {\n              if (d.year == yearSelected) {\n                return Math.round(getPercentType(\"supBlack\", d.value.value) * 100) + \"%\";\n              } else {\n                var result = getPercentType(\"sup-black-old\", d.value.value);\n                if (result == \"n/a\") {\n                  return result;\n                }\n                return Math.round(result * 100) + \"%\";\n              }\n            }\n            if (d.cat == \"hisp.\") {\n              if (d.year == yearSelected) {\n                return Math.round(getPercentType(\"supHisp\", d.value.value) * 100) + \"%\";\n              } else {\n                var result = getPercentType(\"sup-hisp-old\", d.value.value);\n                if (result == \"n/a\") {\n                  return result;\n                }\n                return Math.round(result * 100) + \"%\";\n              }\n            }\n            if (d.cat == \"asian\") {\n              if (d.year == yearSelected) {\n                return Math.round(getPercentType(\"supAsian\", d.value.value) * 100) + \"%\";\n              } else {\n                var result = getPercentType(\"sup-asian-old\", d.value.value);\n                if (result == \"n/a\") {\n                  return result;\n                }\n                return Math.round(result * 100) + \"%\";\n              }\n            }\n            if (d.cat == \"female\") {\n              if (d.year == yearSelected) {\n                return Math.round(getPercentType(\"supGender\", d.value.value) * 100) + \"%\";\n              } else {\n                var result = getPercentType(\"sup-gender-old\", d.value.value);\n                if (result == \"n/a\") {\n                  return result;\n                }\n                return Math.round(result * 100) + \"%\";\n              }\n            }\n          }\n          return \"tbd\";\n        });\n\n        chartTablePercent.filter(function (d, i) {\n          return d.key == \"census\" && d.year == yearSelected && i == 0;\n        }).append(\"span\").attr(\"class\", \"swarm-chart-table-company-row-top-label-census\").text(function (d) {\n          if (d.value.value.companyData.hasOverride) {\n            if (d.value.value.companyData.override.coverage_area.length > 20) {\n              return d.value.value.companyData.override.coverage_area.slice(0, 17) + \"...\";\n            }\n            return d.value.value.companyData.override.coverage_area;\n          }\n          return d.value.value.companyData.City + \", \" + d.value.value.companyData.State.toUpperCase();\n        });\n\n        chartTableRow.filter(function (d, i) {\n          return d.key == \"staff\" && d.year == yearSelected;\n        }).selectAll(\"p\").append(\"span\").attr(\"class\", \"swarm-chart-table-company-row-top-label\").text(function (d) {\n          return d.cat;\n        });\n\n        chartTablePercent.filter(function (d, i) {\n          return i == 0 && d.companyCount == 0;\n        }).append(\"span\").attr(\"class\", \"swarm-chart-table-company-row-year\").text(function (d) {\n          if (d.key == \"census\") {\n            return \"\";\n          }\n          return d.year;\n        });\n\n        chartTablePercent.filter(function (d, i) {\n          return i == 0 && d.companyCount == 0 && d.year == yearSelected;\n        }).append(\"span\").attr(\"class\", function (d, i) {\n          if (d.key == \"census\") {\n            return \"swarm-chart-table-company-row-key swarm-chart-table-company-row-census\";\n          }\n          return \"swarm-chart-table-company-row-key\";\n        }).text(function (d) {\n          if (d.key == \"census\") {\n            return \"audience\";\n          }\n          if (d.key == \"staff\") {\n            return \"all\";\n          }\n          return d.key;\n        }).filter(function (d) {\n          return d.key == \"census\";\n        }).append(\"span\").attr(\"class\", \"swarm-chart-table-company-row-year-census-span\").text(\"Latest Census Est.\");\n      };\n\n      var _buildAverage5 = function _buildAverage5() {\n\n        chartDiv.select(\".swarm-average\").remove();\n        chartDiv.select(\".swarm-annnotation\").remove();\n\n        var chartAverage = chartDiv.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\").attr(\"class\", \"swarm-average\");\n\n        var chartAnnotation = chartAverage.append(\"g\").attr(\"class\", \"swarm-annnotation\");\n      };\n\n      chartDivContainerTable.selectAll(\".swarm-chart-table-company-container\").remove();\n\n      cellCircle.on(\"mouseover\", function (d) {}).transition().duration(500).style(\"opacity\", 0);\n\n      cellImages.transition().duration(500).style(\"opacity\", 0);\n\n      if (rebuildAxis) {\n        chartAxis.select(\"g\").transition().duration(500).style(\"opacity\", 0).on(\"end\", function (d) {\n          d3.select(this).remove();\n          var chartAxisContainer = chartAxis.append(\"g\");\n          buildTable();\n        });\n      }\n\n      if (rebuildAxis) {\n        _buildAverage5();\n      }\n    }\n\n    //clear newsIDSearch\n\n    var previousNewsIDSearch = newsIDSearch;\n    newsIDSearch = \"\";\n    newsIDSearchList.push(previousNewsIDSearch);\n  }\n\n  // tableData = newsNest.slice(0,4);\n  // table =\n  buildChart(\"new\");\n\n  function buildToggles() {\n\n    newToggleForRaceAndGender = stepperContainerToggle.append(\"div\").attr(\"class\", \"top-row-chart-toggle-wrapper\");\n\n    var toggles = footerContainer.append(\"div\").attr(\"class\", \"histogram-chart-toggle-wrapper\");\n\n    var sizeCats = [0, 20, 50, 100, 500];\n\n    toggles.append(\"div\").attr(\"class\", \"histogram-chart-toggle-size\").selectAll(\"p\").data(sizeCats).enter().append(\"p\").attr(\"class\", function (d, i) {\n      if (i == 0) {\n        return \"toggle-selected front-curve histogram-chart-toggle-item\";\n      }\n      if (i == sizeCats.length - 1) {\n        return \"back-curve histogram-chart-toggle-item\";\n      }\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      return d;\n    }).on(\"click\", function (d) {\n\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      countMin = d;\n      buildChart(currentChart);\n    });\n\n    var raceGenderToggleData = [\"gender\", \"race\"]; //,\"supWhite\",\"supGender\"]\n\n    toggleType = newToggleForRaceAndGender.append(\"div\").attr(\"class\", \"histogram-chart-toggle-type histogram-chart-toggle-first\");\n\n    toggleType.selectAll(\"p\").data(raceGenderToggleData).enter().append(\"p\").attr(\"class\", function (d, i) {\n\n      if (urlParamCut != \"\") {\n        if (i == 0 && d == urlParamCut) {\n          return \"toggle-selected front-curve histogram-chart-toggle-item\";\n        } else if (i == 0) {\n          return \"front-curve histogram-chart-toggle-item\";\n        }\n\n        if (i == 1 && d == urlParamCut) {\n          return \"toggle-selected back-curve histogram-chart-toggle-item\";\n        } else if (i == 1) {\n          return \"back-curve histogram-chart-toggle-item\";\n        }\n      } else {\n        if (i == 0) {\n          return \"toggle-selected front-curve histogram-chart-toggle-item\";\n        }\n        if (i == 1) {\n          return \"back-curve histogram-chart-toggle-item\";\n        }\n      }\n\n      return \"histogram-chart-toggle-item\";\n    }).text(function (d) {\n      if (d == \"race\") {\n        return \"Race\";\n      }\n      return \"Gender\";\n    }).on(\"click\", function (d) {\n      embedLinkText.text(\"Embed this chart\");\n      embedLinkInput.style(\"display\", null);\n\n      var dataSelected = d;\n      d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\", function (d) {\n        if (d == dataSelected) {\n          return true;\n        }\n        return false;\n      });\n      cut = d;\n      _urlParameter2.default.set('filter', cut);\n\n      buildChart(currentChart);\n    });\n\n    var projection = d3.geoAlbersUsa();\n    // .scale(1280)\n    // .translate([width / 2, height / 2]);\n\n    var path = d3.geoPath().projection(projection)\n    // .pointRadius(1.5)\n    ;\n\n    function mapMakeBig() {\n      mapBig = true;\n      searchMap.classed(\"swarm-chart-min\", false);\n      searchMapClose.style(\"display\", \"block\");\n      searchMapLabel.style(\"display\", \"none\");\n      searchMapScreen.style(\"display\", \"none\");\n      mapSvg.style(\"pointer-events\", \"all\");\n      mapSelector.style(\"display\", \"block\");\n    }\n    function mapMakeSmall() {\n      mapBig = false;\n      searchMap.classed(\"swarm-chart-min\", true);\n      searchMapClose.style(\"display\", null);\n      searchMapLabel.style(\"display\", null);\n      mapSvg.style(\"pointer-events\", null);\n      mapSelector.style(\"display\", null);\n      searchMapScreen.style(\"display\", null);\n    }\n\n    searchMap = newToggleForRaceAndGender.append(\"div\").attr(\"class\", \"swarm-chart-map swarm-chart-min\");\n\n    var searchMapScreen = searchMap.append(\"div\").attr(\"class\", \"map-screen\").on(\"click\", function (d) {\n      if (!mapBig) {\n        mapMakeBig();\n      } else {\n        mapMakeSmall();\n      }\n    });\n\n    var searchMapClose = searchMap.append(\"div\").attr(\"class\", \"map-close\").on(\"click\", function (d) {\n      mapMakeSmall();\n    });\n\n    searchMapClose.append(\"div\").attr(\"class\", \"map-close-icon\");\n\n    var searchMapLabel = searchMap.append(\"p\").attr(\"class\", \"map-label\").text(function (d) {\n      return \"Select Region\";\n    });\n\n    var mapSvg = searchMap.append(\"svg\").attr(\"class\", \"maps-chart-svg\").attr(\"viewBox\", \"0 0 960 600\").append(\"g\").attr(\"transform\", \"translate(\" + 0 + \",\" + 50 + \")\");\n\n    mapSvg.append(\"g\").attr(\"class\", \"states\").selectAll(\"path\").data(topojson.feature(stateTopo, stateTopo.objects.states).features).enter().append(\"path\").attr(\"d\", path);\n\n    mapSvg.append(\"g\").append(\"path\").attr(\"class\", \"state-borders\").attr(\"d\", path(topojson.mesh(stateTopo, stateTopo.objects.states, function (a, b) {\n      return a !== b;\n    })));\n\n    function getLocations(d) {\n\n      console.log(d);\n\n      var itemSelected = d;\n\n      var location = d.value.location;\n      var project = projection([+location.longitude, location.latitude]);\n\n      mapSelector.transition().duration(750).attr(\"transform\", \"translate(\" + project + \")\");\n\n      var distanceArray = [];\n\n      mapMarkers.each(function (d) {\n        if (d.value.hasLocation) {\n          var itemB = d.value.location;\n          var distance = _geolib2.default.getDistanceSimple(location, itemB);\n          if (distance < 200000) {\n            distanceArray.push(d);\n          }\n        }\n      });\n\n      distanceArray = distanceArray.filter(function (d) {\n        return +d.key != +itemSelected.key;\n      });\n\n      if (distanceArray.length > 3) {\n        distanceArray = distanceArray.sort(function (a, b) {\n          return +b.value.maxTotal - +a.value.maxTotal;\n        }).slice(0, 3);\n      }\n\n      tableData = distanceArray;\n      tableData.unshift(d);\n      if (mobile || viewportWidth < 450) {\n        tableData = [d];\n      }\n      buildChart(\"table\");\n    }\n\n    var mapMarkers = mapSvg.append(\"g\").attr(\"class\", \"map-markers\").selectAll(\"circle\").data(searchDataSet.sort(function (a, b) {\n      return radiusScale(+b.value.maxTotal) - radiusScale(+a.value.maxTotal);\n    })).enter().append(\"circle\").attr(\"class\", \"map-marker\").attr(\"r\", function (d) {\n      return radiusScale(+d.value.maxTotal);\n    }).style(\"fill\", function (d) {\n      if (d.value.hasLocation) {\n        return null;\n      }\n      return \"rgba(0,0,0,0)\";\n    }).attr(\"transform\", function (d) {\n      if (d.value.hasLocation) {\n        var location = d.value.location;\n        console.log();\n        var project = projection([+location.longitude, location.latitude]);\n        if (project) {\n          return \"translate(\" + project + \")\";\n        }\n      }\n      return null;\n    }).on(\"click\", function (d) {\n      getLocations(d);\n    });\n\n    var mapSelector = mapSvg.append(\"g\").attr(\"class\", \"map-selector\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height * .8 + \")\");\n\n    var selectorRadius = 20;\n    console.log(\"5432\");\n    mapSelector.append(\"circle\").attr(\"class\", \"map-selector-circle\").attr(\"r\", selectorRadius);\n\n    mapSelector.append(\"text\").attr(\"class\", \"map-selector-target\").attr(\"transform\", \"translate(\" + 0 + \",\" + -1 + \")\").text(\"+\");\n\n    mapSelector.append(\"text\").attr(\"class\", \"map-selector-text\").text(\"Show Newsrooms Here\").attr(\"transform\", \"translate(\" + 0 + \",\" + (-selectorRadius - 15) + \")\");\n\n    var searchDiv = toggles.append(\"div\").attr(\"class\", \"swarm-chart-search-div\").attr(\"id\", \"search-results-box\");\n\n    searchInput = searchDiv.append(\"input\").attr(\"class\", \"swarm-chart-search\").attr(\"placeholder\", \"Find a Newsroom\").on(\"focus\", function (d) {\n      searchResultsContainer.style(\"display\", \"block\");\n    });\n\n    searchDiv.append(\"div\").attr(\"class\", \"mag-glass\").append(\"svg\").attr(\"xmlns\", \"http://www.w3.org/2000/svg\").attr(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\").attr(\"x\", \"0px\").attr(\"y\", \"0px\").attr(\"viewBox\", \"0 0 100 125\").attr(\"xml:space\", \"preserve\").append(\"path\").attr(\"d\", \"M79.2,72.3L62.9,56.7c6.3-9.1,5.3-21.7-2.8-29.9c-9.2-9.2-24-9.2-33.2,0c-9.2,9.2-9.2,24,0,33.2c8.1,8.1,20.7,9.1,29.9,2.8  l15.6,16.4c1,1,2.6,1,3.6,0l3.4-3.4C80.3,74.9,80.2,73.3,79.2,72.3z M56,56c-6.9,6.9-18.1,6.9-25,0S24,37.9,31,31s18.1-6.9,25,0  S62.9,49.1,56,56z\");\n\n    searchResultsContainer = searchDiv.append(\"div\").attr(\"class\", \"swarm-chart-search-results\");\n\n    var searchAlphaSort = searchResultsContainer.append(\"div\").attr(\"class\", \"swarm-chart-search-results-alpha-container\");\n\n    searchAlphaSort.append(\"p\").text(\"filter\").attr(\"class\", \"swarm-chart-search-results-alpha-label\");\n\n    searchAlphaSortLetters = searchAlphaSort.append(\"div\").attr(\"class\", \"swarm-chart-search-results-alpha-item-container\").selectAll(\"p\").data([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]).enter().append(\"p\").attr(\"class\", \"swarm-chart-search-results-alpha-item\").text(function (d) {\n      return d;\n    }).on(\"click\", function (d) {\n      alphaSort = d;\n      searchAlphaSortLetters.style(\"color\", function (d) {\n        if (d == alphaSort) {\n          return \"black\";\n        }\n        return null;\n      }).style(\"text-decoration\", function (d) {\n        if (d == alphaSort) {\n          return \"underline\";\n        }\n        return null;\n      });\n\n      searchResults.style(\"display\", function (d) {\n        if (d.value.chars.includes(alphaSort)) {\n          return \"block\";\n        }\n        return \"none\";\n      });\n    });\n\n    function searchAddToChart(node, key) {\n      newsIDSearch = key;\n      node.value.miniChart = -1;\n\n      newsNest.push(node);\n\n      cell = chartG.selectAll(\"g\").data(newsNest, function (d) {\n        return +d.key;\n      });\n\n      var cellEnter = cell.enter().append(\"g\").attr(\"class\", \"swarm-cell-g\");\n\n      console.log(\"5549\");\n      cellEnter.append(\"circle\").attr(\"class\", \"swarm-circle\").attr(\"r\", function (d) {\n        return d.value.radius;\n      }).attr(\"cx\", function (d) {\n        return 0;\n      }).attr(\"cy\", function (d) {\n        return 0;\n      }).on(\"mouseover\", function (d) {\n        var data = d;\n        mouseOverEvents(data, d3.select(this));\n      }).on(\"mouseout\", function (d) {\n        var data = d;\n        mouseOutEvents(data, d3.select(this));\n      }).style(\"fill\", function (d) {\n        return;\n        var value = getPercentType(\"gender\", d.value);\n        return genderColorScale(value);\n        return colorScale(newsMap.get(d.NewsID).value.diff);\n      }).style(\"stroke\", function (d) {\n        var value = getPercentType(\"gender\", d.value);\n        return d3.color(genderColorScale(value)).darker(1);\n      }).style(\"opacity\", 0);\n\n      cellEnter.append(\"g\").attr(\"transform\", function (d, i) {\n        return \"translate(\" + 0 + \",\" + 0 + \")\";\n      }).attr(\"class\", \"swarm-image-container\").append(\"image\").attr(\"class\", \"swarm-image\").attr(\"xlink:href\", function (d) {\n        if (d.value.companyName == \"the new york times\") {\n          return \"assets/ny-times-logo.svg\";\n        }\n        if (d.value.companyName == \"the wall street journal\") {\n          return \"assets/wsj-logo.svg\";\n        }\n        if (d.value.companyName == \"los angeles times\") {\n          return \"assets/la-times-logo.png\";\n        }\n        if (d.value.companyName == \"usa today\") {\n          return \"assets/usa-today-logo.svg\";\n        }\n        return null;\n      }).attr(\"width\", function (d) {\n        return d.value.radius * 2 * .7;\n      }).attr(\"height\", function (d) {\n        return d.value.radius * 2 * .7;\n      });\n\n      cellEnter.append(\"text\").attr(\"x\", function (d, i) {\n        return d.x;\n      }).attr(\"y\", function (d, i) {\n        return d.y;\n      }).attr(\"class\", \"swarm-text\").style(\"opacity\", 0).attr(\"class\", \"swarm-text\").text(function (d) {\n        var text = d.value.companyName.replace(/\\b\\w/g, function (l) {\n          return l.toUpperCase();\n        });\n        return text;\n      });\n\n      cellText.filter(function (d) {\n        return newDataIDs.indexOf(+d.key) == -1;\n      }).append(\"tspan\").attr(\"dx\", 2).text(function (d) {\n        return \"*\";\n      });\n\n      cellEnter.append(\"line\").attr(\"class\", \"swarm-text-dash\").style(\"opacity\", 0);\n\n      cellEnter.append(\"path\").attr(\"class\", \"swarm-line\");\n\n      console.log(\"5650\");\n\n      cellEnter.append(\"circle\").attr(\"class\", \"swarm-circle-two\").attr(\"r\", function (d) {\n        return 4;\n      }).attr(\"cx\", function (d) {\n        return d.x;\n      }).attr(\"cy\", function (d) {\n        return d.y;\n      });\n\n      cell = chartG.selectAll(\".swarm-cell-g\");\n\n      buildChart(currentChart);\n    }\n\n    searchResults = searchResultsContainer.append(\"div\").attr(\"class\", \"swarm-chart-search-results-result-container\").selectAll(\"div\").data(searchDataSet).enter().append(\"div\").attr(\"class\", \"swarm-chart-search-results-result\");\n\n    searchResultText = searchResults.append(\"p\").attr(\"class\", \"swarm-chart-search-results-result-text\").text(function (d) {\n      return d.value.companyName.replace(/\\b\\w/g, function (l) {\n        return l.toUpperCase();\n      });\n    }).on(\"click\", function (d) {\n      var node = d;\n\n      if (urlParamEmbed != \"\") {\n        searchResultsContainer.style(\"display\", null);\n      }\n\n      if (currentChart == \"table\") {\n        getLocations(d);\n      } else {\n        var key = +d.key;\n        var map = newsNest.map(function (d) {\n          return +d.key;\n        }).includes(key);\n\n        if (map) {\n          newsIDSearch = key;\n          buildChart(currentChart);\n        } else {\n          searchAddToChart(node, key);\n        }\n      }\n    });\n\n    var leaderToggleData = [\"all\", \"leader\"];\n    //\n    // toggles\n    //   .append(\"div\")\n    //   .attr(\"class\",\"histogram-chart-toggle-type\")\n    //   .selectAll(\"p\")\n    //   .data(leaderToggleData)\n    //   .enter()\n    //   .append(\"p\")\n    //   .attr(\"class\",function(d,i){\n    //     if(i==0){\n    //       return \"toggle-selected front-curve histogram-chart-toggle-item\";\n    //     }\n    //     if(i==leaderToggleData.length-1){\n    //       return \"back-curve histogram-chart-toggle-item\";\n    //     }\n    //     return \"histogram-chart-toggle-item\";\n    //   })\n    //   .text(function(d){\n    //     if(d==\"all\"){\n    //       return \"All Staff\"\n    //     }\n    //     return \"Leadership\";\n    //   })\n    //   .on(\"click\",function(d){\n    //     var dataSelected = d;\n    //     d3.select(this.parentNode).selectAll(\"p\").classed(\"toggle-selected\",function(d){\n    //       if(d==dataSelected){\n    //         return true;\n    //       }\n    //       return false;\n    //     })\n    //     group = d;\n    //     buildChart(currentChart);\n    //   })\n    //   ;\n  }\n}\n\nexports.default = { init: init };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL3N3YXJtLmpzP2Q1MGMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCBnZW9saWIgZnJvbSAnZ2VvbGliJ1xuaW1wb3J0IGxvY2F0ZSBmcm9tICcuL3V0aWxzL2xvY2F0ZSdcbmltcG9ydCB1cmxQYXJhbWV0ZXIgZnJvbSAnLi91dGlscy91cmwtcGFyYW1ldGVyJ1xuXG52YXIgbW9iaWxlID0gZmFsc2U7XG52YXIgZnVsbFdpZHRoID0gZmFsc2U7XG52YXIgdGFibGV0ID0gZmFsc2U7XG5pZiggL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSApIHtcbiAgbW9iaWxlID0gdHJ1ZTtcbn1cblxudmFyIHZpZXdwb3J0V2lkdGggPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xudmFyIHZpZXdwb3J0SGVpZ2h0ID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG52YXIgY3V0QW1vdW50ID0gNDtcbmlmKHZpZXdwb3J0V2lkdGg8ODAwKXtcbiBjdXRBbW91bnQgPSAzO1xufVxuaWYodmlld3BvcnRXaWR0aDw3MDApe1xuIGN1dEFtb3VudCA9IDI7XG59XG5pZih2aWV3cG9ydFdpZHRoPDUwMCl7XG4gY3V0QW1vdW50ID0gMTtcbn1cblxuY29uc3QgdXJsUGFyYW0gPSB1cmxQYXJhbWV0ZXIuZ2V0KCd2aWV3Jyk7XG5jb25zdCB1cmxQYXJhbUN1dCA9IHVybFBhcmFtZXRlci5nZXQoJ2ZpbHRlcicpO1xuY29uc3QgdXJsUGFyYW1FbWJlZCA9IHVybFBhcmFtZXRlci5nZXQoJ2VtYmVkJyk7XG5cbmNvbnNvbGUubG9nKHVybFBhcmFtRW1iZWQpO1xuXG5pZih1cmxQYXJhbUVtYmVkKXtcbiAgZDMuc2VsZWN0KFwiI2NvbnRlbnRcIikuY2xhc3NlZChcImVtYmVkZGVkXCIsdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIHdyYXBUd28odGV4dCwgd2lkdGgpIHtcbiAgdGV4dC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciB0ZXh0ID0gZDMuc2VsZWN0KHRoaXMpLFxuICAgICAgICB3b3JkcyA9IHRleHQudGV4dCgpLnNwbGl0KC9cXHMrLykucmV2ZXJzZSgpLFxuICAgICAgICB3b3JkLFxuICAgICAgICBsaW5lID0gW10sXG4gICAgICAgIGxpbmVOdW1iZXIgPSAwLFxuICAgICAgICBsaW5lSGVpZ2h0ID0gMS4zLCAvLyBlbXNcbiAgICAgICAgeSA9IHRleHQuYXR0cihcInlcIiksXG4gICAgICAgIGR5ID0gcGFyc2VGbG9hdCh0ZXh0LmF0dHIoXCJkeVwiKSksXG4gICAgICAgIHRzcGFuID0gdGV4dC50ZXh0KG51bGwpLmFwcGVuZChcInRzcGFuXCIpLmF0dHIoXCJ4XCIsIDApLmF0dHIoXCJ5XCIsIHkpLmF0dHIoXCJkeVwiLCBkeSArIFwiZW1cIik7XG4gICAgd2hpbGUgKHdvcmQgPSB3b3Jkcy5wb3AoKSkge1xuICAgICAgbGluZS5wdXNoKHdvcmQpO1xuICAgICAgdHNwYW4udGV4dChsaW5lLmpvaW4oXCIgXCIpKTtcbiAgICAgIGlmICh0c3Bhbi5ub2RlKCkuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCkgPiB3aWR0aCkge1xuICAgICAgICBsaW5lLnBvcCgpO1xuICAgICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbihcIiBcIikpO1xuICAgICAgICBsaW5lID0gW3dvcmRdO1xuICAgICAgICB0c3BhbiA9IHRleHQuYXBwZW5kKFwidHNwYW5cIikuYXR0cihcInhcIiwgMCkuYXR0cihcInlcIiwgeSkuYXR0cihcImR5XCIsICsrbGluZU51bWJlciAqIGxpbmVIZWlnaHQgKyBkeSArIFwiZW1cIikudGV4dCh3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB3cmFwKHRleHQsIHdpZHRoKSB7XG4gIHRleHQuZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgdGV4dCA9IGQzLnNlbGVjdCh0aGlzKSxcbiAgICAgICAgd29yZHMgPSB0ZXh0LnRleHQoKS5zcGxpdCgvXFxzKy8pLnJldmVyc2UoKSxcbiAgICAgICAgd29yZCxcbiAgICAgICAgbGluZSA9IFtdLFxuICAgICAgICBsaW5lTnVtYmVyID0gMCxcbiAgICAgICAgbGluZUhlaWdodCA9IDEuMDUsIC8vIGVtc1xuICAgICAgICB5ID0gdGV4dC5hdHRyKFwieVwiKSxcbiAgICAgICAgZHkgPSBwYXJzZUZsb2F0KHRleHQuYXR0cihcImR5XCIpKSxcbiAgICAgICAgdHNwYW4gPSB0ZXh0LnRleHQobnVsbCkuYXBwZW5kKFwidHNwYW5cIikuYXR0cihcInhcIiwgMCkuYXR0cihcInlcIiwgeSkuYXR0cihcImR5XCIsIGR5ICsgXCJlbVwiKS5zdHlsZShcImZvbnQtd2VpZ2h0XCIsIDUwMCk7XG4gICAgd2hpbGUgKHdvcmQgPSB3b3Jkcy5wb3AoKSkge1xuICAgICAgbGluZS5wdXNoKHdvcmQpO1xuICAgICAgdHNwYW4udGV4dChsaW5lLmpvaW4oXCIgXCIpKTtcbiAgICAgIGlmICh0c3Bhbi5ub2RlKCkuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCkgPiB3aWR0aCkge1xuICAgICAgICBsaW5lLnBvcCgpO1xuICAgICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbihcIiBcIikpO1xuICAgICAgICBsaW5lID0gW3dvcmRdO1xuICAgICAgICB0c3BhbiA9IHRleHQuYXBwZW5kKFwidHNwYW5cIikuc3R5bGUoXCJmb250LXNpemVcIixcIjEycHhcIikuYXR0cihcInhcIiwgMCkuYXR0cihcInlcIiwgeSkuYXR0cihcImR5XCIsICsrbGluZU51bWJlciAqIGxpbmVIZWlnaHQgKyBkeSArIFwiZW1cIikudGV4dCh3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gd3JhcFRocmVlKHRleHQsIHdpZHRoKSB7XG4gIHRleHQuZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgdGV4dCA9IGQzLnNlbGVjdCh0aGlzKSxcbiAgICAgICAgd29yZHMgPSB0ZXh0LnRleHQoKS5zcGxpdCgvXFxzKy8pLnJldmVyc2UoKSxcbiAgICAgICAgd29yZCxcbiAgICAgICAgbGluZSA9IFtdLFxuICAgICAgICBsaW5lTnVtYmVyID0gMCxcbiAgICAgICAgbGluZUhlaWdodCA9IDEuMywgLy8gZW1zXG4gICAgICAgIHkgPSB0ZXh0LmF0dHIoXCJ5XCIpLFxuICAgICAgICBkeSA9IHBhcnNlRmxvYXQodGV4dC5hdHRyKFwiZHlcIikpLFxuICAgICAgICB0c3BhbiA9IHRleHQudGV4dChudWxsKS5hcHBlbmQoXCJ0c3BhblwiKS5hdHRyKFwieFwiLCAwKS5hdHRyKFwieVwiLCB5KS5hdHRyKFwiZHlcIiwgZHkgKyBcImVtXCIpO1xuICAgIHdoaWxlICh3b3JkID0gd29yZHMucG9wKCkpIHtcbiAgICAgIGxpbmUucHVzaCh3b3JkKTtcbiAgICAgIHRzcGFuLnRleHQobGluZS5qb2luKFwiIFwiKSk7XG4gICAgICBpZiAodHNwYW4ubm9kZSgpLmdldENvbXB1dGVkVGV4dExlbmd0aCgpID4gd2lkdGgpIHtcbiAgICAgICAgbGluZS5wb3AoKTtcbiAgICAgICAgdHNwYW4udGV4dChsaW5lLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgbGluZSA9IFt3b3JkXTtcbiAgICAgICAgdHNwYW4gPSB0ZXh0LmFwcGVuZChcInRzcGFuXCIpLmF0dHIoXCJ4XCIsIDApLmF0dHIoXCJ5XCIsIHkpLmF0dHIoXCJkeVwiLCArK2xpbmVOdW1iZXIgKiBsaW5lSGVpZ2h0ICsgZHkgKyBcImVtXCIpLnRleHQod29yZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxudmFyIHN0YXRlcyA9IFtcbiAgW1wiTWFpbmVcIixcIk1FXCIsMSxcIk5vcnRoZWFzdFwiLDIzXSxcbiAgW1wiVmVybW9udFwiLFwiVlRcIiwyLFwiTm9ydGhlYXN0XCIsNTBdLFxuICBbXCJOZXcgSGFtcHNoaXJlXCIsXCJOSFwiLDMsXCJOb3J0aGVhc3RcIiwzM10sXG4gIFtcIlJob2RlIElzbGFuZFwiLFwiUklcIiw0LFwiTm9ydGhlYXN0XCIsNDRdLFxuICBbXCJNYXNzYWNodXNldHRzXCIsXCJNQVwiLDUsXCJOb3J0aGVhc3RcIiwyNV0sXG4gIFtcIkNvbm5lY3RpY3V0XCIsXCJDVFwiLDYsXCJOb3J0aGVhc3RcIiw5XSxcbiAgW1wiRGVsYXdhcmVcIixcIkRFXCIsNyxcIk5vcnRoZWFzdFwiLDEwXSxcbiAgW1wiTmV3IEplcnNleVwiLFwiTkpcIiw4LFwiTm9ydGhlYXN0XCIsMzRdLFxuICBbXCJOZXcgWW9ya1wiLFwiTllcIiw5LFwiTm9ydGhlYXN0XCIsMzZdLFxuICBbXCJQZW5uc3lsdmFuaWFcIixcIlBBXCIsMTAsXCJOb3J0aGVhc3RcIiw0Ml0sXG4gIFtcIkRpc3RyaWN0IG9mIENvbHVtYmlhXCIsXCJEQ1wiLDExLFwiTm9ydGhlYXN0XCIsMTFdLFxuICBbXCJNYXJ5bGFuZFwiLFwiTURcIiwxMixcIk5vcnRoZWFzdFwiLDI0XSxcbiAgW1wiVmlyZ2luaWFcIixcIlZBXCIsMTMsXCJTb3V0aFwiLDUxXSxcbiAgW1wiTm9ydGggQ2Fyb2xpbmFcIixcIk5DXCIsMTQsXCJTb3V0aFwiLDM3XSxcbiAgW1wiU291dGggQ2Fyb2xpbmFcIixcIlNDXCIsMTUsXCJTb3V0aFwiLDQ1XSxcbiAgW1wiR2VvcmdpYVwiLFwiR0FcIiwxNixcIlNvdXRoXCIsMTNdLFxuICBbXCJBbGFiYW1hXCIsXCJBTFwiLDE3LFwiU291dGhcIiwxXSxcbiAgW1wiTWlzc2lzc2lwcGlcIixcIk1TXCIsMTgsXCJTb3V0aFwiLDI4XSxcbiAgW1wiTG91aXNpYW5hXCIsXCJMQVwiLDE5LFwiU291dGhcIiwyMl0sXG4gIFtcIkFya2Fuc2FzXCIsXCJBUlwiLDIwLFwiU291dGhcIiw1XSxcbiAgW1wiVGVubmVzc2VlXCIsXCJUTlwiLDIxLFwiU291dGhcIiw0N10sXG4gIFtcIktlbnR1Y2t5XCIsXCJLWVwiLDIyLFwiU291dGhcIiwyMV0sXG4gIFtcIldlc3QgVmlyZ2luaWFcIixcIldWXCIsMjMsXCJTb3V0aFwiLDU0XSxcbiAgW1wiT2tsYWhvbWFcIixcIk9LXCIsMjQsXCJNaWR3ZXN0XCIsNDBdLFxuICBbXCJDb2xvcmFkb1wiLFwiQ09cIiwyNSxcIldlc3RcIiw4XSxcbiAgW1wiVXRhaFwiLFwiVVRcIiwyNixcIldlc3RcIiw0OV0sXG4gIFtcIklkYWhvXCIsXCJJRFwiLDI3LFwiV2VzdFwiLDE2XSxcbiAgW1wiV3lvbWluZ1wiLFwiV1lcIiwyOCxcIldlc3RcIiw1Nl0sXG4gIFtcIk1vbnRhbmFcIixcIk1UXCIsMjksXCJXZXN0XCIsMzBdLFxuICBbXCJOb3J0aCBEYWtvdGFcIixcIk5EXCIsMzAsXCJNaWR3ZXN0XCIsMzhdLFxuICBbXCJTb3V0aCBEYWtvdGFcIixcIlNEXCIsMzEsXCJNaWR3ZXN0XCIsNDZdLFxuICBbXCJOZWJyYXNrYVwiLFwiTkVcIiwzMixcIk1pZHdlc3RcIiwzMV0sXG4gIFtcIkthbnNhc1wiLFwiS1NcIiwzMyxcIk1pZHdlc3RcIiwyMF0sXG4gIFtcIklvd2FcIixcIklBXCIsMzQsXCJNaWR3ZXN0XCIsMTldLFxuICBbXCJNaW5uZXNvdGFcIixcIk1OXCIsMzUsXCJNaWR3ZXN0XCIsMjddLFxuICBbXCJXaXNjb25zaW5cIixcIldJXCIsMzYsXCJNaWR3ZXN0XCIsNTVdLFxuICBbXCJJbmRpYW5hXCIsXCJJTlwiLDM3LFwiTWlkd2VzdFwiLDE4XSxcbiAgW1wiTWlzc291cmlcIixcIk1PXCIsMzgsXCJNaWR3ZXN0XCIsMjldLFxuICBbXCJPaGlvXCIsXCJPSFwiLDM5LFwiTWlkd2VzdFwiLDM5XSxcbiAgW1wiTWljaGlnYW5cIixcIk1JXCIsNDAsXCJNaWR3ZXN0XCIsMjZdLFxuICBbXCJJbGxpbm9pc1wiLFwiSUxcIiw0MSxcIk1pZHdlc3RcIiwxN10sXG4gIFtcIkZsb3JpZGFcIixcIkZMXCIsNDIsXCJTb3V0aFwiLDEyXSxcbiAgW1wiQ2FsaWZvcm5pYVwiLFwiQ0FcIiw0MyxcIldlc3RcIiw2XSxcbiAgW1wiTmV2YWRhXCIsXCJOVlwiLDQ0LFwiV2VzdFwiLDMyXSxcbiAgW1wiVGV4YXNcIixcIlRYXCIsNDUsXCJTb3V0aFwiLDQ4XSxcbiAgW1wiQXJpem9uYVwiLFwiQVpcIiw0NixcIldlc3RcIiw0XSxcbiAgW1wiTmV3IE1leGljb1wiLFwiTk1cIiw0NyxcIldlc3RcIiwzNV0sXG4gIFtcIkFsYXNrYVwiLFwiQUtcIiw0OCxcIldlc3RcIiwyXSxcbiAgW1wiV2FzaGluZ3RvblwiLFwiV0FcIiw0OSxcIldlc3RcIiw1M10sXG4gIFtcIk9yZWdvblwiLFwiT1JcIiw1MCxcIldlc3RcIiw0MV0sXG4gIFtcIkhhd2FpaVwiLFwiSElcIiw1MSxcIldlc3RcIiwxNV0sXG4gIF1cbiAgO1xuXG5mdW5jdGlvbiBpbml0KHJhd01hcERhdGEsbGF0TG9uZ0RhdGEsbmV3c0lESW5mbyxzdGF0ZVRvcG8sY2Vuc3VzRGF0YSxjZW5zdXNPdmVycmlkZSxuZXdfMjAxOCkge1xuXG4gIC8vIG1hcERhdGEgPSBtYXBEYXRhLmNvbmNhdChuZXdfMjAxOClcblxuXG5cbiAgdmFyIG1lcmdlZERhdGEgPSBbXTtcbiAgdmFyIG5ld0RhdGFJRHMgPSBuZXdfMjAxOC5tYXAoZnVuY3Rpb24oZCl7cmV0dXJuICtkLk5ld3NJRH0pO1xuICB2YXIgb2xkSURzID0gcmF3TWFwRGF0YS5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgcmV0dXJuICtkLlllYXIgPT0gMjAxN1xuICB9KTtcblxuICAvLyBmb3IgKHZhciBuZXdzUm9vbSBpbiBvbGRJRHMpe1xuICAvLyAgIGlmIChuZXdEYXRhSURzLmluZGV4T2YoK29sZElEc1tuZXdzUm9vbV1bXCJOZXdzSURcIl0pID09IC0xKXtcbiAgLy8gICAgIG9sZElEc1tuZXdzUm9vbV1bXCJZZWFyXCJdID0gMjAxODtcbiAgLy8gICAgIG1lcmdlZERhdGEucHVzaChvbGRJRHNbbmV3c1Jvb21dKVxuICAvLyAgIH1cbiAgLy8gfVxuXG4gIG1lcmdlZERhdGEgPSBuZXdfMjAxOC8vbWVyZ2VkRGF0YS5jb25jYXQobmV3XzIwMTgpO1xuXG4gIHZhciBtYXBEYXRhID0gcmF3TWFwRGF0YS5jb25jYXQobWVyZ2VkRGF0YSlcblxuICB2YXIgbmV3VG9nZ2xlRm9yUmFjZUFuZEdlbmRlcjtcbiAgdmFyIGFscGhhU29ydCA9IFwiXCJcbiAgdmFyIHNlYXJjaE1hcDtcbiAgdmFyIGZvb3RlckNvbnRhaW5lcjtcbiAgdmFyIHN0ZXBwZXJDb250YWluZXJUb2dnbGU7XG4gIHZhciBzdGVwcGVyQmFjaztcbiAgdmFyIGNoYXJ0VGFibGVJdGVtO1xuICB2YXIgbWluaU11bHRpcGxlV3JhcHBlcjtcbiAgdmFyIHRvZ2dsZVR5cGU7XG4gIHZhciBtaW5pVGV4dEhlaWdodCA9IDcwO1xuICB2YXIgbWluaU1hcmdpbiA9IHt0b3A6IDAsIHJpZ2h0OiAyMCwgYm90dG9tOiAwLCBsZWZ0OiAyMH07XG4gIHZhciBtaW5pV2lkdGggPSA3MC1taW5pTWFyZ2luLmxlZnQgLSBtaW5pTWFyZ2luLnJpZ2h0O1xuICB2YXIgbWluaUhlaWdodCA9IDkwIC0gbWluaU1hcmdpbi50b3AgLSBtaW5pTWFyZ2luLmJvdHRvbTtcbiAgdmFyIG11bHRpcGxlWSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFsuMiwuNV0pLnJhbmdlKFttaW5pSGVpZ2h0LDBdKTtcbiAgdmFyIGVtYmVkTGlua1RleHQ7XG4gIHZhciBlbWJlZExpbmtJbnB1dDtcbiAgdmFyIGNlbnN1c092ZXJyaWRlTWFwID0gZDMubWFwKGNlbnN1c092ZXJyaWRlLGZ1bmN0aW9uKGQpe1xuICAgIHJldHVybiArZC5uZXdzX2lkO1xuICB9KTtcbiAgdmFyIGV4dGVudE92ZXJyaWRlO1xuXG5cbiAgdmFyIG1hcEJpZyA9IGZhbHNlO1xuICB2YXIgY2Vuc3VzTWFwID0gZDMubWFwKGNlbnN1c0RhdGEsZnVuY3Rpb24oZCl7IHJldHVybiBkLmNpdHlfc3RhdGU7IH0pO1xuICB2YXIgc2VhcmNoSW5wdXQ7XG4gIHZhciBuZXdzSURTZWFyY2ggPSBcIlwiO1xuICB2YXIgc2VhcmNoUmVzdWx0cztcbiAgdmFyIHNlYXJjaFJlc3VsdFRleHQ7XG4gIHZhciBuZXdzSURTZWFyY2hDb2xvciA9IFwiIzczNTRhYlwiXG4gIHZhciBzZWFyY2hBbHBoYVNvcnRMZXR0ZXJzO1xuICB2YXIgc2VhcmNoUmVzdWx0c0NvbnRhaW5lcjtcbiAgdmFyIHllYXJTZWxlY3RlZCA9IDIwMTg7XG4gIHZhciB5ZWFyT2xkID0gMjAwMTtcbiAgdmFyIGN1cnJlbnRDaGFydCA9IFwic3dhcm1cIjtcbiAgdmFyIHByZXZpb3VzQ2hhcnQgPSBcInN3YXJtXCI7XG4gIHZhciBwcmV2aW91c0N1dCA9IFwiZ2VuZGVyXCI7XG4gIHZhciBjdXQgPSBcImdlbmRlclwiO1xuXG4gIGlmKHVybFBhcmFtQ3V0ICE9IFwiXCIpe1xuICAgIHByZXZpb3VzQ3V0ID0gdXJsUGFyYW1DdXQ7XG4gICAgY3V0ID0gdXJsUGFyYW1DdXQ7XG4gIH1cblxuICB2YXIgZ3JvdXAgPSBcImFsbFwiO1xuICB2YXIgbmV3c0lEU2VhcmNoTGlzdCA9ICBbXTtcbiAgdmFyIGNvdW50TWluID0gIDI1O1xuICB2YXIgbW91c2VvdmVyT2Zmc2V0WCA9IDIwO1xuICB2YXIgbW91c2VvdmVyT2Zmc2V0WSA9IC0xNDtcbiAgdmFyIHN0ZXBwZXJTZXF1ZW5jZSA9IFtcInN3YXJtXCIsXCJzd2FybS1zY2F0dGVyXCIsXCJhcnJvdy1zY2F0dGVyXCIsXCJhcnJvdy1zY2F0dGVyLWZ1bGxcIixcInRhYmxlXCJdO1xuICB2YXIgY29tcGFueUltYWdlcyA9IFtcInRoZSBuZXcgeW9yayB0aW1lc1wiLFwidGhlIHdhbGwgc3RyZWV0IGpvdXJuYWxcIixcImxvcyBhbmdlbGVzIHRpbWVzXCIsXCJ1c2EgdG9kYXlcIl1cbiAgdmFyIHRhYmxlRGF0YSA9IFtdO1xuXHRmdW5jdGlvbiBnZXRBdmVyYWdlKGRhdGEpe1xuXG5cdFx0aWYoY3V0ID09IFwiZ2VuZGVyXCIgJiYgZ3JvdXAgPT0gXCJhbGxcIil7XG5cdFx0XHRyZXR1cm4gZDMubWVhbihkYXRhLGZ1bmN0aW9uKGQpe3JldHVybiAoZC50b3RhbF9udW0gLSBkLm1hbGVfbnVtKS8oZC50b3RhbF9udW0pfSk7XG5cdFx0fVxuXHRcdGlmKGN1dCA9PSBcInJhY2VcIiAmJiBncm91cCAhPSBcImFsbFwiKXtcblx0XHRcdHJldHVybiBkMy5tZWFuKGRhdGEsZnVuY3Rpb24oZCl7cmV0dXJuICgrZC50b3RhbF9zdXBfbnVtIC0gK2Qud2hpdGVfc3VwX251bSkvZC50b3RhbF9zdXBfbnVtfSk7XG5cdFx0fVxuXHRcdGlmKGN1dCA9PSBcImdlbmRlclwiICYmIGdyb3VwICE9IFwiYWxsXCIpe1xuXHRcdFx0cmV0dXJuIGQzLm1lYW4oZGF0YSxmdW5jdGlvbihkKXtyZXR1cm4gKCtkLnRvdGFsX3N1cF9udW0gLSArZC5tYWxlX3N1cF9udW0pL2QudG90YWxfc3VwX251bX0pO1xuXHRcdH1cblx0XHRyZXR1cm4gZDMubWVhbihkYXRhLGZ1bmN0aW9uKGQpe3JldHVybiAoK2QudG90YWxfbnVtIC0gK2Qud2hpdGVfbnVtKS9kLnRvdGFsX251bX0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UGVyY2VudChkYXRhKXtcbiAgICBpZihjdXQgPT0gXCJnZW5kZXJcIiAmJiBncm91cCA9PSBcImFsbFwiKXtcbiAgICAgIHJldHVybiArKGRhdGEudG90YWxfbnVtLWRhdGEubWFsZV9udW0pL2RhdGEudG90YWxfbnVtXG5cdFx0fVxuICAgIGlmKGN1dCA9PSBcInJhY2VcIiAmJiBncm91cCAhPSBcImFsbFwiKXtcbiAgICAgIHJldHVybiAoK2RhdGEudG90YWxfc3VwX251bSAtICtkYXRhLndoaXRlX3N1cF9udW0pL2RhdGEudG90YWxfc3VwX251bTtcblx0XHR9XG4gICAgaWYoY3V0ID09IFwiZ2VuZGVyXCIgJiYgZ3JvdXAgIT0gXCJhbGxcIil7XG4gICAgICByZXR1cm4gKCtkYXRhLnRvdGFsX3N1cF9udW0gLSArZGF0YS5tYWxlX3N1cF9udW0pL2RhdGEudG90YWxfc3VwX251bTtcblx0XHR9XG4gICAgcmV0dXJuICgrZGF0YS50b3RhbF9udW0gLSArZGF0YS53aGl0ZV9udW0pL2RhdGEudG90YWxfbnVtXG5cdH1cblxuICBmdW5jdGlvbiBnZXRQZXJjZW50VHlwZShraW5kLGRhdGFTZXQpe1xuICAgIHZhciBkYXRhID0gZGF0YVNldC55ZWFyTWFwLmdldCh5ZWFyU2VsZWN0ZWQpO1xuXG4gICAgaWYoa2luZCA9PSBcImdlbmRlci1vbGRcIil7XG4gICAgICBraW5kID0gXCJnZW5kZXJcIlxuICAgICAgZGF0YSA9IGRhdGFTZXQudmFsdWVzLmZpbHRlcihmdW5jdGlvbihkKXtcbiAgICAgICAgcmV0dXJuICtkLlllYXIgPT0geWVhck9sZDtcbiAgICAgIH0pO1xuICAgICAgaWYoZGF0YS5sZW5ndGg+MCl7XG4gICAgICAgIGRhdGEgPSBkYXRhWzBdO1xuICAgICAgfVxuICAgICAgZWxzZXtcbiAgICAgICAgcmV0dXJuIFwibi9hXCJcbiAgICAgIH1cbiAgICAgIC8vIGRhdGEgPSBkYXRhU2V0LnllYXJNYXAuZ2V0KHllYXJPbGQpXG4gICAgfVxuICAgIGlmKGtpbmQgPT0gXCJyYWNlLW9sZFwiKXtcbiAgICAgIGtpbmQgPSBcInJhY2VcIlxuICAgICAgZGF0YSA9IGRhdGFTZXQudmFsdWVzLmZpbHRlcihmdW5jdGlvbihkKXtcbiAgICAgICAgcmV0dXJuICtkLlllYXIgPT0geWVhck9sZDtcbiAgICAgIH0pO1xuICAgICAgaWYoZGF0YS5sZW5ndGg+MCl7XG4gICAgICAgIGRhdGEgPSBkYXRhWzBdO1xuICAgICAgfVxuICAgICAgZWxzZXtcbiAgICAgICAgcmV0dXJuIFwibi9hXCJcbiAgICAgIH1cbiAgICAgIC8vIGRhdGEgPSBkYXRhU2V0LnllYXJNYXAuZ2V0KHllYXJPbGQpXG4gICAgfVxuICAgIGlmKGtpbmQgPT0gXCJ3aGl0ZS1vbGRcIil7XG4gICAgICBraW5kID0gXCJ3aGl0ZVwiXG4gICAgICBkYXRhID0gZGF0YVNldC52YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICByZXR1cm4gK2QuWWVhciA9PSB5ZWFyT2xkO1xuICAgICAgfSk7XG4gICAgICBpZihkYXRhLmxlbmd0aD4wKXtcbiAgICAgICAgZGF0YSA9IGRhdGFbMF07XG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICByZXR1cm4gXCJuL2FcIlxuICAgICAgfVxuICAgICAgLy8gZGF0YSA9IGRhdGFTZXQueWVhck1hcC5nZXQoeWVhck9sZClcbiAgICB9XG4gICAgaWYoa2luZCA9PSBcImJsYWNrLW9sZFwiKXtcbiAgICAgIGtpbmQgPSBcImJsYWNrXCJcbiAgICAgIGRhdGEgPSBkYXRhU2V0LnZhbHVlcy5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgICAgIHJldHVybiArZC5ZZWFyID09IHllYXJPbGQ7XG4gICAgICB9KTtcbiAgICAgIGlmKGRhdGEubGVuZ3RoPjApe1xuICAgICAgICBkYXRhID0gZGF0YVswXTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIHJldHVybiBcIm4vYVwiXG4gICAgICB9XG4gICAgICAvLyBkYXRhID0gZGF0YVNldC55ZWFyTWFwLmdldCh5ZWFyT2xkKVxuICAgIH1cbiAgICBpZihraW5kID09IFwiaGlzcC1vbGRcIil7XG4gICAgICBraW5kID0gXCJoaXNwXCJcbiAgICAgIGRhdGEgPSBkYXRhU2V0LnZhbHVlcy5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgICAgIHJldHVybiArZC5ZZWFyID09IHllYXJPbGQ7XG4gICAgICB9KTtcbiAgICAgIGlmKGRhdGEubGVuZ3RoPjApe1xuICAgICAgICBkYXRhID0gZGF0YVswXTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIHJldHVybiBcIm4vYVwiXG4gICAgICB9XG4gICAgICAvLyBkYXRhID0gZGF0YVNldC55ZWFyTWFwLmdldCh5ZWFyT2xkKVxuICAgIH1cbiAgICBpZihraW5kID09IFwiYXNpYW4tb2xkXCIpe1xuICAgICAga2luZCA9IFwiYXNpYW5cIlxuICAgICAgZGF0YSA9IGRhdGFTZXQudmFsdWVzLmZpbHRlcihmdW5jdGlvbihkKXtcbiAgICAgICAgcmV0dXJuICtkLlllYXIgPT0geWVhck9sZDtcbiAgICAgIH0pO1xuICAgICAgaWYoZGF0YS5sZW5ndGg+MCl7XG4gICAgICAgIGRhdGEgPSBkYXRhWzBdO1xuICAgICAgfVxuICAgICAgZWxzZXtcbiAgICAgICAgcmV0dXJuIFwibi9hXCJcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoa2luZCA9PSBcInN1cC13aGl0ZS1vbGRcIil7XG4gICAgICBraW5kID0gXCJzdXBXaGl0ZVJhd1wiXG4gICAgICBkYXRhID0gZGF0YVNldC52YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICByZXR1cm4gK2QuWWVhciA9PSB5ZWFyT2xkO1xuICAgICAgfSk7XG4gICAgICBpZihkYXRhLmxlbmd0aD4wKXtcbiAgICAgICAgZGF0YSA9IGRhdGFbMF07XG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICByZXR1cm4gXCJuL2FcIlxuICAgICAgfVxuICAgICAgLy8gZGF0YSA9IGRhdGFTZXQueWVhck1hcC5nZXQoeWVhck9sZClcbiAgICB9XG4gICAgaWYoa2luZCA9PSBcInN1cC1nZW5kZXItb2xkXCIpe1xuICAgICAga2luZCA9IFwic3VwR2VuZGVyXCJcbiAgICAgIGRhdGEgPSBkYXRhU2V0LnZhbHVlcy5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgICAgIHJldHVybiArZC5ZZWFyID09IHllYXJPbGQ7XG4gICAgICB9KTtcbiAgICAgIGlmKGRhdGEubGVuZ3RoPjApe1xuICAgICAgICBkYXRhID0gZGF0YVswXTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIHJldHVybiBcIm4vYVwiXG4gICAgICB9XG4gICAgICAvLyBkYXRhID0gZGF0YVNldC55ZWFyTWFwLmdldCh5ZWFyT2xkKVxuICAgIH1cbiAgICBpZihraW5kID09IFwic3VwLWJsYWNrLW9sZFwiKXtcbiAgICAgIGtpbmQgPSBcInN1cEJsYWNrXCJcbiAgICAgIGRhdGEgPSBkYXRhU2V0LnZhbHVlcy5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgICAgIHJldHVybiArZC5ZZWFyID09IHllYXJPbGQ7XG4gICAgICB9KTtcbiAgICAgIGlmKGRhdGEubGVuZ3RoPjApe1xuICAgICAgICBkYXRhID0gZGF0YVswXTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIHJldHVybiBcIm4vYVwiXG4gICAgICB9XG4gICAgICAvLyBkYXRhID0gZGF0YVNldC55ZWFyTWFwLmdldCh5ZWFyT2xkKVxuICAgIH1cbiAgICBpZihraW5kID09IFwic3VwLWhpc3Atb2xkXCIpe1xuICAgICAga2luZCA9IFwic3VwSGlzcFwiXG4gICAgICBkYXRhID0gZGF0YVNldC52YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICByZXR1cm4gK2QuWWVhciA9PSB5ZWFyT2xkO1xuICAgICAgfSk7XG4gICAgICBpZihkYXRhLmxlbmd0aD4wKXtcbiAgICAgICAgZGF0YSA9IGRhdGFbMF07XG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICByZXR1cm4gXCJuL2FcIlxuICAgICAgfVxuICAgICAgLy8gZGF0YSA9IGRhdGFTZXQueWVhck1hcC5nZXQoeWVhck9sZClcbiAgICB9XG4gICAgaWYoa2luZCA9PSBcInN1cC1hc2lhbi1vbGRcIil7XG4gICAgICBraW5kID0gXCJzdXBBc2lhblwiXG4gICAgICBkYXRhID0gZGF0YVNldC52YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICByZXR1cm4gK2QuWWVhciA9PSB5ZWFyT2xkO1xuICAgICAgfSk7XG4gICAgICBpZihkYXRhLmxlbmd0aD4wKXtcbiAgICAgICAgZGF0YSA9IGRhdGFbMF07XG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICByZXR1cm4gXCJuL2FcIlxuICAgICAgfVxuICAgICAgLy8gZGF0YSA9IGRhdGFTZXQueWVhck1hcC5nZXQoeWVhck9sZClcbiAgICB9XG4gICAgaWYoa2luZCA9PSBcImdlbmRlclwiKXtcbiAgICAgIHJldHVybiArKGRhdGEudG90YWxfbnVtLWRhdGEubWFsZV9udW0pL2RhdGEudG90YWxfbnVtXG4gICAgfVxuICAgIGlmKGtpbmQgPT0gXCJzdXBXaGl0ZVwiKXtcbiAgICAgIHJldHVybiAoK2RhdGEudG90YWxfc3VwX251bSAtICtkYXRhLndoaXRlX3N1cF9udW0pL2RhdGEudG90YWxfc3VwX251bTtcbiAgICB9XG4gICAgaWYoa2luZCA9PSBcInN1cEJsYWNrXCIpe1xuICAgICAgcmV0dXJuICgrZGF0YS5ibGFja19zdXBfbnVtKS9kYXRhLnRvdGFsX3N1cF9udW07XG4gICAgfVxuICAgIGlmKGtpbmQgPT0gXCJzdXBIaXNwXCIpe1xuICAgICAgcmV0dXJuICgrZGF0YS5oaXNwX3N1cF9udW0pL2RhdGEudG90YWxfc3VwX251bTtcbiAgICB9XG4gICAgaWYoa2luZCA9PSBcInN1cEFzaWFuXCIpe1xuICAgICAgcmV0dXJuICgrZGF0YS5hc2lhbl9zdXBfbnVtKS9kYXRhLnRvdGFsX3N1cF9udW07XG4gICAgfVxuICAgIGlmKGtpbmQgPT0gXCJzdXBXaGl0ZUFkanVzdGVkXCIpe1xuICAgICAgdmFyIHJhY2VQb2ludCA9ICgoK2RhdGEudG90YWxfc3VwX251bSAtICtkYXRhLndoaXRlX3N1cF9udW0pL2RhdGEudG90YWxfc3VwX251bSkgLSAoMS1kYXRhU2V0LndoaXRlQ2Vuc3VzKTtcbiAgICAgIHJldHVybiByYWNlUG9pbnQ7XG4gICAgfVxuICAgIGlmKGtpbmQgPT0gXCJzdXBHZW5kZXJcIil7XG4gICAgICByZXR1cm4gKCtkYXRhLnRvdGFsX3N1cF9udW0gLSArZGF0YS5tYWxlX3N1cF9udW0pL2RhdGEudG90YWxfc3VwX251bTtcbiAgICB9XG4gICAgaWYoa2luZCA9PSBcInJhY2VSYXdcIil7XG4gICAgICByZXR1cm4gKCgrZGF0YS50b3RhbF9udW0gLSArZGF0YS53aGl0ZV9udW0pL2RhdGEudG90YWxfbnVtKVxuICAgIH1cbiAgICBpZihraW5kID09IFwid2hpdGVcIil7XG4gICAgICByZXR1cm4gKyhkYXRhLndoaXRlX251bSkvZGF0YS50b3RhbF9udW07XG4gICAgfVxuICAgIGlmKGtpbmQgPT0gXCJibGFja1wiKXtcbiAgICAgIHJldHVybiArKGRhdGEuYmxhY2tfbnVtKS9kYXRhLnRvdGFsX251bTtcbiAgICB9XG4gICAgaWYoa2luZCA9PSBcImhpc3BcIil7XG4gICAgICByZXR1cm4gKyhkYXRhLmhpc3BfbnVtKS9kYXRhLnRvdGFsX251bTtcbiAgICB9XG4gICAgaWYoa2luZCA9PSBcImFzaWFuXCIpe1xuICAgICAgcmV0dXJuICsoZGF0YS5hc2lhbl9udW0pL2RhdGEudG90YWxfbnVtO1xuICAgIH1cbiAgICBpZihraW5kID09IFwic3VwV2hpdGVSYXdcIil7XG4gICAgICByZXR1cm4gKCtkYXRhLndoaXRlX3N1cF9udW0pL2RhdGEudG90YWxfc3VwX251bTtcbiAgICB9XG4gICAgaWYoa2luZCA9PSBcImdlbmRlclN0YWZmXCIpe1xuXG4gICAgICByZXR1cm4gKyhkYXRhLnRvdGFsX251bS1kYXRhLm1hbGVfbnVtLSgrZGF0YS50b3RhbF9zdXBfbnVtIC0gK2RhdGEubWFsZV9zdXBfbnVtKSkvKGRhdGEudG90YWxfbnVtLWRhdGEudG90YWxfc3VwX251bSlcbiAgICB9XG4gICAgaWYoa2luZCA9PSBcInJhY2VTdGFmZlwiKXtcbiAgICAgIHJldHVybiAoK2RhdGEudG90YWxfbnVtIC0gK2RhdGEud2hpdGVfbnVtIC0gKCtkYXRhLnRvdGFsX3N1cF9udW0gLSArZGF0YS53aGl0ZV9zdXBfbnVtKSkvKGRhdGEudG90YWxfbnVtIC0gZGF0YS50b3RhbF9zdXBfbnVtKVxuICAgIH1cbiAgICBpZihraW5kID09IFwid2hpdGVTdGFmZlwiKXtcbiAgICAgIHJldHVybiAoK2RhdGEud2hpdGVfbnVtIC0gK2RhdGEud2hpdGVfc3VwX251bSkvKGRhdGEudG90YWxfbnVtIC0gZGF0YS50b3RhbF9zdXBfbnVtKVxuICAgIH1cbiAgICBpZihraW5kID09IFwiYmxhY2tTdGFmZlwiKXtcbiAgICAgIHJldHVybiAoK2RhdGEuYmxhY2tfbnVtIC0gK2RhdGEuYmxhY2tfc3VwX251bSkvKGRhdGEudG90YWxfbnVtIC0gZGF0YS50b3RhbF9zdXBfbnVtKVxuICAgIH1cbiAgICBpZihraW5kID09IFwiaGlzcFN0YWZmXCIpe1xuICAgICAgcmV0dXJuICgrZGF0YS5oaXNwX251bSAtICtkYXRhLmhpc3Bfc3VwX251bSkvKGRhdGEudG90YWxfbnVtIC0gZGF0YS50b3RhbF9zdXBfbnVtKVxuICAgIH1cbiAgICBpZihraW5kID09IFwiYXNpYW5TdGFmZlwiKXtcbiAgICAgIHJldHVybiAoK2RhdGEuYXNpYW5fbnVtIC0gK2RhdGEuYXNpYW5fc3VwX251bSkvKGRhdGEudG90YWxfbnVtIC0gZGF0YS50b3RhbF9zdXBfbnVtKVxuICAgIH1cbiAgICB2YXIgcmFjZVBvaW50ID0gKCgrZGF0YS50b3RhbF9udW0gLSArZGF0YS53aGl0ZV9udW0pL2RhdGEudG90YWxfbnVtKSAtICgxLWRhdGFTZXQud2hpdGVDZW5zdXMpO1xuICAgIHJldHVybiByYWNlUG9pbnQ7XG4gIH1cblxuICBuZXdzSURJbmZvLmZvckVhY2goZnVuY3Rpb24oZCl7XG4gICAgdmFyIGZpcnN0ID0gZC5Db21wYW55LmNoYXJBdCgwKTtcbiAgICB2YXIgc2Vjb25kID0gXCJcIjtcbiAgICBpZihkLkNvbXBhbnkuc3BsaXQoXCIgXCIpLmxlbmd0aCA+IDEpe1xuICAgICAgc2Vjb25kID0gZC5Db21wYW55LnNwbGl0KFwiIFwiKVsxXS5jaGFyQXQoMClcbiAgICB9XG4gICAgZC5jaGFycyA9IFtmaXJzdCxzZWNvbmRdO1xuXG4gICAgdmFyIG92ZXJyaWRlID0ge307XG4gICAgdmFyIGhhc092ZXJyaWRlID0gZmFsc2U7XG4gICAgaWYoY2Vuc3VzT3ZlcnJpZGVNYXAuaGFzKCtkLk5ld3NJRCkpe1xuICAgICAgb3ZlcnJpZGUgPSBjZW5zdXNPdmVycmlkZU1hcC5nZXQoK2QuTmV3c0lEKTtcbiAgICAgIGhhc092ZXJyaWRlID0gdHJ1ZTtcbiAgICB9XG4gICAgZC5vdmVycmlkZSA9IG92ZXJyaWRlO1xuICAgIGQuaGFzT3ZlcnJpZGUgPSBoYXNPdmVycmlkZTtcbiAgfSlcblxuXHR2YXIgbGF0TG9uZ01hcCA9IGQzLm1hcChsYXRMb25nRGF0YS5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgcmV0dXJuIGQubG5nICE9IFwiTlVMTFwiO1xuICB9KSxmdW5jdGlvbihkKXsgcmV0dXJuIGQuTmV3c0lEfSk7XG4gIHZhciBuZXdzSUROYW1lID0gZDMubWFwKG5ld3NJREluZm8sZnVuY3Rpb24oZCl7IHJldHVybiBkLk5ld3NJRH0pO1xuXHR2YXIgcmVnaW9uTWFwID0gZDMubWFwKHN0YXRlcyxmdW5jdGlvbihkKXtcblx0XHRyZXR1cm4gZFsxXTtcblx0fSk7XG5cbiAgdmFyIG5ld3NJZFNlbGVjdGVkID0gMTA4O1xuXG4gIHZhciBtYXJnaW4gPSB7dG9wOiA0MCwgcmlnaHQ6IDIwLCBib3R0b206IDcwLCBsZWZ0OiAyMH07XG4gIHZhciB3aWR0aCA9IDEwMDAgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgdmFyIGhlaWdodCA9IDMwMCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICB2YXIgY29udGFpbmVyID0gZDMuc2VsZWN0KFwiLnN3YXJtXCIpO1xuICBpZih2aWV3cG9ydFdpZHRoIDwgMTAwMCl7XG4gICAgd2lkdGggPSB2aWV3cG9ydFdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gIH1cbiAgaWYodmlld3BvcnRXaWR0aCA8IDQwMCB8fCBtb2JpbGUpe1xuICAgIGhlaWdodCA9IDQwMCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICB9XG5cbiAgdmFyIGNoYXJ0VG9wU2VjdGlvbiA9IGNvbnRhaW5lci5hcHBlbmQoXCJkaXZcIilcbiAgICAuYXR0cihcImNsYXNzXCIsXCJjaGFydC10b3Atc2VjdGlvblwiKVxuICAgIDtcblxuICBmdW5jdGlvbiBidWlsZFN0ZXBwZXIoKXtcblxuICAgIHZhciBzdGVwcGVyQ29udGFpbmVyID0gY2hhcnRUb3BTZWN0aW9uXG4gICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJzdGVwcGVyLWNvbnRhaW5lclwiKVxuXG4gICAgdmFyIHN0ZXBwZXJUZXh0QXJyYXkgPSBbXG4gICAgICBcIlRoZSBOZXdzcGFwZXIgRGl2ZXJzaXR5IFN1cnZleSBtZWFzdXJlcyB0aGUgcGVyY2VudGFnZSBvZiB3b21lbiBhbmQgbWlub3JpdGllcyB3b3JraW5nIGluIFVTIG5ld3Nyb29tcy4gVGhlIHJlc3VsdHM8c3BhbiBjbGFzcz0nbm90ZS1uZXctZGF0YSc+Kjwvc3Bhbj4gZnJvbSBcIit5ZWFyU2VsZWN0ZWQrXCImcnNxdW87cyBzdXJ2ZXkgYXJlIGluLlwiLFxuICAgICAgXCJOZXdzcm9vbXMgYXJlIGFib3V0IDMyIHBlcmNldGFnZSBwb2ludHMgbW9yZSB3aGl0ZSB0aGFuIHRoZSBhdWRpZW5jZSB0aGV5IHJlcG9ydCBvbi5cIixcbiAgICAgIFwiV2hlbiBtZWFzdXJpbmcgbGVhZGVyc2hpcCwgbmV3c3Jvb21zIHdpdGggbW9yZSBkaXZlcnNpdHkgdGVuZGVkIHRvIGFsc28gaGF2ZSBkaXZlcnNlIHN0YWZmcy5cIixcbiAgICAgIFwiY2hhbmdlIG92ZXIgdGltZVwiLFxuICAgICAgXCJjaGFuZ2Ugb3ZlciB0aW1lIDJcIlxuICAgIF07XG5cbiAgICB2YXIgc3RlcHBlclRleHQgPSBzdGVwcGVyQ29udGFpbmVyXG4gICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJzdGVwcGVyLWNvbnRhaW5lci10ZXh0LWNvbnRhaW5lclwiKVxuICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN0ZXBwZXItY29udGFpbmVyLXRleHRcIilcbiAgICAgIC5odG1sKGZ1bmN0aW9uKGQpe1xuICAgICAgICByZXR1cm4gc3RlcHBlclRleHRBcnJheVswXTtcbiAgICAgIH0pXG4gICAgICA7XG5cbiAgICBzdGVwcGVyQ29udGFpbmVyVG9nZ2xlID0gc3RlcHBlckNvbnRhaW5lci5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN0ZXBwZXItdG9nZ2xlLXJvd1wiKVxuICAgICAgO1xuXG4gICAgZnVuY3Rpb24gY2hhbmdlU3RlcHBlcihkaXJlY3Rpb24pe1xuXG4gICAgICBzdGVwcGVyUGxheUljb25cbiAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLFwibm9uZVwiKTtcblxuICAgICAgc3RlcHBlclBsYXlUZXh0XG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKDc1MClcbiAgICAgICAgLnRleHQoXCJMb2FkaW5nLi4uXCIpXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKDI1MClcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLDApXG4gICAgICAgIC5vbihcImVuZFwiLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgc3RlcHBlclBsYXlJY29uXG4gICAgICAgICAgICAuc3R5bGUoXCJkaXNwbGF5XCIsXCJibG9ja1wiKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oMjUwKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsMSlcbiAgICAgICAgLnRleHQoXCJSZXN1bWVcIilcblxuICAgICAgdmFyIHByZXZpb3VzO1xuXG4gICAgICBzdGVwcGVyQ29udGFpbmVyVG9nZ2xlQ29udGFpbmVyU3RlcHNcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBpZihkMy5zZWxlY3QodGhpcykuY2xhc3NlZChcInN0ZXBwZXItaXRlbS1zZWxlY3RlZFwiKT09dHJ1ZSl7XG4gICAgICAgICAgICBwcmV2aW91cyA9IGk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIGlmKHByZXZpb3VzPT00ICYmIGRpcmVjdGlvbiA9PSBcImZvcndhcmRcIil7XG4gICAgICAgIHByZXZpb3VzID0gLTE7XG4gICAgICB9XG5cbiAgICAgIGlmKGRpcmVjdGlvbiA9PSBcImZvcndhcmRcIil7XG4gICAgICAgIGN1cnJlbnRDaGFydCA9IHN0ZXBwZXJTZXF1ZW5jZVtwcmV2aW91cysxXVxuICAgICAgICBzdGVwcGVyQ29udGFpbmVyVG9nZ2xlQ29udGFpbmVyU3RlcHMuY2xhc3NlZChcInN0ZXBwZXItaXRlbS1zZWxlY3RlZFwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgaWYoZD09Y3VycmVudENoYXJ0ICYmIGkgPT0gcHJldmlvdXMrMSl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIGN1cnJlbnRDaGFydCA9IHN0ZXBwZXJTZXF1ZW5jZVtwcmV2aW91cy0xXVxuICAgICAgICBzdGVwcGVyQ29udGFpbmVyVG9nZ2xlQ29udGFpbmVyU3RlcHMuY2xhc3NlZChcInN0ZXBwZXItaXRlbS1zZWxlY3RlZFwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgaWYoZD09Y3VycmVudENoYXJ0ICYmIGkgPT0gcHJldmlvdXMtMSl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIH1cblxuICAgICAgYnVpbGRDaGFydChjdXJyZW50Q2hhcnQpO1xuXG4gICAgfVxuXG4gICAgc3RlcHBlckJhY2sgPSBzdGVwcGVyQ29udGFpbmVyVG9nZ2xlLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3RlcHBlci1iYWNrXCIpXG4gICAgICAub24oXCJjbGlja1wiLGZ1bmN0aW9uKGQpe1xuICAgICAgICBjaGFuZ2VTdGVwcGVyKFwiYmFja3dhcmRcIik7XG4gICAgICB9KVxuICAgICAgO1xuICAgIHZhciBzdGVwcGVyUGxheSA9IHN0ZXBwZXJDb250YWluZXJUb2dnbGUuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJzdGVwcGVyLXBsYXktYnV0dG9uXCIpXG4gICAgICAub24oXCJjbGlja1wiLGZ1bmN0aW9uKGQpe1xuICAgICAgICBjaGFuZ2VTdGVwcGVyKFwiZm9yd2FyZFwiKTtcbiAgICAgIH0pXG4gICAgICA7XG5cbiAgICBzdGVwcGVyQmFja1xuICAgICAgLmFwcGVuZChcInN2Z1wiKVxuICAgICAgLmF0dHIoXCJ2aWV3Qm94XCIsXCIwIDAgMjQgMTRcIilcbiAgICAgIC5hdHRyKFwid2lkdGhcIixcIjEwMCVcIilcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsXCIxMDAlXCIpXG4gICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgLmF0dHIoXCJkXCIsXCJNMCA3LjAwMmEuOTk5Ljk5OSAwIDAgMCAuMjg2LjY5M2wuMDA2LjAxMiA2IDZhMSAxIDAgMCAwIDEuNDE0LTEuNDE0TDMuNDE0IDcuOTk4SDIzYTEgMSAwIDAgMCAwLTJIMy40MTRsNC4yOTItNC4yOTFBMSAxIDAgMCAwIDYuMjkyLjI5M2wtNiA2LS4wMDYuMDFhLjk3OC45NzggMCAwIDAtLjIwOC4zMTMuOTc0Ljk3NCAwIDAgMC0uMDc4LjM4MnYuMDA0elwiKVxuICAgICAgO1xuXG4gICAgdmFyIHN0ZXBwZXJQbGF5SWNvbiA9IHN0ZXBwZXJQbGF5LmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3RlcHBlci1hcnJvd1wiKVxuICAgICAgO1xuXG4gICAgdmFyIHN0ZXBwZXJQbGF5VGV4dCA9IHN0ZXBwZXJQbGF5LmFwcGVuZChcInBcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN0ZXBwZXItcGxheS10ZXh0XCIpXG4gICAgICAudGV4dChcIlN0YXJ0XCIpXG4gICAgICA7XG5cbiAgICB2YXIgc3RlcHBlckNvbnRhaW5lclRvZ2dsZUNvbnRhaW5lciA9IHN0ZXBwZXJDb250YWluZXJUb2dnbGVcbiAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN0ZXBwZXItaXRlbS1jb250YWluZXJcIilcblxuICAgIHZhciB0b2dnbGVUZXh0ID0gW1wiVmlldyBcIit5ZWFyU2VsZWN0ZWQrXCIgPHNwYW4+R2VuZGVyPC9zcGFuPiBhbmQgPHNwYW4+UmFjZTwvc3Bhbj4gRGF0YVwiLFwiSG93IExlYWRlcnNoaXAgQ29tcGFyZXNcIixcIkhvdyBUb3AgTmV3c3Jvb21zIENoYW5nZWRcIixcIk92ZXJhbGwgQ2hhbmdlIGZvciBBbGwgTmV3c3Jvb21zXCIsXCJJbmRpdmlkdWFsIE5ld3Nyb29tIERlbW9ncmFwaGljc1wiXTtcblxuICAgIHZhciBzdGVwTnVtVG9UZXh0ID0gW3llYXJTZWxlY3RlZCtcIiByZXN1bHRzXCIsXCJMZWFkZXJzaGlwXCIseWVhck9sZCtcIiB2cy4gXCIreWVhclNlbGVjdGVkK1wiOiBUb3AgTmV3c3Jvb21zXCIsXCJPdmVyYWxsIENoYW5nZVwiLFwiTXkgTmV3c3Jvb21cIl07XG5cbiAgICBpZih2aWV3cG9ydFdpZHRoIDwgNjIwKXtcbiAgICAgIHN0ZXBOdW1Ub1RleHQgPSBbeWVhclNlbGVjdGVkK1wiIFJlc3VsdHNcIixcIk5ld3Nyb29tIExlYWRlcnNcIixcIlRvcCBOZXdzcm9vbXNcIixcIkNoYW5nZVwiLFwiTXkgTmV3c3Jvb21cIl07XG4gICAgfVxuXG4gICAgdmFyIHN0ZXBwZXJDb250YWluZXJUb2dnbGVDb250YWluZXJTdGVwcyA9IHN0ZXBwZXJDb250YWluZXJUb2dnbGVDb250YWluZXJcbiAgICAgIC5zZWxlY3RBbGwoXCJkaXZcIilcbiAgICAgIC5kYXRhKHN0ZXBwZXJTZXF1ZW5jZSlcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgaWYodXJsUGFyYW0gIT0gXCJcIil7XG4gICAgICAgICAgaWYoaT09dXJsUGFyYW0pe1xuICAgICAgICAgICAgcmV0dXJuIFwic3RlcHBlci1pdGVtIHN0ZXBwZXItaXRlbS1zZWxlY3RlZFwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgaWYoaT09MCl7XG4gICAgICAgICAgICByZXR1cm4gXCJzdGVwcGVyLWl0ZW0gc3RlcHBlci1pdGVtLXNlbGVjdGVkXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCJzdGVwcGVyLWl0ZW1cIlxuICAgICAgfSlcbiAgICAgIC5odG1sKGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgIGlmKGk9PTQpe1xuICAgICAgICAgIHJldHVybiBcIjxzcGFuIGNsYXNzPSdzdGVwcGVyLXRleHQnPlwiK3N0ZXBOdW1Ub1RleHRbaV0rXCI8L3NwYW4+XCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiPHNwYW4gY2xhc3M9J3N0ZXBwZXItdGV4dCc+XCIrc3RlcE51bVRvVGV4dFtpXStcIjwvc3Bhbj5cIiArIFwiPHNwYW4gY2xhc3M9J3N0ZXBwZXItYmFyJz4gfCA8L3NwYW4+XCI7XG4gICAgICAgIC8vIHJldHVybiBpKzE7XG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgdmFyIGl0ZW0gPSBpO1xuICAgICAgICB2YXIgZGF0YVNlbGVjdGVkID0gZDtcbiAgICAgICAgc3RlcHBlckNvbnRhaW5lclRvZ2dsZUNvbnRhaW5lckhvdmVyXG4gICAgICAgICAgLnN0eWxlKFwidmlzaWJpbGl0eVwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICBpZiAoZCA9PSBkYXRhU2VsZWN0ZWQgJiYgIW1vYmlsZSl7XG4gICAgICAgICAgICAgIHJldHVybiBcInZpc2libGVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuaHRtbChmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmV0dXJuIHRvZ2dsZVRleHRbaXRlbV07XG4gICAgICAgICAgfSlcbiAgICAgICAgICA7XG4gICAgICB9KVxuICAgICAgLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbigpe1xuICAgICAgICBzdGVwcGVyQ29udGFpbmVyVG9nZ2xlQ29udGFpbmVySG92ZXIuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsbnVsbCk7XG4gICAgICB9KVxuICAgICAgLm9uKFwiY2xpY2tcIixmdW5jdGlvbihkLGkpe1xuXG4gICAgICAgIGVtYmVkTGlua1RleHQudGV4dChcIkVtYmVkIHRoaXMgY2hhcnRcIik7XG4gICAgICAgIGVtYmVkTGlua0lucHV0LnN0eWxlKFwiZGlzcGxheVwiLG51bGwpO1xuXG4gICAgICAgIHVybFBhcmFtZXRlci5zZXQoJ3ZpZXcnLCBpKTtcblxuICAgICAgICB2YXIgbnVtID0gaTtcblxuICAgICAgICAvLyBzdGVwcGVyVGV4dFxuICAgICAgICAvLyAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLy8gICAuZHVyYXRpb24oNTAwKVxuICAgICAgICAvLyAgIC5zdHlsZShcIm9wYWNpdHlcIiwwKVxuICAgICAgICAvLyAgIC5vbihcImVuZFwiLGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICBzdGVwcGVyVGV4dC50ZXh0KHN0ZXBwZXJUZXh0QXJyYXlbaV0pXG4gICAgICAgIC8vICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLy8gICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgICAgLy8gICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLDEpXG4gICAgICAgIC8vICAgICAgIDtcbiAgICAgICAgLy8gICB9KTtcblxuICAgICAgICB2YXIgZGF0YVNlbGVjdGVkID0gZDtcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMucGFyZW50Tm9kZSkuc2VsZWN0QWxsKFwiLnN0ZXBwZXItaXRlbVwiKS5jbGFzc2VkKFwic3RlcHBlci1pdGVtLXNlbGVjdGVkXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBpZihpPT1udW0pe1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSlcbiAgICAgICAgY3VycmVudENoYXJ0ID0gZDtcbiAgICAgICAgYnVpbGRDaGFydChkKTtcbiAgICAgIH0pXG4gICAgICA7XG5cbiAgICB2YXIgc3RlcHBlckNvbnRhaW5lclRvZ2dsZUNvbnRhaW5lckhvdmVyID0gc3RlcHBlckNvbnRhaW5lclRvZ2dsZUNvbnRhaW5lclN0ZXBzXG4gICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJzdGVwcGVyLWl0ZW0taG92ZXJcIilcbiAgICAgIC5odG1sKGZ1bmN0aW9uKGQpe1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH0pXG4gICAgICA7XG5cblxuICB9XG4gIGJ1aWxkU3RlcHBlcigpO1xuXG4gIGZ1bmN0aW9uIHNlYXJjaFNwZWN0cnVtKCl7XG5cbiAgICAvLyB2YXIgc2VhcmNoRGl2ID0gdG9nZ2xlcy5hcHBlbmQoXCJkaXZcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXNlYXJjaC1kaXZcIilcbiAgICAvL1xuICAgIC8vIHNlYXJjaERpdlxuICAgIC8vICAgLmFwcGVuZChcImlucHV0XCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC1zZWFyY2hcIilcbiAgICAvLyAgIC5hdHRyKFwicGxhY2Vob2xkZXJcIixcIkZpbmQgYSBOZXdzcm9vbVwiKVxuICAgIC8vICAgLm9uKFwiZm9jdXNcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgc2VhcmNoUmVzdWx0c0NvbnRhaW5lci5zdHlsZShcImRpc3BsYXlcIixcImJsb2NrXCIpXG4gICAgLy8gICB9KVxuICAgIC8vICAgLm9uKFwiZm9jdXNvdXRcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgc2VhcmNoUmVzdWx0c0NvbnRhaW5lci5zdHlsZShcImRpc3BsYXlcIixudWxsKVxuICAgIC8vICAgfSlcbiAgICAvLyAgIDtcbiAgICAvL1xuICAgIC8vIHZhciBzZWFyY2hSZXN1bHRzQ29udGFpbmVyID0gc2VhcmNoRGl2XG4gICAgLy8gICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC1zZWFyY2gtcmVzdWx0c1wiKTtcbiAgICAvL1xuICAgIC8vIHZhciBzZWFyY2hBbHBoYVNvcnQgPSBzZWFyY2hSZXN1bHRzQ29udGFpbmVyXG4gICAgLy8gICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC1zZWFyY2gtcmVzdWx0cy1hbHBoYS1jb250YWluZXJcIik7XG4gICAgLy9cbiAgICAvLyBzZWFyY2hBbHBoYVNvcnQuYXBwZW5kKFwicFwiKVxuICAgIC8vICAgLnRleHQoXCJmaWx0ZXJcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXNlYXJjaC1yZXN1bHRzLWFscGhhLWxhYmVsXCIpO1xuICAgIC8vXG4gICAgLy8gc2VhcmNoQWxwaGFTb3J0XG4gICAgLy8gICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC1zZWFyY2gtcmVzdWx0cy1hbHBoYS1pdGVtLWNvbnRhaW5lclwiKVxuICAgIC8vICAgLnNlbGVjdEFsbChcInBcIilcbiAgICAvLyAgIC5kYXRhKFtcImFcIixcImJcIixcImNcIixcImRcIixcImVcIixcImZcIixcImdcIixcImhcIixcImlcIixcImpcIixcImtcIixcImxcIixcIm1cIixcIm5cIixcIm9cIixcInBcIixcInFcIixcInJcIixcInNcIixcInRcIixcInVcIixcInZcIixcIndcIixcInhcIixcInlcIixcInpcIl0pXG4gICAgLy8gICAuZW50ZXIoKVxuICAgIC8vICAgLmFwcGVuZChcInBcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXNlYXJjaC1yZXN1bHRzLWFscGhhLWl0ZW1cIilcbiAgICAvLyAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgIC8vICAgICByZXR1cm4gZDtcbiAgICAvLyAgIH0pXG4gICAgLy8gICA7XG4gICAgLy9cbiAgICAvLyB2YXIgc2VhcmNoUmVzdWx0cyA9IHNlYXJjaFJlc3VsdHNDb250YWluZXIuYXBwZW5kKFwiZGl2XCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC1zZWFyY2gtcmVzdWx0cy1yZXN1bHQtY29udGFpbmVyXCIpXG4gICAgLy8gICAuc2VsZWN0QWxsKFwiZGl2XCIpXG4gICAgLy8gICAuZGF0YShuZXdzSURJbmZvKVxuICAgIC8vICAgLmVudGVyKClcbiAgICAvLyAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXNlYXJjaC1yZXN1bHRzLXJlc3VsdFwiKVxuICAgIC8vICAgLmFwcGVuZChcInBcIilcbiAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXNlYXJjaC1yZXN1bHRzLXJlc3VsdC10ZXh0XCIpXG4gICAgLy8gICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgcmV0dXJuIGQuQ29tcGFueTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICA7XG4gICAgLy9cblxuXG4gICAgdmFyIHNlYXJjaEFycmF5ID0gW107XG4gICAgdmFyIHNlYXJjaFJlc3VsdE1vdXNlT3ZlciA9IGZhbHNlO1xuXG5cbiAgICBzZWFyY2hJbnB1dFxuICAgICAgLm9uKFwia2V5dXBcIiwga2V5dXBlZEZpbG1Db2x1bW4pXG4gICAgICA7XG4gICAgLy9cbiAgICBmdW5jdGlvbiBrZXl1cGVkRmlsbUNvbHVtbigpIHtcbiAgICAgIHNlYXJjaE5ld3Nyb29tKHRoaXMudmFsdWUudHJpbSgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWFyY2hOZXdzcm9vbSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDIpIHtcblxuICAgICAgICBzZWFyY2hBbHBoYVNvcnRMZXR0ZXJzLnN0eWxlKFwiY29sb3JcIixudWxsKS5zdHlsZShcInRleHQtZGVjb3JhdGlvblwiLG51bGwpO1xuICAgICAgICBhbHBoYVNvcnQgPSBcIlwiO1xuICAgICAgICAvLyBzZWFyY2hSZXN1bHRzLnN0eWxlKFwiZGlzcGxheVwiLFwiYmxvY2tcIik7XG5cbiAgICAgICAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nKHMpIHtcbiAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoXCJcXFxcYlwiICsgZXNjYXBlU3RyaW5nKHZhbHVlKSwgXCJpXCIpO1xuICAgICAgICAvLyB2YXIgZmlsdGVyZWRTcGVjdHJ1bURhdGEgPSBzcGVjdHJ1bURhdGEuZmlsdGVyKGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgIC8vICAgdmFyIHN0cmluZyA9IGQuZ2VucmVMaXN0O1xuICAgICAgICAvLyAgIGlmKGdlbnJlU2VsZWN0ZWQgPT0gXCJhbGxcIiAmJiBzdGFnZSA9PSAzKXtcbiAgICAgICAgLy8gICAgIHJldHVybiArZC5ncm9zcyA+IDQ1O1xuICAgICAgICAvLyAgIH1cbiAgICAgICAgLy8gICBlbHNlIGlmKGdlbnJlU2VsZWN0ZWQgPT1cImFsbFwiICYmIHN0YWdlID09IDIpe1xuICAgICAgICAvLyAgICAgcmV0dXJuIGQ7XG4gICAgICAgIC8vICAgfVxuICAgICAgICAvLyAgIGVsc2UgaWYoc3RhZ2UgPT0gMyl7XG4gICAgICAgIC8vICAgICB2YXIgc3Vic3RyaW5nID0gZ2VucmVTZWxlY3RlZDtcbiAgICAgICAgLy8gICAgIHJldHVybiArZC5ncm9zcyA+IDQ1ICYmIHN0cmluZy5pbmRleE9mKHN1YnN0cmluZykgPiAtMTtcbiAgICAgICAgLy8gICB9XG4gICAgICAgIC8vICAgcmV0dXJuIHN0cmluZy5pbmRleE9mKHN1YnN0cmluZykgPiAtMVxuICAgICAgICAvLyB9KVxuICAgICAgICAvLyA7XG4gICAgICAgIC8vXG5cbiAgICAgICAgc2VhcmNoUmVzdWx0cy5zdHlsZShcImRpc3BsYXlcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgIGlmKHJlLnRlc3QoZC52YWx1ZS5jb21wYW55TmFtZSkpe1xuICAgICAgICAgICAgcmV0dXJuIFwiYmxvY2tcIlxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gXCJub25lXCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHNlYXJjaEFycmF5ID0gXy5maWx0ZXIoZmlsdGVyZWRTcGVjdHJ1bURhdGEsIGZ1bmN0aW9uKGQsaSkge1xuICAgICAgICAvLyAgIHJldHVybiByZS50ZXN0KGRbXCJ0aXRsZVwiXSk7XG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIDtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gLy9cbiAgICAgICAgLy8gdmFyIHNlYXJjaERpdkRhdGEgPSBzZWFyY2hSZXN1bHRzLnNlbGVjdEFsbChcInBcIilcbiAgICAgICAgLy8gICAuZGF0YShzZWFyY2hBcnJheSwgZnVuY3Rpb24oZCl7XG4gICAgICAgIC8vICAgICByZXR1cm4gZFtcImltZGJfaWRcIl07XG4gICAgICAgIC8vICAgfSlcbiAgICAgICAgLy8gICA7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHZhciBzZWFyY2hFbnRlciA9IHNlYXJjaERpdkRhdGFcbiAgICAgICAgLy8gICAuZW50ZXIoKVxuICAgICAgICAvLyAgIC5hcHBlbmQoXCJwXCIpXG4gICAgICAgIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwidGstZnV0dXJhLXB0IHNlYXJjaC1yZXN1bHRcIilcbiAgICAgICAgLy8gICAuaHRtbChmdW5jdGlvbihkKXtcbiAgICAgICAgLy8gICAgIHZhciBmaW5hbF9zdHIgPSBkLnRpdGxlLnJlcGxhY2UocmUsIGZ1bmN0aW9uKHN0cikge3JldHVybiAnPGI+PHU+JytzdHIrJzwvdT48L2I+J30pO1xuICAgICAgICAvLyAgICAgdmFyIHBlcmNlbnQgPSBcIjxzcGFuIGNsYXNzPSdzZWFyY2gtcmVzdWx0LXBlcmNlbnQnPjxzcGFuIHN0eWxlPSdjb2xvcjpcIittYWxlQ29sb3IrXCI7Jz5cIitwZXJjZW50Rm9ybWF0KDEtZC5mZW1hbGVfcGVyY2VudCkrXCI8L3NwYW4+LzxzcGFuIHN0eWxlPSdjb2xvcjpcIitmZW1hbGVDb2xvcitcIjsnPlwiK3BlcmNlbnRGb3JtYXQoZC5mZW1hbGVfcGVyY2VudCkrXCI8L3NwYW4+PC9zcGFuPlwiO1xuICAgICAgICAvLyAgICAgcmV0dXJuIGZpbmFsX3N0ciArIFwiIFwiICsgcGVyY2VudDtcbiAgICAgICAgLy8gICB9KVxuICAgICAgICAvLyAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIC8vICAgICBnZW5yZVNlbGVjdGVkID0gXCJhbGxcIjtcbiAgICAgICAgLy8gICAgIHVwZGF0ZVNwZWN0cnVtU2VhcmNoKGQpO1xuICAgICAgICAvLyAgICAgZDMuc2VsZWN0QWxsKFwiLmZpbHRlci1pdGVtLXNwZWN0cnVtXCIpLnN0eWxlKFwiYmFja2dyb3VuZC1jb2xvclwiLG51bGwpLnN0eWxlKFwiYm94LXNoYWRvd1wiLG51bGwpLnN0eWxlKFwiYm9yZGVyLWNvbG9yXCIsbnVsbCkuc3R5bGUoXCJmb250LXdlaWdodFwiLG51bGwpO1xuICAgICAgICAvLyAgICAgZDMuc2VsZWN0KFwiLmZpbHRlci1pdGVtLXNwZWN0cnVtXCIpLnN0eWxlKFwiYmFja2dyb3VuZC1jb2xvclwiLFwiI0Y1RjVGNVwiKS5zdHlsZShcImJveC1zaGFkb3dcIixcImluc2V0IDAgM3B4IDVweCByZ2JhKDAsMCwwLC4xMjUpXCIpLnN0eWxlKFwiYm9yZGVyLWNvbG9yXCIsXCIjYWRhZGFkXCIpLnN0eWxlKFwiZm9udC13ZWlnaHRcIixcIjUwMFwiKTtcbiAgICAgICAgLy8gICAgIGlmKG1vYmlsZSl7XG4gICAgICAgIC8vICAgICAgIHNlYXJjaFJlc3VsdHMuc3R5bGUoXCJkaXNwbGF5XCIsXCJub25lXCIpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgIH0pXG4gICAgICAgIC8vICAgO1xuICAgICAgICAvL1xuICAgICAgICAvLyBzZWFyY2hEaXZEYXRhLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgfSBlbHNle1xuICAgICAgICBzZWFyY2hSZXN1bHRzLnN0eWxlKFwiZGlzcGxheVwiLG51bGwpO1xuICAgICAgfVxuXG4gICAgfTtcbiAgfVxuXG4gIHZhciB4U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbLjIsLjhdKS5yYW5nZShbMCx3aWR0aF0pLmNsYW1wKHRydWUpO1xuICB2YXIgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsLjFdKS5yYW5nZShbaGVpZ2h0LDBdKTtcblxuICB2YXIgY2hhcnREaXZDb250YWluZXIgPSBjb250YWluZXJcbiAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtY29udGFpbmVyXCIpXG4gICAgLnN0eWxlKFwid2lkdGhcIix3aWR0aCttYXJnaW4ubGVmdCttYXJnaW4ucmlnaHQrXCJweFwiKVxuXG4gIHZhciBjaGFydERpdkNvbnRhaW5lclRhYmxlID0gY2hhcnREaXZDb250YWluZXIuYXBwZW5kKFwiZGl2XCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtY29udGFpbmVyLXRhYmxlXCIpO1xuXG4gIHZhciBjaGFydFRpdGxlID0gY2hhcnREaXZDb250YWluZXIuYXBwZW5kKFwicFwiKVxuICAgIC5hdHRyKFwiY2xhc3NcIixcImNoYXJ0LXRpdGxlXCIpXG4gICAgLmh0bWwoXCJOZXdzcm9vbXMsIEJyb2tlbi1kb3duIDxzcGFuPmJ5IEdlbmRlcjwvc3Bhbj5cIilcbiAgICAuc3R5bGUoXCJsZWZ0XCIsbWFyZ2luLmxlZnQrXCJweFwiKVxuICAgIDtcblxuICAvLyB2YXIgbWluaU11bHRpcGxlID0gY2hhcnREaXZDb250YWluZXIuYXBwZW5kKFwiZGl2XCIpXG4gIC8vICAgLmF0dHIoXCJjbGFzc1wiLFwic2xvcGUtbWluaS1tdWx0aXBsZS1kaXZcIilcbiAgLy8gICA7XG5cbiAgdmFyIGNoYXJ0VG9vbFRpcCA9IGNoYXJ0RGl2Q29udGFpbmVyXG4gICAgLmFwcGVuZChcImRpdlwiKVxuICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXRvb2wtdGlwXCIpXG4gICAgLnN0eWxlKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQrXCJweFwiICsgXCIsXCIgKyBtYXJnaW4udG9wK1wicHhcIiArIFwiKVwiKVxuICAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtcbiAgICAgIGNoYXJ0VG9vbFRpcC5zdHlsZShcInZpc2liaWxpdHlcIixudWxsKTtcbiAgICB9KVxuICAgIDtcblxuICB2YXIgY2hhcnREaXYgPSBjaGFydERpdkNvbnRhaW5lclxuICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC13cmFwcGVyXCIpXG4gICAgLmF0dHIoXCJ3aWR0aFwiLHdpZHRoK21hcmdpbi5sZWZ0K21hcmdpbi5yaWdodClcbiAgICAuYXR0cihcImhlaWdodFwiLGhlaWdodCttYXJnaW4udG9wK21hcmdpbi5ib3R0b20pXG4gICAgO1xuXG4gIHZhciBkZWZzID0gY2hhcnREaXYuYXBwZW5kKFwic3ZnOmRlZnNcIilcblxuICBkZWZzXG4gICAgLmFwcGVuZChcIm1hcmtlclwiKSAgICAvLyBUaGlzIHNlY3Rpb24gYWRkcyBpbiB0aGUgYXJyb3dzXG4gICAgLmF0dHIoXCJpZFwiLCBcImFycm93LWhlYWRcIilcbiAgICAuYXR0cihcInZpZXdCb3hcIiwgXCIwIC01IDEwIDEwXCIpXG4gICAgLmF0dHIoXCJyZWZYXCIsIDApXG4gICAgLmF0dHIoXCJyZWZZXCIsIDApXG4gICAgLmF0dHIoXCJtYXJrZXJXaWR0aFwiLCA1KVxuICAgIC5hdHRyKFwibWFya2VySGVpZ2h0XCIsIDMpXG4gICAgLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpXG4gICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAuYXR0cihcImRcIiwgXCJNMCwtNUwxMCwwTDAsNVwiKVxuICAgIC5hdHRyKFwiZmlsbFwiLFwiI2Q4ZDhkOFwiKVxuICAgIDtcblxuICB2YXIgbGluZWFyR3JhZGllbnRSaWdodCA9IGRlZnNcbiAgICAuYXBwZW5kKFwibGluZWFyR3JhZGllbnRcIilcbiAgICAuYXR0cihcImlkXCIsXCJncmFkaWVudC1ibHVlXCIpXG4gICAgLmF0dHIoXCJ4MVwiLDApXG4gICAgLmF0dHIoXCJ4MlwiLDEpXG4gICAgLmF0dHIoXCJ5MVwiLDApXG4gICAgLmF0dHIoXCJ5MlwiLDApXG5cbiAgdmFyIGxpbmVhckdyYWRpZW50QXZlcmFnZSA9IGRlZnNcbiAgICAuYXBwZW5kKFwibGluZWFyR3JhZGllbnRcIilcbiAgICAuYXR0cihcImlkXCIsXCJncmFkaWVudC1hdmVyYWdlXCIpXG4gICAgLmF0dHIoXCJ4MVwiLDApXG4gICAgLmF0dHIoXCJ4MlwiLDEpXG4gICAgLmF0dHIoXCJ5MVwiLDApXG4gICAgLmF0dHIoXCJ5MlwiLDApXG5cbiAgbGluZWFyR3JhZGllbnRBdmVyYWdlXG4gICAgLmFwcGVuZChcInN0b3BcIilcbiAgICAuYXR0cihcInN0b3AtY29sb3JcIixcImJsYWNrXCIpXG4gICAgLmF0dHIoXCJzdG9wLW9wYWNpdHlcIiwuMTUpXG5cbiAgbGluZWFyR3JhZGllbnRBdmVyYWdlXG4gICAgLmFwcGVuZChcInN0b3BcIilcbiAgICAuYXR0cihcIm9mZnNldFwiLFwiMTAwJVwiKVxuICAgIC5hdHRyKFwic3RvcC1jb2xvclwiLFwiYmxhY2tcIilcbiAgICAuYXR0cihcInN0b3Atb3BhY2l0eVwiLDEpXG5cbiAgbGluZWFyR3JhZGllbnRSaWdodFxuICAgIC5hcHBlbmQoXCJzdG9wXCIpXG4gICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsXCJibHVlXCIpXG4gICAgLmF0dHIoXCJzdG9wLW9wYWNpdHlcIiwuMTUpXG5cbiAgbGluZWFyR3JhZGllbnRSaWdodFxuICAgIC5hcHBlbmQoXCJzdG9wXCIpXG4gICAgLmF0dHIoXCJvZmZzZXRcIixcIjEwMCVcIilcbiAgICAuYXR0cihcInN0b3AtY29sb3JcIixcImJsdWVcIilcbiAgICAuYXR0cihcInN0b3Atb3BhY2l0eVwiLDEpXG5cbiAgdmFyIGxpbmVhckdyYWRpZW50TGVmdCA9IGRlZnNcbiAgICAuYXBwZW5kKFwibGluZWFyR3JhZGllbnRcIilcbiAgICAuYXR0cihcImlkXCIsXCJncmFkaWVudC1yZWRcIilcbiAgICAuYXR0cihcIngxXCIsMSlcbiAgICAuYXR0cihcIngyXCIsMClcbiAgICAuYXR0cihcInkxXCIsMClcbiAgICAuYXR0cihcInkyXCIsMClcblxuICBsaW5lYXJHcmFkaWVudExlZnRcbiAgICAuYXBwZW5kKFwic3RvcFwiKVxuICAgIC5hdHRyKFwic3RvcC1jb2xvclwiLFwicmVkXCIpXG4gICAgLmF0dHIoXCJzdG9wLW9wYWNpdHlcIiwuMTUpXG5cbiAgbGluZWFyR3JhZGllbnRMZWZ0XG4gICAgLmFwcGVuZChcInN0b3BcIilcbiAgICAuYXR0cihcIm9mZnNldFwiLFwiMTAwJVwiKVxuICAgIC5hdHRyKFwic3RvcC1jb2xvclwiLFwicmVkXCIpXG4gICAgLmF0dHIoXCJzdG9wLW9wYWNpdHlcIiwxKVxuXG4gIHZhciBsaW5lYXJHcmFkaWVudFN0YXJ0UmlnaHQgPSBkZWZzXG4gICAgLmFwcGVuZChcImxpbmVhckdyYWRpZW50XCIpXG4gICAgLmF0dHIoXCJpZFwiLFwiZ3JhZGllbnQtcmlnaHRcIilcbiAgICAuYXR0cihcIngxXCIsMClcbiAgICAuYXR0cihcIngyXCIsMSlcbiAgICAuYXR0cihcInkxXCIsMClcbiAgICAuYXR0cihcInkyXCIsMClcblxuICBsaW5lYXJHcmFkaWVudFN0YXJ0UmlnaHRcbiAgICAuYXBwZW5kKFwic3RvcFwiKVxuICAgIC5hdHRyKFwic3RvcC1jb2xvclwiLFwiI2E3YTdhN1wiKVxuICAgIC5hdHRyKFwic3RvcC1vcGFjaXR5XCIsLjE1KVxuXG4gIGxpbmVhckdyYWRpZW50U3RhcnRSaWdodFxuICAgIC5hcHBlbmQoXCJzdG9wXCIpXG4gICAgLmF0dHIoXCJvZmZzZXRcIixcIjEwMCVcIilcbiAgICAuYXR0cihcInN0b3AtY29sb3JcIixcIiNhN2E3YTdcIilcbiAgICAuYXR0cihcInN0b3Atb3BhY2l0eVwiLDEpXG5cbiAgdmFyIGxpbmVhckdyYWRpZW50U3RhcnRMZWZ0ID0gZGVmc1xuICAgIC5hcHBlbmQoXCJsaW5lYXJHcmFkaWVudFwiKVxuICAgIC5hdHRyKFwiaWRcIixcImdyYWRpZW50LWxlZnRcIilcbiAgICAuYXR0cihcIngxXCIsMSlcbiAgICAuYXR0cihcIngyXCIsMClcbiAgICAuYXR0cihcInkxXCIsMClcbiAgICAuYXR0cihcInkyXCIsMClcblxuICBsaW5lYXJHcmFkaWVudFN0YXJ0TGVmdFxuICAgIC5hcHBlbmQoXCJzdG9wXCIpXG4gICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsXCIjODY4Njg2XCIpXG4gICAgLmF0dHIoXCJzdG9wLW9wYWNpdHlcIiwuMTUpXG5cbiAgbGluZWFyR3JhZGllbnRTdGFydExlZnRcbiAgICAuYXBwZW5kKFwic3RvcFwiKVxuICAgIC5hdHRyKFwib2Zmc2V0XCIsXCIxMDAlXCIpXG4gICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsXCIjODY4Njg2XCIpXG4gICAgLmF0dHIoXCJzdG9wLW9wYWNpdHlcIiwxKVxuXG4gIGRlZnNcbiAgICAuYXBwZW5kKFwibWFya2VyXCIpICAgIC8vIFRoaXMgc2VjdGlvbiBhZGRzIGluIHRoZSBhcnJvd3NcbiAgICAuYXR0cihcImlkXCIsIFwiYXJyb3ctaGVhZC1ibGFja1wiKVxuICAgIC5hdHRyKFwidmlld0JveFwiLCBcIjAgLTUgMTAgMTBcIilcbiAgICAuYXR0cihcInJlZlhcIiwgMClcbiAgICAuYXR0cihcInJlZllcIiwgMClcbiAgICAuYXR0cihcIm1hcmtlcldpZHRoXCIsIDcpXG4gICAgLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgMTApXG4gICAgLmF0dHIoXCJvcmllbnRcIiwgXCJhdXRvXCIpXG4gICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAuYXR0cihcImRcIiwgXCJNMCwtNUwxMCwwTDAsNVwiKVxuICAgIC5hdHRyKFwiZmlsbFwiLFwiIzAwMDAwMFwiKVxuICAgIDtcblxuICB2YXIgZmlsdGVyZWRNYXBEYXRhID0gbWFwRGF0YS5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgaWYoY3V0ID09IFwic3VwV2hpdGVcIiB8fCBjdXQgPT0gXCJzdXBHZW5kZXJcIil7XG4gICAgICByZXR1cm4gZC50b3RhbF9udW0gPiBjb3VudE1pbiAmJiBkLnRvdGFsX3N1cF9udW0gPiAwO1xuICAgIH1cbiAgICByZXR1cm4gZC8vZC50b3RhbF9udW0gPiBjb3VudE1pbjtcbiAgfSlcbiAgO1xuXG4gIHZhciBtYXhQZXJjZW50QXJyYXkgPSBbXTtcbiAgdmFyIGRpZmZBcnJheSA9IFtdO1xuICB2YXIgcmFjZURpZmZBcnJheSA9IFtdXG4gIHZhciBhdmVyYWdlQXJyYXkgPSBbXVxuXG4gIHZhciBuZXdzTmVzdCA9IGQzLm5lc3QoKVxuICAgIC5rZXkoZnVuY3Rpb24oZCl7XG4gICAgICByZXR1cm4gK2QuTmV3c0lEXG4gICAgfSlcbiAgICAucm9sbHVwKGZ1bmN0aW9uKGxlYXZlcyl7XG4gICAgICB2YXIgbWFwID0gZDMubWFwKGxlYXZlcyxmdW5jdGlvbihkKXtyZXR1cm4gZC5ZZWFyfSk7XG4gICAgICB2YXIgbWF4VG90YWxOdW0gPSBkMy5tYXgobGVhdmVzLGZ1bmN0aW9uKGQpe3JldHVybiBkLnRvdGFsX251bX0pO1xuICAgICAgdmFyIG1heFBlcmNlbnQgPSBkMy5tYXgobGVhdmVzLGZ1bmN0aW9uKGQpeyByZXR1cm4gZ2V0UGVyY2VudChkKX0pO1xuICAgICAgbWF4UGVyY2VudEFycmF5LnB1c2gobWF4UGVyY2VudClcbiAgICAgIHJldHVybiB7eWVhck1hcDptYXAsdmFsdWVzOmxlYXZlcyxtYXhUb3RhbDptYXhUb3RhbE51bX1cbiAgICB9KVxuICAgIC5lbnRyaWVzKGZpbHRlcmVkTWFwRGF0YSlcbiAgICA7XG5cbiAgICB2YXIgY3V0T3V0RGF0YSA9IFtdO1xuICAgIHZhciBzZWFyY2hEYXRhU2V0ID0gW11cblxuICAgIG5ld3NOZXN0ID0gbmV3c05lc3QuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgaWYoZC52YWx1ZS55ZWFyTWFwLmhhcyh5ZWFyU2VsZWN0ZWQpKXtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcblxuICAgIHZhciB0b3RhbEV4dGVudCA9IGQzLmV4dGVudChuZXdzTmVzdCxmdW5jdGlvbihkKXtcbiAgICAgIHJldHVybiArZC52YWx1ZS55ZWFyTWFwLmdldCh5ZWFyU2VsZWN0ZWQpLnRvdGFsX251bTtcbiAgICB9KVxuXG4gICAgdG90YWxFeHRlbnRbMV0gPSA2MDA7XG5cbiAgICB2YXIgcmFkaXVzU2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbY291bnRNaW4sdG90YWxFeHRlbnRbMV1dKS5yYW5nZShbNCwyNF0pLmNsYW1wKHRydWUpO1xuXG4gICAgZm9yICh2YXIgaXRlbSBpbiBuZXdzTmVzdCl7XG5cbiAgICAgIHZhciBjdXJyZW50U3VwID0gZ2V0UGVyY2VudFR5cGUoXCJzdXBHZW5kZXJcIixuZXdzTmVzdFtpdGVtXS52YWx1ZSlcbiAgICAgIHZhciBjdXJyZW50WWVhciA9IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsbmV3c05lc3RbaXRlbV0udmFsdWUpO1xuICAgICAgdmFyIHByZXZpb3VzWWVhciA9IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyLW9sZFwiLG5ld3NOZXN0W2l0ZW1dLnZhbHVlKVxuXG4gICAgICB2YXIgZGlmZiA9IDBcbiAgICAgIGlmKHByZXZpb3VzWWVhciA9PSBcIm4vYVwiKXtcbiAgICAgICAgZGlmZiA9IG51bGw7XG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICBkaWZmID0gY3VycmVudFllYXItcHJldmlvdXNZZWFyO1xuICAgICAgfVxuXG4gICAgICB2YXIgd2hpdGVDZW5zdXMgPSA5OTk5O1xuICAgICAgdmFyIGJsYWNrQ2Vuc3VzID0gOTk5OTtcbiAgICAgIHZhciBoaXNwYW5pY0NlbnN1cyA9IDk5OTk7XG4gICAgICB2YXIgYXNpYW5DZW5zdXMgPSA5OTk5O1xuICAgICAgdmFyIGZlbWFsZUNlbnN1cyA9IDUwO1xuXG4gICAgICB2YXIgY29tcGFueURhdGEgPSBuZXdzSUROYW1lLmdldChuZXdzTmVzdFtpdGVtXS5rZXkpO1xuICAgICAgdmFyIGNpdHlTdGF0ZSA9IGNvbXBhbnlEYXRhLkNpdHkrXCIgXCIrY29tcGFueURhdGEuU3RhdGU7XG4gICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5jb21wYW55RGF0YSA9IGNvbXBhbnlEYXRhO1xuXG4gICAgICBpZihjb21wYW55RGF0YS5oYXNPdmVycmlkZSl7XG4gICAgICAgIHdoaXRlQ2Vuc3VzID0gK2NvbXBhbnlEYXRhLm92ZXJyaWRlLndoaXRlLzEwMDtcbiAgICAgICAgYmxhY2tDZW5zdXMgPSArY29tcGFueURhdGEub3ZlcnJpZGUuYmxhY2svMTAwO1xuICAgICAgICBoaXNwYW5pY0NlbnN1cyA9ICtjb21wYW55RGF0YS5vdmVycmlkZS5oaXNwYW5pYy8xMDA7XG4gICAgICAgIGZlbWFsZUNlbnN1cyA9IGNvbXBhbnlEYXRhLm92ZXJyaWRlLmZlbWFsZTtcbiAgICAgICAgYXNpYW5DZW5zdXMgPSBjb21wYW55RGF0YS5vdmVycmlkZS5hc2lhbi8xMDA7XG4gICAgICAgIGlmKGZlbWFsZUNlbnN1cyAhPSBcIm4vYVwiKXtcbiAgICAgICAgICBmZW1hbGVDZW5zdXMgPSArZmVtYWxlQ2Vuc3VzLzEwMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZihjZW5zdXNNYXAuaGFzKGNpdHlTdGF0ZSkpe1xuXG4gICAgICAgIHdoaXRlQ2Vuc3VzID0gK2NlbnN1c01hcC5nZXQoY2l0eVN0YXRlKS53aGl0ZV8yMDE1LzEwMDtcbiAgICAgICAgYmxhY2tDZW5zdXMgPSArY2Vuc3VzTWFwLmdldChjaXR5U3RhdGUpLmJsYWNrXzIwMTUvMTAwO1xuICAgICAgICBoaXNwYW5pY0NlbnN1cyA9ICtjZW5zdXNNYXAuZ2V0KGNpdHlTdGF0ZSkuaGlzcGFuaWNfMjAxNS8xMDA7XG4gICAgICAgIGZlbWFsZUNlbnN1cyA9IGNlbnN1c01hcC5nZXQoY2l0eVN0YXRlKS5mZW1hbGVfMjAxNS8xMDA7XG4gICAgICAgIGFzaWFuQ2Vuc3VzID0gY2Vuc3VzTWFwLmdldChjaXR5U3RhdGUpLmFzaWFuXzIwMTUvMTAwO1xuXG4gICAgICB9XG4gICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS53aGl0ZUNlbnN1cyA9IHdoaXRlQ2Vuc3VzO1xuICAgICAgbmV3c05lc3RbaXRlbV0udmFsdWUuYmxhY2tDZW5zdXMgPSBibGFja0NlbnN1cztcbiAgICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLmhpc3BhbmljQ2Vuc3VzID0gaGlzcGFuaWNDZW5zdXM7XG4gICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5mZW1hbGVDZW5zdXMgPSBmZW1hbGVDZW5zdXM7XG4gICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5hc2lhbkNlbnN1cyA9IGFzaWFuQ2Vuc3VzO1xuXG4gICAgICB2YXIgcmFjZURpZmYgPSAwO1xuXG4gICAgICBpZihnZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsbmV3c05lc3RbaXRlbV0udmFsdWUpID09IFwibi9hXCIpe1xuICAgICAgICByYWNlRGlmZiA9IG51bGw7XG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICByYWNlRGlmZiA9IGdldFBlcmNlbnRUeXBlKFwicmFjZVwiLG5ld3NOZXN0W2l0ZW1dLnZhbHVlKS1nZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsbmV3c05lc3RbaXRlbV0udmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBkaWZmQXJyYXkucHVzaChkaWZmKTtcbiAgICAgIHJhY2VEaWZmQXJyYXkucHVzaChyYWNlRGlmZik7XG5cbiAgICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLmNvbXBhbnlOYW1lID0gY29tcGFueURhdGEuQ29tcGFueVxuXG4gICAgICB2YXIgZmlyc3QgPSBjb21wYW55RGF0YS5Db21wYW55LmNoYXJBdCgwKTtcbiAgICAgIHZhciBzZWNvbmQgPSBcIlwiO1xuICAgICAgaWYoY29tcGFueURhdGEuQ29tcGFueS5zcGxpdChcIiBcIikubGVuZ3RoID4gMSl7XG4gICAgICAgIHNlY29uZCA9IGNvbXBhbnlEYXRhLkNvbXBhbnkuc3BsaXQoXCIgXCIpWzFdLmNoYXJBdCgwKVxuICAgICAgfVxuICAgICAgbmV3c05lc3RbaXRlbV0udmFsdWUuY2hhcnMgPSBbZmlyc3Qsc2Vjb25kXTtcblxuICAgICAgbmV3c05lc3RbaXRlbV0udmFsdWUud2hpdGVEZWx0YSA9IGdldFBlcmNlbnRUeXBlKFwicmFjZVwiLG5ld3NOZXN0W2l0ZW1dLnZhbHVlKVxuICAgICAgbmV3c05lc3RbaXRlbV0udmFsdWUuZGlmZiA9IGRpZmY7XG4gICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5yYWNlRGlmZiA9IHJhY2VEaWZmO1xuICAgICAgdmFyIHRvdGFsQ291bnQgPSArbmV3c05lc3RbaXRlbV0udmFsdWUueWVhck1hcC5nZXQoeWVhclNlbGVjdGVkKS50b3RhbF9udW07XG4gICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5yYWRpdXMgPSByYWRpdXNTY2FsZSh0b3RhbENvdW50KTtcbiAgICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLmN1cnJlbnRZZWFyID0gY3VycmVudFllYXI7XG4gICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5wcmV2aW91c1llYXIgPSBwcmV2aW91c1llYXI7XG4gICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5jdXJyZW50U3VwID0gY3VycmVudFN1cDtcblxuICAgICAgaWYobGF0TG9uZ01hcC5oYXMobmV3c05lc3RbaXRlbV0ua2V5KSl7XG4gICAgICAgIHZhciBsb2NhdGlvbkRhdGEgPSBsYXRMb25nTWFwLmdldChuZXdzTmVzdFtpdGVtXS5rZXkpO1xuICAgICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5sb2NhdGlvbiA9IHtsYXRpdHVkZTorbG9jYXRpb25EYXRhLmxhdCxsb25naXR1ZGU6K2xvY2F0aW9uRGF0YS5sbmd9O1xuICAgICAgICBuZXdzTmVzdFtpdGVtXS52YWx1ZS5oYXNMb2NhdGlvbiA9IHRydWVcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLmhhc0xvY2F0aW9uID0gZmFsc2VcbiAgICAgIH1cblxuICAgICAgLy8gbmV3c05lc3RbaXRlbV0udG9wM0RhdGEgPSB0b3AzTWFwLmdldChuZXdzTmVzdFtpdGVtXS5jb21wYW55TmFtZSk7XG4gICAgfVxuICAgIDtcblxuXG4gIG5ld3NOZXN0ID0gbmV3c05lc3QuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgIHNlYXJjaERhdGFTZXQucHVzaChkKTtcbiAgICB2YXIgY291bnQgPSBkLnZhbHVlLnllYXJNYXAuZ2V0KHllYXJTZWxlY3RlZCkudG90YWxfbnVtO1xuICAgIGlmKGNvdW50ID4gY291bnRNaW4pe1xuICAgICAgcmV0dXJuIGQ7XG4gICAgfVxuICAgIGVsc2V7XG4gICAgICBjdXRPdXREYXRhLnB1c2goZCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KTtcblxuICBuZXdzTmVzdCA9IG5ld3NOZXN0LnNvcnQoZnVuY3Rpb24oYSxiKXtcbiAgICByZXR1cm4gYi52YWx1ZS5yYWRpdXMgLSBhLnZhbHVlLnJhZGl1cztcbiAgfSk7XG5cbiAgdmFyIGNvdW50TWluaSA9IC0xO1xuXG4gIGZvciAodmFyIGl0ZW0gaW4gbmV3c05lc3Qpe1xuICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLm1pbmlDaGFydCA9IC0xXG4gICAgaWYobmV3c05lc3RbaXRlbV0udmFsdWUueWVhck1hcC5oYXMoeWVhck9sZCkgJiYgY291bnRNaW5pIDwgMjEpe1xuICAgICAgY291bnRNaW5pID0gY291bnRNaW5pICsgMTtcbiAgICAgIG5ld3NOZXN0W2l0ZW1dLnZhbHVlLm1pbmlDaGFydCA9IGNvdW50TWluaTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG5ld3NOZXN0QXZlcmFnZVQwID0gZDMubWVhbihuZXdzTmVzdCxmdW5jdGlvbihkKXtcbiAgICBpZihkLnZhbHVlLnByZXZpb3VzWWVhciA9PSBcIm4vYVwiKXtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZC52YWx1ZS5wcmV2aW91c1llYXI7XG4gIH0pO1xuICB2YXIgbmV3c05lc3RBdmVyYWdlVDEgPSBkMy5tZWFuKG5ld3NOZXN0LGZ1bmN0aW9uKGQpeyByZXR1cm4gZC52YWx1ZS5jdXJyZW50WWVhcjt9KTtcbiAgdmFyIG5ld3NOZXN0U3VwQXZlcmFnZVQxID0gZDMubWVhbihuZXdzTmVzdCxmdW5jdGlvbihkKXsgcmV0dXJuIGdldFBlcmNlbnRUeXBlKFwic3VwR2VuZGVyXCIsZC52YWx1ZSl9KTtcblxuICB2YXIgbmV3c01hcCA9IGQzLm1hcChuZXdzTmVzdCxmdW5jdGlvbihkKXtyZXR1cm4gZC5rZXl9KTtcblxuICB2YXIgZGlmZkV4dGVudCA9IGQzLmV4dGVudChkaWZmQXJyYXksZnVuY3Rpb24oZCl7cmV0dXJuIGQ7IH0pO1xuICB2YXIgY29sb3JTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKGRpZmZFeHRlbnQpLnJhbmdlKFtcImdyZWVuXCIsXCJyZWRcIl0pO1xuICB2YXIgZ2VuZGVyQ29sb3JTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFsuMiwuNSwuOF0pLnJhbmdlKFtcIiMyMTYxZmFcIixcIiNkZGRkZGRcIixcIiNmZjMzMzNcIl0pO1xuXG4gIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgZ2VuZGVyQ29sb3JTY2FsZS5kb21haW4oWzAsLjUsMV0pO1xuICB9XG5cbiAgdmFyIGNlbGw7XG4gIHZhciBjZWxsQ2lyY2xlO1xuICB2YXIgY2VsbEltYWdlcztcbiAgdmFyIGNlbGxUZXh0O1xuICB2YXIgY2VsbENpcmNsZVR3bztcbiAgdmFyIGNlbGxMaW5lO1xuICB2YXIgY2VsbERhc2g7XG5cbiAgdmFyIGNoYXJ0QXhpcyA9IGNoYXJ0RGl2LmFwcGVuZChcImdcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpc1wiKVxuICAgIDtcblxuICB2YXIgY2hhcnRHID0gY2hhcnREaXZcbiAgICAuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgdmFyIGR1cmF0aW9uID0gNzUwO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkQ2hhcnQoY2hhcnRUeXBlKXtcbiAgICB2YXIgcmVidWlsZEF4aXMgPSBmYWxzZTtcblxuICAgIGlmKGNoYXJ0VHlwZSAhPSBcIm5ld1wiICYmIGNoYXJ0VHlwZSAhPSBcInN3YXJtXCIpe1xuICAgICAgc3RlcHBlckJhY2suc3R5bGUoXCJ2aXNpYmlsaXR5XCIsXCJ2aXNpYmxlXCIpLnN0eWxlKFwicG9pbnRlci1ldmVudHNcIixcImFsbFwiKTtcbiAgICAgIGlmKHByZXZpb3VzQ2hhcnQhPWNoYXJ0VHlwZSB8fCBjaGFydFR5cGUgPT0gXCJ0YWJsZVwiKXtcbiAgICAgICAgcHJldmlvdXNDaGFydCA9IGNoYXJ0VHlwZTtcbiAgICAgICAgcmVidWlsZEF4aXMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZihwcmV2aW91c0N1dCE9Y3V0KXtcbiAgICAgICAgcHJldmlvdXNDdXQgPSBjdXQ7XG4gICAgICAgIHJlYnVpbGRBeGlzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIHJlYnVpbGRBeGlzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNle1xuICAgICAgc3RlcHBlckJhY2suc3R5bGUoXCJ2aXNpYmlsaXR5XCIsbnVsbCkuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLG51bGwpO1xuICAgIH1cblxuICAgIHZhciBoaWdobGlnaHRlZFBvc2l0aW9uID0gWzAsMCwwXTtcblxuICAgIHZhciBoaWdobGlnaHRlZFN0cm9rZUNvbG9yID0gXCIjNTU1NTU1XCJcbiAgICB2YXIgaGlnaGxpZ2h0ZWRDaXJjbGVTdHJva2VEYXJrbmVzcyA9IDI7XG5cbiAgICBmdW5jdGlvbiBoaWdobGlnaHRlZEl0ZW0oc2VsZWN0ZWRJdGVtKXtcbiAgICAgIGlmKGNoYXJ0VHlwZT09XCJzd2FybVwiIHx8IGNoYXJ0VHlwZSA9PSBcIm5ld1wiKXtcbiAgICAgICAgc2VsZWN0ZWRJdGVtLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsXCIycHhcIikuc3R5bGUoXCJzdHJva2VcIixkMy5jb2xvcihzZWxlY3RlZEl0ZW0uc3R5bGUoXCJzdHJva2VcIikpLmRhcmtlcihoaWdobGlnaHRlZENpcmNsZVN0cm9rZURhcmtuZXNzKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW91c2VPdmVyRXZlbnRzKGRhdGEsZWxlbWVudCl7XG4gICAgICBjaGFydFRvb2xUaXAuc2VsZWN0QWxsKFwiZGl2XCIpLnJlbW92ZSgpO1xuXG4gICAgICB2YXIgY2hhcnRUb29sVGlwQ29udGFpbmVyID0gY2hhcnRUb29sVGlwLmFwcGVuZChcImRpdlwiKTtcblxuICAgICAgdmFyIGNoYXJ0VG9vbFRpcENvbXBhbnkgPSBjaGFydFRvb2xUaXBDb250YWluZXIuYXBwZW5kKFwicFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC10b29sLXRpcC1jb21wYW55XCIpXG4gICAgICAgIC5zdHlsZShcInRleHQtdHJhbnNmb3JtXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoZGF0YS52YWx1ZS5jb21wYW55TmFtZSA9PSBcInVzYSB0b2RheVwiKXtcbiAgICAgICAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pXG4gICAgICAgIC5odG1sKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHZhciBvbGREYXRhID0gbmV3RGF0YUlEcy5pbmRleE9mKCtkYXRhLmtleSk7XG4gICAgICAgICAgdmFyIHRleHRWYWx1ZSA9IFwiXCI7XG4gICAgICAgICAgaWYoZGF0YS52YWx1ZS5jb21wYW55TmFtZSA9PSBcInVzYSB0b2RheVwiKXtcbiAgICAgICAgICAgIHRleHRWYWx1ZSA9IFwiVVNBIFRvZGF5XCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYoZGF0YS52YWx1ZS5jb21wYW55TmFtZS5sZW5ndGggPiAzMCl7XG4gICAgICAgICAgICB0ZXh0VmFsdWUgPSBkYXRhLnZhbHVlLmNvbXBhbnlOYW1lLnJlcGxhY2UoL1xcYlxcdy9nLCBsID0+IGwudG9VcHBlckNhc2UoKSkuc2xpY2UoMCwzMCkrXCIuLi5cIlxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRleHRWYWx1ZSA9IGRhdGEudmFsdWUuY29tcGFueU5hbWUucmVwbGFjZSgvXFxiXFx3L2csIGwgPT4gbC50b1VwcGVyQ2FzZSgpKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihvbGREYXRhID09IC0xKXtcbiAgICAgICAgICAgIHRleHRWYWx1ZSA9IHRleHRWYWx1ZSArIFwiPHNwYW4+MjAxNyBkYXRhPC9zcGFuPlwiXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0ZXh0VmFsdWU7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgIHZhciBjb2xEYXRhID0gW1wid2hpdGVcIixcImJsYWNrXCIsXCJoaXNwLlwiLFwiYXNpYW5cIixcImZlbWFsZVwiXTtcbiAgICAgIHZhciBkYXRhRm9yVG9vbFRpcCA9IFt7Y3V0OlwibGVhZGVyc1wiLGNvbHM6Y29sRGF0YX0se2N1dDpcInN0YWZmXCIsY29sczpjb2xEYXRhfSx7Y3V0OlwiY2Vuc3VzXCIsY29sczpjb2xEYXRhfV07XG5cbiAgICAgIHZhciByb3dzID0gY2hhcnRUb29sVGlwQ29udGFpbmVyLnNlbGVjdEFsbChcImRpdlwiKVxuICAgICAgICAuZGF0YShkYXRhRm9yVG9vbFRpcClcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC10b29sLXRpcC1yb3dcIilcblxuICAgICAgdmFyIHJvd0xhYmVscyA9IHJvd3MuYXBwZW5kKFwicFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC10b29sLXRpcC1yb3ctbGFiZWxcIilcbiAgICAgICAgLmh0bWwoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoZC5jdXQgPT0gXCJjZW5zdXNcIil7XG4gICAgICAgICAgICB2YXIgY2l0eVN0cmluZyA9IFwiXCI7XG4gICAgICAgICAgICBpZihkYXRhLnZhbHVlLmNvbXBhbnlEYXRhLmhhc092ZXJyaWRlKXtcblxuICAgICAgICAgICAgICBjaXR5U3RyaW5nID0gZGF0YS52YWx1ZS5jb21wYW55RGF0YS5vdmVycmlkZS5jb3ZlcmFnZV9hcmVhO1xuICAgICAgICAgICAgICBpZihjaXR5U3RyaW5nID4gMzApe1xuICAgICAgICAgICAgICAgIGNpdHlTdHJpbmcgPSBjaXR5U3RyaW5nLnNsaWNlKDAsMjcpK1wiLi4uXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGNpdHlTdHJpbmcgPSBkYXRhLnZhbHVlLmNvbXBhbnlEYXRhLkNpdHkgKyBcIiwgXCIrZGF0YS52YWx1ZS5jb21wYW55RGF0YS5TdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcImNlbnN1czxzcGFuPlwiK2NpdHlTdHJpbmcrXCI8L3NwYW4+XCJcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZC5jdXQgPT0gXCJzdGFmZlwiICYmIGNoYXJ0VHlwZSAhPSBcInN3YXJtLXNjYXR0ZXJcIil7XG4gICAgICAgICAgICByZXR1cm4gXCJhbGxcIlxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZC5jdXQ7XG4gICAgICAgIH0pXG4gICAgICAgIDtcblxuICAgICAgdmFyIGNvbHMgPSByb3dzLnNlbGVjdEFsbChcImRpdlwiKVxuICAgICAgICAuZGF0YShmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm4gZC5jb2xzO1xuICAgICAgICB9KVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXRvb2wtdGlwLWNvbFwiKVxuXG4gICAgICBjb2xzLmFwcGVuZChcInBcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtdG9vbC10aXAtY29sLWxhYmVsXCIpXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKGQzLnNlbGVjdCh0aGlzLnBhcmVudE5vZGUucGFyZW50Tm9kZSkuZGF0dW0oKS5jdXQgPT0gXCJsZWFkZXJzXCIpe1xuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIGNvbHNcbiAgICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgdmFyIGN1dERhdGEgPSBkMy5zZWxlY3QodGhpcy5wYXJlbnROb2RlLnBhcmVudE5vZGUpLmRhdHVtKCkuY3V0O1xuICAgICAgICAgIGlmKGN1dERhdGEgPT0gXCJjZW5zdXNcIil7XG4gICAgICAgICAgICBpZihkPT1cImZlbWFsZVwiKXtcbiAgICAgICAgICAgICAgdmFyIGZlbWFsZURhdGEgPSBkYXRhLnZhbHVlLmZlbWFsZUNlbnN1cztcbiAgICAgICAgICAgICAgaWYoZmVtYWxlRGF0YSA9PSBcIm4vYVwiKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmVtYWxlRGF0YTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChkYXRhLnZhbHVlLmZlbWFsZUNlbnN1cyoxMDApK1wiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZD09XCJ3aGl0ZVwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZGF0YS52YWx1ZS53aGl0ZUNlbnN1cyoxMDApK1wiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZD09XCJoaXNwLlwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZGF0YS52YWx1ZS5oaXNwYW5pY0NlbnN1cyoxMDApK1wiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZD09XCJibGFja1wiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZGF0YS52YWx1ZS5ibGFja0NlbnN1cyoxMDApK1wiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZD09XCJhc2lhblwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZGF0YS52YWx1ZS5hc2lhbkNlbnN1cyoxMDApK1wiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihjdXREYXRhID09IFwic3RhZmZcIil7XG4gICAgICAgICAgICBpZihjaGFydFR5cGUgPT0gXCJzd2FybS1zY2F0dGVyXCIpe1xuICAgICAgICAgICAgICBpZihkPT1cIndoaXRlXCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChnZXRQZXJjZW50VHlwZShcIndoaXRlU3RhZmZcIixkYXRhLnZhbHVlKSkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZihkPT1cImJsYWNrXCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChnZXRQZXJjZW50VHlwZShcImJsYWNrU3RhZmZcIiwoZGF0YS52YWx1ZSkpKSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGQ9PVwiaGlzcC5cIil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKGdldFBlcmNlbnRUeXBlKFwiaGlzcFN0YWZmXCIsKGRhdGEudmFsdWUpKSkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZihkPT1cImFzaWFuXCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChnZXRQZXJjZW50VHlwZShcImFzaWFuU3RhZmZcIiwoZGF0YS52YWx1ZSkpKSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGQ9PVwiZmVtYWxlXCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChnZXRQZXJjZW50VHlwZShcImdlbmRlclN0YWZmXCIsKGRhdGEudmFsdWUpKSkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZD09XCJ3aGl0ZVwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKGdldFBlcmNlbnRUeXBlKFwid2hpdGVcIixkYXRhLnZhbHVlKSkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQ9PVwiYmxhY2tcIil7XG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChnZXRQZXJjZW50VHlwZShcImJsYWNrXCIsKGRhdGEudmFsdWUpKSkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQ9PVwiaGlzcC5cIil7XG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChnZXRQZXJjZW50VHlwZShcImhpc3BcIiwoZGF0YS52YWx1ZSkpKSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZD09XCJhc2lhblwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKGdldFBlcmNlbnRUeXBlKFwiYXNpYW5cIiwoZGF0YS52YWx1ZSkpKSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZD09XCJmZW1hbGVcIil7XG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLChkYXRhLnZhbHVlKSkpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGN1dERhdGEgPSBcImxlYWRlcnNcIil7XG4gICAgICAgICAgICBpZihkPT1cIndoaXRlXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoZ2V0UGVyY2VudFR5cGUoXCJzdXBXaGl0ZVJhd1wiLGRhdGEudmFsdWUpKSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZD09XCJibGFja1wiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKGdldFBlcmNlbnRUeXBlKFwic3VwQmxhY2tcIiwoZGF0YS52YWx1ZSkpKSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZD09XCJoaXNwLlwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKGdldFBlcmNlbnRUeXBlKFwic3VwSGlzcFwiLChkYXRhLnZhbHVlKSkpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihkPT1cImFzaWFuXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoZ2V0UGVyY2VudFR5cGUoXCJzdXBBc2lhblwiLChkYXRhLnZhbHVlKSkpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihkPT1cImZlbWFsZVwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKGdldFBlcmNlbnRUeXBlKFwic3VwR2VuZGVyXCIsKGRhdGEudmFsdWUpKSkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFwidGJkXCI7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXRvb2wtdGlwLXRleHRcIilcbiAgICAgICAgO1xuXG4gICAgICBpZihjaGFydFR5cGUgPT0gXCJzd2FybVwiIHx8IGNoYXJ0VHlwZSA9PSBcIm5ld1wiKXtcblxuICAgICAgICBlbGVtZW50LnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICByZXR1cm4gXCJibGFja1wiO1xuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgICAgY2hhcnRUb29sVGlwXG4gICAgICAgICAgLnN0eWxlKFwidmlzaWJpbGl0eVwiLFwidmlzaWJsZVwiKVxuICAgICAgICAgIC5zdHlsZShcInRvcFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDQ1MCB8fCBtb2JpbGUpe1xuICAgICAgICAgICAgICByZXR1cm4gXCIwcHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYXRhLnkgKyBtb3VzZW92ZXJPZmZzZXRZICtcInB4XCJcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zdHlsZShcImxlZnRcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA0NTAgfHwgbW9iaWxlKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiMHB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGF0YS54ICsgZGF0YS52YWx1ZS5yYWRpdXMgKyBtb3VzZW92ZXJPZmZzZXRYICtcInB4XCI7XG4gICAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYoY2hhcnRUeXBlID09IFwic3dhcm0tc2NhdHRlclwiKXtcblxuICAgICAgICBlbGVtZW50LnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICByZXR1cm4gXCJibGFja1wiO1xuICAgICAgICB9KVxuICAgICAgICA7XG4gICAgICAgIGNoYXJ0VG9vbFRpcFxuICAgICAgICAgIC5zdHlsZShcInZpc2liaWxpdHlcIixcInZpc2libGVcIilcbiAgICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA0NTAgfHwgbW9iaWxlKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiMHB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHlTY2FsZShnZXRQZXJjZW50VHlwZShcInN1cFdoaXRlXCIsZGF0YS52YWx1ZSkpICsgbW91c2VvdmVyT2Zmc2V0WSArXCJweFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geVNjYWxlKGdldFBlcmNlbnRUeXBlKFwic3VwR2VuZGVyXCIsZGF0YS52YWx1ZSkpICsgbW91c2VvdmVyT2Zmc2V0WSArXCJweFwiXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA0NTAgfHwgbW9iaWxlKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiMHB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2VTdGFmZlwiLGRhdGEudmFsdWUpKSArIGRhdGEudmFsdWUucmFkaXVzICsgbW91c2VvdmVyT2Zmc2V0WCArXCJweFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyU3RhZmZcIixkYXRhLnZhbHVlKSkgKyBkYXRhLnZhbHVlLnJhZGl1cyArIG1vdXNlb3Zlck9mZnNldFggK1wicHhcIlxuICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1vdXNlT3V0RXZlbnRzKGRhdGEsZWxlbWVudCl7XG5cbiAgICAgIGNoYXJ0VG9vbFRpcFxuICAgICAgICAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsbnVsbClcbiAgICAgICAgO1xuXG4gICAgICBpZihjaGFydFR5cGUgPT0gXCJzd2FybVwiIHx8IGNoYXJ0VHlwZSA9PSBcIm5ld1wiKXtcblxuICAgICAgICBlbGVtZW50XG4gICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBnZXRQZXJjZW50VHlwZShjdXQsZC52YWx1ZSk7XG4gICAgICAgICAgICBpZigrZC5rZXkgPT0gbmV3c0lEU2VhcmNoKXtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ld3NJRFNlYXJjaENvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZC5rZXkgPT0gbmV3c0lkU2VsZWN0ZWQpe1xuICAgICAgICAgICAgICByZXR1cm4gZDMuY29sb3IoZ2VuZGVyQ29sb3JTY2FsZSh2YWx1ZSkpLmRhcmtlcihoaWdobGlnaHRlZENpcmNsZVN0cm9rZURhcmtuZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkMy5jb2xvcihnZW5kZXJDb2xvclNjYWxlKHZhbHVlKSkuZGFya2VyKDEpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuXG4gICAgICB9XG4gICAgICBlbHNlIGlmKGNoYXJ0VHlwZSA9PSBcInN3YXJtLXNjYXR0ZXJcIil7XG4gICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGdldFBlcmNlbnRUeXBlKGN1dCxkLnZhbHVlKTtcbiAgICAgICAgICAgIGlmKCtkLmtleSA9PSBuZXdzSURTZWFyY2gpe1xuICAgICAgICAgICAgICByZXR1cm4gbmV3c0lEU2VhcmNoQ29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihkLmtleSA9PSBuZXdzSWRTZWxlY3RlZCl7XG4gICAgICAgICAgICAgIHJldHVybiBkMy5jb2xvcihnZW5kZXJDb2xvclNjYWxlKHZhbHVlKSkuZGFya2VyKGhpZ2hsaWdodGVkQ2lyY2xlU3Ryb2tlRGFya25lc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfSlcbiAgICAgICAgICA7XG4gICAgICB9XG4gICAgICBlbHNlIGlmKGNoYXJ0VHlwZSA9PSBcImFycm93LXNjYXR0ZXJcIil7XG4gICAgICAgIC8vIGVsZW1lbnRcbiAgICAgICAgLy8gICAuc3R5bGUoXCJzdHJva2VcIixudWxsKVxuICAgICAgICAvLyAgIDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGFuZ2VUaXRsZSgpe1xuICAgICAgdmFyIHRpdGxlID0gXCJOZXdzcm9vbSA8c3Bhbj5HZW5kZXI8L3NwYW4+IEJyZWFrZG93blwiO1xuICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPiA0NTApe1xuICAgICAgICAgIHRpdGxlID0gXCJOZXdzcm9vbSA8c3Bhbj5XaGl0ZS9Ob24tV2hpdGU8L3NwYW4+IEJyZWFrZG93biB2cy4gQXVkaWVuY2VcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgIHRpdGxlID0gXCJOZXdzcm9vbSA8c3Bhbj5SYWNpYWw8L3NwYW4+IEJyZWFrZG93biB2cy4gQXVkaWVuY2VcIjtcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgICBpZihjaGFydFR5cGUgPT0gXCJzd2FybS1zY2F0dGVyXCIpe1xuICAgICAgICB0aXRsZSA9IFwiTmV3c3Jvb20gPHNwYW4+TGVhZGVyc2hpcDwvc3Bhbj4gdnMuIFN0YWZmXCI7XG4gICAgICAgIC8vIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgIC8vICAgdGl0bGUgPSBcIlJhY2lhbCBCcmVhay1kb3duIG9mIFN0YWZmIHZzLiA8c3Bhbj5MZWFkZXJzPC9zcGFuPlwiO1xuICAgICAgICAvLyB9XG4gICAgICB9XG4gICAgICAvLyBlbHNlIGlmKGNoYXJ0VHlwZSA9PSBcIm1pbmktbXVsdGlwbGVcIil7XG4gICAgICAvLyAgIHRpdGxlID0gXCI8c3Bhbj5DaGFuZ2U8L3NwYW4+IGluIEdlbmRlciBCcmVha2Rvd24gZnJvbSAyMDAyIC0gMjAxN1wiXG4gICAgICAvLyB9XG4gICAgICBlbHNlIGlmKGNoYXJ0VHlwZSA9PSBcImFycm93LXNjYXR0ZXJcIil7XG4gICAgICAgIHRpdGxlID0gXCJIb3cgTmV3c3Jvb21zIDxzcGFuPkNoYW5nZWQsIFwiK3llYXJPbGQrXCIgLSBcIit5ZWFyU2VsZWN0ZWQrXCI8L3NwYW4+XCJcbiAgICAgICAgLy8gdGl0bGUgPSBcIkhvdyBOZXdzcm9vbXMgPHNwYW4+Q2hhbmdlZCwgXCIreWVhck9sZCtcIiAtIFwiK3llYXJTZWxlY3RlZCtcIjwvc3Bhbj48c3BhbiBjbGFzcz0nY2hhcnQtdGl0bGUtbm90ZSc+PHNwYW4gY2xhc3M9J3JlZCc+Kjwvc3Bhbj5OZXdzcm9vbSBVc2VzIDIwMTcgRGF0YTwvc3Bhbj5cIlxuICAgICAgfVxuICAgICAgZWxzZSBpZihjaGFydFR5cGUgPT0gXCJhcnJvdy1zY2F0dGVyLWZ1bGxcIil7XG4gICAgICAgIHRpdGxlID0gXCJIb3cgTmV3c3Jvb21zIDxzcGFuPkNoYW5nZWQsIFwiK3llYXJPbGQrXCIgLSBcIit5ZWFyU2VsZWN0ZWQrXCI8L3NwYW4+XCJcbiAgICAgICAgLy8gdGl0bGUgPSBcIkhvdyBOZXdzcm9vbXMgPHNwYW4+Q2hhbmdlZCwgXCIreWVhck9sZCtcIiAtIFwiK3llYXJTZWxlY3RlZCtcIjwvc3Bhbj48c3BhbiBjbGFzcz0nY2hhcnQtdGl0bGUtbm90ZSc+PHNwYW4gY2xhc3M9J3JlZCc+Kjwvc3Bhbj5OZXdzcm9vbSBVc2VzIDIwMTcgRGF0YTwvc3Bhbj5cIlxuICAgICAgfVxuICAgICAgZWxzZSBpZihjaGFydFR5cGUgPT0gXCJ0YWJsZVwiKXtcbiAgICAgICAgdGl0bGUgPSBcIkluZGl2aWR1YWwgTmV3c3Jvb20gRGVtb2dyYXBoaWNzXCJcbiAgICAgICAgLy8gdGl0bGUgPSBcIkluZGl2aWR1YWwgTmV3c3Jvb20gRGVtb2dyYXBoaWNzPHNwYW4gY2xhc3M9J2NoYXJ0LXRpdGxlLW5vdGUnPjxzcGFuIGNsYXNzPSdyZWQnPio8L3NwYW4+TmV3c3Jvb20gVXNlcyAyMDE3IERhdGE8L3NwYW4+XCJcbiAgICAgIH1cbiAgICAgIGNoYXJ0VGl0bGUuaHRtbCh0aXRsZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldFdpZHRocyhjaGFydFR5cGUpe1xuICAgICAgaWYoY3V0PT1cImdlbmRlclwiKXtcbiAgICAgICAgaWYoY2hhcnRUeXBlID09IFwic3dhcm0tc2NhdHRlclwiKXtcbiAgICAgICAgICBleHRlbnRPdmVycmlkZSA9IGQzLmV4dGVudChuZXdzTmVzdCxmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHJldHVybiBnZXRQZXJjZW50VHlwZShcImdlbmRlclN0YWZmXCIsZC52YWx1ZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgIGV4dGVudE92ZXJyaWRlID0gZDMuZXh0ZW50KG5ld3NOZXN0LGZ1bmN0aW9uKGQpeyByZXR1cm4gZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlKX0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICBleHRlbnRPdmVycmlkZSA9IGQzLmV4dGVudChuZXdzTmVzdCxmdW5jdGlvbihkKXsgcmV0dXJuIGdldFBlcmNlbnRUeXBlKFwicmFjZVwiLGQudmFsdWUpfSk7XG4gICAgICB9XG5cbiAgICAgIGlmKGNoYXJ0VHlwZSA9PSBcInN3YXJtXCIgfHwgY2hhcnRUeXBlID09IFwibmV3XCIpe1xuICAgICAgICBtYXJnaW4gPSB7dG9wOiA0MCwgcmlnaHQ6IDIwLCBib3R0b206IDUwLCBsZWZ0OiAyMH07XG4gICAgICAgIHdpZHRoID0gMTAwMCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgICAgICBoZWlnaHQgPSAzMjUgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDEwMDApe1xuICAgICAgICAgIHdpZHRoID0gdmlld3BvcnRXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA0MDAgfHwgbW9iaWxlKXtcbiAgICAgICAgICBoZWlnaHQgPSA0MDAgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgICAgICAgfVxuICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgIHhTY2FsZS5kb21haW4oWy0xLDFdKS5yYW5nZShbMCx3aWR0aF0pLmNsYW1wKHRydWUpO1xuICAgICAgICAgIG5ld3NOZXN0QXZlcmFnZVQxID0gZDMubWVhbihuZXdzTmVzdCxmdW5jdGlvbihkKXsgcmV0dXJuIGQudmFsdWUud2hpdGVEZWx0YTt9KTtcbiAgICAgICAgICBnZW5kZXJDb2xvclNjYWxlLmRvbWFpbihbLTEsMCwxXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZihjdXQgPT0gXCJnZW5kZXJcIil7XG4gICAgICAgICAgbmV3c05lc3RBdmVyYWdlVDEgPSBkMy5tZWFuKG5ld3NOZXN0LGZ1bmN0aW9uKGQpeyByZXR1cm4gZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlKX0pO1xuICAgICAgICAgIHhTY2FsZS5kb21haW4oWy4yLC44XSkucmFuZ2UoWzAsd2lkdGhdKS5jbGFtcCh0cnVlKTtcbiAgICAgICAgICBpZihleHRlbnRPdmVycmlkZVswXSA8IC4yKXtcbiAgICAgICAgICAgIHhTY2FsZS5kb21haW4oW2V4dGVudE92ZXJyaWRlWzBdLC44XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGV4dGVudE92ZXJyaWRlWzFdID4gLjgpe1xuICAgICAgICAgICAgeFNjYWxlLmRvbWFpbihbLjIsZXh0ZW50T3ZlcnJpZGVbMV1dKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZXh0ZW50T3ZlcnJpZGVbMF0gPCAuMiAmJiBleHRlbnRPdmVycmlkZVsxXSA+IC44KXtcbiAgICAgICAgICAgIHhTY2FsZS5kb21haW4oW2V4dGVudE92ZXJyaWRlWzBdLGV4dGVudE92ZXJyaWRlWzFdXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGdlbmRlckNvbG9yU2NhbGUuZG9tYWluKFsuMiwuNSwuOF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmKGNoYXJ0VHlwZSA9PSBcInN3YXJtLXNjYXR0ZXJcIil7XG4gICAgICAgIG5ld1RvZ2dsZUZvclJhY2VBbmRHZW5kZXIuY2xhc3NlZChcInN3YXJtLXNjYXR0ZXItc2VsZWN0ZWRcIix0cnVlKTtcbiAgICAgICAgbWFyZ2luID0ge3RvcDogMCwgcmlnaHQ6IDIwLCBib3R0b206IDYwLCBsZWZ0OiAyMH07XG4gICAgICAgIHdpZHRoID0gNjgwIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA2ODApe1xuICAgICAgICAgIG1hcmdpbiA9IHt0b3A6IDMwLCByaWdodDogMjAsIGJvdHRvbTogNjAsIGxlZnQ6IDIwfTtcbiAgICAgICAgICB3aWR0aCA9IHZpZXdwb3J0V2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBoZWlnaHQgPSA1NzUgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDY4MCl7XG4gICAgICAgICAgaGVpZ2h0ID0gNDc1IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gICAgICAgIH1cbiAgICAgICAgeFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy4yLC44XSkucmFuZ2UoWzAsd2lkdGhdKS5jbGFtcCh0cnVlKTtcbiAgICAgICAgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy4yLC44XSkucmFuZ2UoW2hlaWdodCwwXSkuY2xhbXAodHJ1ZSk7XG4gICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgeFNjYWxlLmRvbWFpbihbMCwuODVdKS5yYW5nZShbMCx3aWR0aF0pLmNsYW1wKHRydWUpO1xuICAgICAgICAgIHlTY2FsZS5kb21haW4oWzAsLjg1XSkucmFuZ2UoW2hlaWdodCwwXSkuY2xhbXAodHJ1ZSk7XG4gICAgICAgICAgbmV3c05lc3RBdmVyYWdlVDEgPSBkMy5tZWFuKG5ld3NOZXN0LGZ1bmN0aW9uKGQpeyByZXR1cm4gZ2V0UGVyY2VudFR5cGUoXCJyYWNlU3RhZmZcIixkLnZhbHVlKX0pO1xuICAgICAgICAgIG5ld3NOZXN0U3VwQXZlcmFnZVQxID0gZDMubWVhbihuZXdzTmVzdCxmdW5jdGlvbihkKXsgcmV0dXJuIGdldFBlcmNlbnRUeXBlKFwic3VwV2hpdGVcIixkLnZhbHVlKX0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgeFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy4yLC44XSkucmFuZ2UoWzAsd2lkdGhdKS5jbGFtcCh0cnVlKTtcbiAgICAgICAgICB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbLjIsLjhdKS5yYW5nZShbaGVpZ2h0LDBdKS5jbGFtcCh0cnVlKTtcbiAgICAgICAgICBpZihleHRlbnRPdmVycmlkZVswXSA8LjIpe1xuICAgICAgICAgICAgeFNjYWxlLmRvbWFpbihbZXh0ZW50T3ZlcnJpZGVbMF0sLjhdKVxuICAgICAgICAgIH1cbiAgICAgICAgICBuZXdzTmVzdEF2ZXJhZ2VUMSA9IGQzLm1lYW4obmV3c05lc3QsZnVuY3Rpb24oZCl7IHJldHVybiBnZXRQZXJjZW50VHlwZShcImdlbmRlclN0YWZmXCIsZC52YWx1ZSl9KTtcbiAgICAgICAgICBuZXdzTmVzdFN1cEF2ZXJhZ2VUMSA9IGQzLm1lYW4obmV3c05lc3QsZnVuY3Rpb24oZCl7IHJldHVybiBnZXRQZXJjZW50VHlwZShcInN1cEdlbmRlclwiLGQudmFsdWUpfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYoY2hhcnRUeXBlPT1cImFycm93LXNjYXR0ZXJcIil7XG4gICAgICAgIG5ld1RvZ2dsZUZvclJhY2VBbmRHZW5kZXIuY2xhc3NlZChcImFycm93LXNjYXR0ZXItc2VsZWN0ZWRcIix0cnVlKTtcbiAgICAgICAgbWFyZ2luID0ge3RvcDogNzAsIHJpZ2h0OiAxMDAsIGJvdHRvbTogNDAsIGxlZnQ6IDIwMH07XG4gICAgICAgIHdpZHRoID0gOTUwIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA5NTApe1xuICAgICAgICAgIG1hcmdpbiA9IHt0b3A6IDcwLCByaWdodDogMjAsIGJvdHRvbTogNDAsIGxlZnQ6IDIwMH07XG4gICAgICAgICAgd2lkdGggPSB2aWV3cG9ydFdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDQ1MCl7XG4gICAgICAgICAgbWFyZ2luID0ge3RvcDogNjUsIHJpZ2h0OiAyMCwgYm90dG9tOiA0MCwgbGVmdDogMTUwfTtcbiAgICAgICAgICB3aWR0aCA9IHZpZXdwb3J0V2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBoZWlnaHQgPSA0NTAgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgICAgICAgeFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy4yLC44XSkucmFuZ2UoWzAsd2lkdGhdKS5jbGFtcCh0cnVlKTtcbiAgICAgICAgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy4yLC44XSkucmFuZ2UoW2hlaWdodCwwXSkuY2xhbXAodHJ1ZSk7XG4gICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA2MDApe1xuICAgICAgICAgIHhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKCkuZG9tYWluKFsuMjUsLjc1XSkucmFuZ2UoWzAsd2lkdGhdKS5jbGFtcCh0cnVlKTtcbiAgICAgICAgICB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbLjI1LC43NV0pLnJhbmdlKFtoZWlnaHQsMF0pLmNsYW1wKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmKGN1dD09XCJnZW5kZXJcIil7XG4gICAgICAgICAgaWYoZXh0ZW50T3ZlcnJpZGVbMF0gPC4yKXtcbiAgICAgICAgICAgIHhTY2FsZS5kb21haW4oW2V4dGVudE92ZXJyaWRlWzBdLC44XSlcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihleHRlbnRPdmVycmlkZVsxXSA+IC44KXtcbiAgICAgICAgICAgIHhTY2FsZS5kb21haW4oWy4yLGV4dGVudE92ZXJyaWRlWzFdXSlcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihleHRlbnRPdmVycmlkZVsxXSA+IC44ICYmIGV4dGVudE92ZXJyaWRlWzBdIDwuMil7XG4gICAgICAgICAgICB4U2NhbGUuZG9tYWluKFtleHRlbnRPdmVycmlkZVswXSxleHRlbnRPdmVycmlkZVsxXV0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgeFNjYWxlLmRvbWFpbihbLTEsMV0pLnJhbmdlKFswLHdpZHRoXSkuY2xhbXAodHJ1ZSk7XG4gICAgICAgICAgbmV3c05lc3RBdmVyYWdlVDEgPSBkMy5tZWFuKG5ld3NOZXN0LGZ1bmN0aW9uKGQpeyByZXR1cm4gZC52YWx1ZS53aGl0ZURlbHRhO30pO1xuICAgICAgICAgIGdlbmRlckNvbG9yU2NhbGUuZG9tYWluKFstMSwwLDFdKTtcbiAgICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgODIwKXtcbiAgICAgICAgICAgIHhTY2FsZS5kb21haW4oWy0xLDBdKS5yYW5nZShbMCx3aWR0aF0pLmNsYW1wKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZihjaGFydFR5cGU9PVwiYXJyb3ctc2NhdHRlci1mdWxsXCIpe1xuXG4gICAgICAgIG1hcmdpbiA9IHt0b3A6IDcwLCByaWdodDogMTUwLCBib3R0b206IDQwLCBsZWZ0OiAxNTB9O1xuICAgICAgICB3aWR0aCA9IDk1MCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgOTUwKXtcbiAgICAgICAgICBuZXdUb2dnbGVGb3JSYWNlQW5kR2VuZGVyLmNsYXNzZWQoXCJhcnJvdy1zY2F0dGVyLWZ1bGwtc2VsZWN0ZWRcIix0cnVlKTtcbiAgICAgICAgICBtYXJnaW4gPSB7dG9wOiA3MCwgcmlnaHQ6IDUwLCBib3R0b206IDQwLCBsZWZ0OiA1MH07XG4gICAgICAgICAgd2lkdGggPSB2aWV3cG9ydFdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDQwMCl7XG4gICAgICAgICAgbmV3VG9nZ2xlRm9yUmFjZUFuZEdlbmRlci5jbGFzc2VkKFwiYXJyb3ctc2NhdHRlci1mdWxsLXNlbGVjdGVkXCIsZmFsc2UpO1xuICAgICAgICAgIG1hcmdpbiA9IHt0b3A6IDUwLCByaWdodDogNTAsIGJvdHRvbTogNDAsIGxlZnQ6IDEwfTtcbiAgICAgICAgICB3aWR0aCA9IHZpZXdwb3J0V2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgNzAwKXtcbiAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgIG1hcmdpbiA9IHt0b3A6IDUwLCByaWdodDogMTAsIGJvdHRvbTogNDAsIGxlZnQ6IDEwfTtcbiAgICAgICAgICAgIHdpZHRoID0gdmlld3BvcnRXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBoZWlnaHQgPSA0NTAgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgICAgICAgeFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy4yLC44XSkucmFuZ2UoWzAsd2lkdGhdKS5jbGFtcCh0cnVlKTtcbiAgICAgICAgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWy4yLC44XSkucmFuZ2UoW2hlaWdodCwwXSkuY2xhbXAodHJ1ZSk7XG5cbiAgICAgICAgaWYoY3V0PT1cImdlbmRlclwiKXtcbiAgICAgICAgICBpZihleHRlbnRPdmVycmlkZVswXSA8LjIpe1xuICAgICAgICAgICAgeFNjYWxlLmRvbWFpbihbZXh0ZW50T3ZlcnJpZGVbMF0sLjhdKVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKGV4dGVudE92ZXJyaWRlWzFdID4gLjgpe1xuICAgICAgICAgICAgeFNjYWxlLmRvbWFpbihbLjIsZXh0ZW50T3ZlcnJpZGVbMV1dKVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKGV4dGVudE92ZXJyaWRlWzFdID4gLjggJiYgZXh0ZW50T3ZlcnJpZGVbMF0gPC4yKXtcbiAgICAgICAgICAgIHhTY2FsZS5kb21haW4oW2V4dGVudE92ZXJyaWRlWzBdLGV4dGVudE92ZXJyaWRlWzFdXSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBuZXdzTmVzdEF2ZXJhZ2VUMCA9IGQzLm1lYW4obmV3c05lc3QsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoZC52YWx1ZS5wcmV2aW91c1llYXIgPT0gXCJuL2FcIil7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGQudmFsdWUucHJldmlvdXNZZWFyO1xuICAgICAgICB9KTtcbiAgICAgICAgbmV3c05lc3RBdmVyYWdlVDEgPSBkMy5tZWFuKG5ld3NOZXN0LGZ1bmN0aW9uKGQpeyByZXR1cm4gZC52YWx1ZS5jdXJyZW50WWVhcjt9KTtcbiAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICB4U2NhbGUuZG9tYWluKFstMSwxXSkucmFuZ2UoWzAsd2lkdGhdKS5jbGFtcCh0cnVlKTtcbiAgICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgNzAwKXtcbiAgICAgICAgICAgIHhTY2FsZS5kb21haW4oWy0xLC4zNV0pLnJhbmdlKFswLHdpZHRoXSkuY2xhbXAodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA0NTApe1xuICAgICAgICAgICAgeFNjYWxlLmRvbWFpbihbLS43NSwuMzVdKS5yYW5nZShbMCx3aWR0aF0pLmNsYW1wKHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXdzTmVzdEF2ZXJhZ2VUMCA9IGQzLm1lYW4obmV3c05lc3QsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZ2V0UGVyY2VudFR5cGUoXCJyYWNlLW9sZFwiLGQudmFsdWUpO1xuICAgICAgICAgICAgaWYocmVzdWx0ID09IFwibi9hXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbmV3c05lc3RBdmVyYWdlVDEgPSBkMy5tZWFuKG5ld3NOZXN0LGZ1bmN0aW9uKGQpeyByZXR1cm4gZC52YWx1ZS53aGl0ZURlbHRhO30pO1xuICAgICAgICAgIGdlbmRlckNvbG9yU2NhbGUuZG9tYWluKFstMSwwLDFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZihjaGFydFR5cGU9PVwidGFibGVcIil7XG4gICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA3MDApe1xuICAgICAgICAgIG5ld1RvZ2dsZUZvclJhY2VBbmRHZW5kZXIuY2xhc3NlZChcInRhYmxlLXNlbGVjdGVkXCIsdHJ1ZSk7XG4gICAgICAgICAgbWFyZ2luID0ge3RvcDogNzAsIHJpZ2h0OiA1MCwgYm90dG9tOiA0MCwgbGVmdDogNTB9O1xuICAgICAgICAgIHdpZHRoID0gdmlld3BvcnRXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGNoYXJ0RGl2Q29udGFpbmVyVGFibGUudHJhbnNpdGlvbigpLmR1cmF0aW9uKDApLnN0eWxlKFwib3BhY2l0eVwiLDEpO1xuICAgICAgICBtYXJnaW4gPSB7dG9wOiA0MCwgcmlnaHQ6IDIwLCBib3R0b206IDIwLCBsZWZ0OiAyMH07XG4gICAgICAgIHdpZHRoID0gMTAwMCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgICAgICBoZWlnaHQgPSAyNTAgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcbiAgICAgICAgaWYodXJsUGFyYW1FbWJlZCE9XCJcIil7XG4gICAgICAgICAgaGVpZ2h0ID0gMjEwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gICAgICAgIH1cbiAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDEwMDApe1xuICAgICAgICAgIG1hcmdpbiA9IHt0b3A6IDQwLCByaWdodDogMjAsIGJvdHRvbTogMjAsIGxlZnQ6IDIwfTtcbiAgICAgICAgICB3aWR0aCA9IHZpZXdwb3J0V2lkdGggLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgNzAwKXtcbiAgICAgICAgICBtYXJnaW4gPSB7dG9wOiAxNjAsIHJpZ2h0OiAyMCwgYm90dG9tOiAyMCwgbGVmdDogMjB9O1xuICAgICAgICAgIHdpZHRoID0gdmlld3BvcnRXaWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICAgICAgICAgIGhlaWdodCA9IDI4MCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICAgICAgICAgIGNvbnNvbGUubG9nKHVybFBhcmFtRW1iZWQpO1xuICAgICAgICAgIGlmKHVybFBhcmFtRW1iZWQhPVwiXCIpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJoZXJlXCIpO1xuICAgICAgICAgICAgaGVpZ2h0ID0gMjEwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA0NTApe1xuICAgICAgICAgIG1hcmdpbiA9IHt0b3A6IDE2MCwgcmlnaHQ6IDIwLCBib3R0b206IDIwLCBsZWZ0OiAyMH07XG4gICAgICAgICAgd2lkdGggPSB2aWV3cG9ydFdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gICAgICAgICAgaGVpZ2h0ID0gMjEwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gICAgICAgIH1cblxuICAgICAgICB4U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbLjIsLjhdKS5yYW5nZShbMCx3aWR0aF0pLmNsYW1wKHRydWUpO1xuICAgICAgICB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbLjIsLjhdKS5yYW5nZShbaGVpZ2h0LDBdKS5jbGFtcCh0cnVlKTtcbiAgICAgICAgcmFkaXVzU2NhbGUucmFuZ2UoWzQsMjddKTtcbiAgICAgICAgdG9nZ2xlVHlwZS5zdHlsZShcInZpc2liaWxpdHlcIixcImhpZGRlblwiKTtcbiAgICAgICAgc2VhcmNoTWFwLnN0eWxlKFwiZGlzcGxheVwiLFwiYmxvY2tcIik7XG4gICAgICB9XG4gICAgICBpZihjaGFydFR5cGUhPVwidGFibGVcIiAmJiBjaGFydFR5cGUgIT0gXCJuZXdcIil7XG4gICAgICAgIHJhZGl1c1NjYWxlLnJhbmdlKFs0LDI3XSk7XG4gICAgICAgIHNlYXJjaE1hcC5zdHlsZShcImRpc3BsYXlcIixudWxsKTtcbiAgICAgICAgdG9nZ2xlVHlwZS5zdHlsZShcInZpc2liaWxpdHlcIixudWxsKTtcbiAgICAgICAgY2hhcnREaXZDb250YWluZXJUYWJsZS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMCkuc3R5bGUoXCJvcGFjaXR5XCIsMCk7XG4gICAgICAgIDtcbiAgICAgIH1cbiAgICAgIGlmKGNoYXJ0VHlwZSE9XCJhcnJvdy1zY2F0dGVyXCIgJiYgY2hhcnRUeXBlICE9XCJhcnJvdy1zY2F0dGVyLWZ1bGxcIiAmJiBjaGFydFR5cGUgIT0gXCJuZXdcIil7XG4gICAgICAgIGNlbGxMaW5lLnRyYW5zaXRpb24oKS5kdXJhdGlvbigwKS5zdHlsZShcIm9wYWNpdHlcIiwwKTtcbiAgICAgIH1cbiAgICAgIGlmKGNoYXJ0VHlwZSE9XCJhcnJvdy1zY2F0dGVyXCIgJiYgY2hhcnRUeXBlICE9IFwibmV3XCIpe1xuICAgICAgICBjZWxsQ2lyY2xlVHdvLnRyYW5zaXRpb24oKS5kdXJhdGlvbigwKS5zdHlsZShcIm9wYWNpdHlcIiwwKTtcbiAgICAgICAgY2VsbC5zdHlsZShcIm9wYWNpdHlcIixudWxsKTtcbiAgICAgICAgY2VsbFRleHQudHJhbnNpdGlvbigpLmR1cmF0aW9uKDApLnN0eWxlKFwib3BhY2l0eVwiLDApO1xuICAgICAgfVxuICAgICAgaWYoY2hhcnRUeXBlIT1cImFycm93LXNjYXR0ZXItZnVsbFwiICYmIGNoYXJ0VHlwZSAhPSBcIm5ld1wiKXtcbiAgICAgICAgY2VsbFRleHQuc3R5bGUoXCJ0cmFuc2Zvcm1cIixudWxsKTtcbiAgICAgICAgY2VsbERhc2guc3R5bGUoXCJvcGFjaXR5XCIsMClcbiAgICAgIH1cbiAgICAgIGlmKGNoYXJ0VHlwZSA9PSBcInN3YXJtLXNjYXR0ZXJcIiB8fCBjaGFydFR5cGUgPT0gXCJhcnJvdy1zY2F0dGVyXCIgfHwgY2hhcnRUeXBlID09IFwiYXJyb3ctc2NhdHRlci1mdWxsXCIpe1xuICAgICAgICBzZWFyY2hSZXN1bHRzQ29udGFpbmVyLmNsYXNzZWQoXCJzZWFyY2gtcmVzdWx0cy10b3Atc2hpZnRcIix0cnVlKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY2hhcnRUeXBlICE9IFwibmV3XCIpe1xuICAgICAgICBzZWFyY2hSZXN1bHRzQ29udGFpbmVyLmNsYXNzZWQoXCJzZWFyY2gtcmVzdWx0cy10b3Atc2hpZnRcIixmYWxzZSlcbiAgICAgIH1cblxuICAgICAgaWYodmlld3BvcnRXaWR0aCA+IDQ1MCl7XG4gICAgICAgIGNoYXJ0VGl0bGUudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMClcbiAgICAgICAgICAuc3R5bGUoXCJ3aWR0aFwiLHdpZHRoK1wicHhcIilcbiAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsMCtcInB4XCIpXG4gICAgICAgICAgLnN0eWxlKFwidGV4dC1hbGlnblwiLG51bGwpXG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICBpZihjaGFydFR5cGUgPT0gXCJ0YWJsZVwiKXtcbiAgICAgICAgICBjaGFydFRpdGxlLnRyYW5zaXRpb24oKS5kdXJhdGlvbig1MDApXG4gICAgICAgICAgICAuc3R5bGUoXCJ3aWR0aFwiLFwiOTAlXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsMCtcInB4XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFsaWduXCIsXCJjZW50ZXJcIilcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgIGNoYXJ0VGl0bGUudHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMClcbiAgICAgICAgICAgIC5zdHlsZShcIndpZHRoXCIsXCI5MCVcIilcbiAgICAgICAgICAgIC5zdHlsZShcImxlZnRcIiwwK1wicHhcIilcbiAgICAgICAgICAgIC5zdHlsZShcInRleHQtYWxpZ25cIixudWxsKVxuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgaWYoY2hhcnRUeXBlIT1cInN3YXJtLXNjYXR0ZXJcIiAmJiBjaGFydFR5cGUgIT0gXCJuZXdcIil7XG4gICAgICAgIG5ld1RvZ2dsZUZvclJhY2VBbmRHZW5kZXIuY2xhc3NlZChcInN3YXJtLXNjYXR0ZXItc2VsZWN0ZWRcIixmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZihjaGFydFR5cGUhPVwiYXJyb3ctc2NhdHRlclwiICYmIGNoYXJ0VHlwZSAhPSBcIm5ld1wiKXtcbiAgICAgICAgbmV3VG9nZ2xlRm9yUmFjZUFuZEdlbmRlci5jbGFzc2VkKFwiYXJyb3ctc2NhdHRlci1zZWxlY3RlZFwiLGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmKGNoYXJ0VHlwZSE9XCJhcnJvdy1zY2F0dGVyLWZ1bGxcIiAmJiBjaGFydFR5cGUgIT0gXCJuZXdcIil7XG4gICAgICAgIG5ld1RvZ2dsZUZvclJhY2VBbmRHZW5kZXIuY2xhc3NlZChcImFycm93LXNjYXR0ZXItZnVsbC1zZWxlY3RlZFwiLGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGlmKGNoYXJ0VHlwZSE9XCJ0YWJsZVwiICYmIGNoYXJ0VHlwZSAhPSBcIm5ld1wiKXtcbiAgICAgICAgbmV3VG9nZ2xlRm9yUmFjZUFuZEdlbmRlci5jbGFzc2VkKFwidGFibGUtc2VsZWN0ZWRcIixmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmKGNoYXJ0VHlwZSA9PSBcIm5ld1wiKXtcblxuICAgICAgfVxuICAgICAgZWxzZSBpZihjaGFydFR5cGU9PVwiYXJyb3ctc2NhdHRlci1mdWxsXCIgfHwgY2hhcnRUeXBlID09IFwiYXJyb3ctc2NhdHRlclwiKXtcbiAgICAgICAgc2VhcmNoUmVzdWx0VGV4dC5zdHlsZShcInBvaW50ZXItZXZlbnRzXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXItb2xkXCIsZC52YWx1ZSk7XG4gICAgICAgICAgICBpZihyZXN1bHQ9PVwibi9hXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gXCJub25lXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyLW9sZFwiLGQudmFsdWUpO1xuICAgICAgICAgICAgaWYocmVzdWx0ID09IFwibi9hXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gXCIoVW5hdmFpbDogTm8gMjAwMSBEYXRhKSBcIitkLnZhbHVlLmNvbXBhbnlOYW1lLnJlcGxhY2UoL1xcYlxcdy9nLCBsID0+IGwudG9VcHBlckNhc2UoKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkLnZhbHVlLmNvbXBhbnlOYW1lLnJlcGxhY2UoL1xcYlxcdy9nLCBsID0+IGwudG9VcHBlckNhc2UoKSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIDtcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIHNlYXJjaFJlc3VsdFRleHRcbiAgICAgICAgICAuc3R5bGUoXCJwb2ludGVyLWV2ZW50c1wiLG51bGwpXG4gICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICByZXR1cm4gZC52YWx1ZS5jb21wYW55TmFtZS5yZXBsYWNlKC9cXGJcXHcvZywgbCA9PiBsLnRvVXBwZXJDYXNlKCkpXG4gICAgICAgICAgfSlcbiAgICAgICAgICA7XG4gICAgICB9XG5cbiAgICAgIGNoYXJ0RGl2Q29udGFpbmVyXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAvLyAuZGVsYXkoZHVyYXRpb24pXG4gICAgICAgIC5zdHlsZShcIndpZHRoXCIsd2lkdGgrbWFyZ2luLmxlZnQrbWFyZ2luLnJpZ2h0K1wicHhcIilcblxuICAgICAgY2hhcnRUb29sVGlwXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIilcbiAgICAgICAgO1xuXG4gICAgICBjaGFydERpdlxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIixoZWlnaHQrbWFyZ2luLnRvcCttYXJnaW4uYm90dG9tKVxuICAgICAgICAvLyAudHJhbnNpdGlvbigpXG4gICAgICAgIC8vIC5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLHdpZHRoK21hcmdpbi5sZWZ0K21hcmdpbi5yaWdodClcbiAgICAgICAgO1xuXG4gICAgICBjaGFydEdcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oNTAwKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xuXG4gICAgICBjaGFydEF4aXNcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oNTAwKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xuXG5cblxuICAgIH1cblxuICAgIGNoYW5nZVRpdGxlKCk7XG5cbiAgICBzZXRXaWR0aHMoY2hhcnRUeXBlKTtcblxuICAgIGlmKGNoYXJ0VHlwZSA9PSBcInN3YXJtLXNjYXR0ZXJcIil7XG5cbiAgICAgIGNlbGxDaXJjbGUgPSBjZWxsLnNlbGVjdEFsbChcIi5zd2FybS1jaXJjbGVcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgdmFyIGRhdGEgPSBkO1xuICAgICAgICAgIG1vdXNlT3ZlckV2ZW50cyhkYXRhLGQzLnNlbGVjdCh0aGlzKSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgdmFyIGRhdGEgPSBkO1xuICAgICAgICAgIG1vdXNlT3V0RXZlbnRzKGRhdGEsZDMuc2VsZWN0KHRoaXMpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIGNlbGxDaXJjbGVcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5kZWxheShmdW5jdGlvbihkLGkpe1xuICAgICAgICAgIGlmKHVybFBhcmFtIT1cIlwiKXtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaSoxMDtcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLDEpXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwicmFjZVN0YWZmXCIsZC52YWx1ZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyU3RhZmZcIixkLnZhbHVlKSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZS5yYWRpdXNcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICAgIHJldHVybiB5U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJzdXBXaGl0ZVwiLGQudmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHlTY2FsZShnZXRQZXJjZW50VHlwZShcInN1cEdlbmRlclwiLGQudmFsdWUpKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKCtkLmtleSA9PSBuZXdzSURTZWFyY2gpe1xuICAgICAgICAgICAgcmV0dXJuIG5ld3NJRFNlYXJjaENvbG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZ2V0UGVyY2VudFR5cGUoY3V0LGQudmFsdWUpO1xuXG4gICAgICAgICAgaWYoK2Qua2V5ID09IG5ld3NJRFNlYXJjaCl7XG4gICAgICAgICAgICByZXR1cm4gbmV3c0lEU2VhcmNoQ29sb3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKCtkLmtleSA9PSBuZXdzSWRTZWxlY3RlZCl7XG4gICAgICAgICAgICByZXR1cm4gZDMuY29sb3IoZ2VuZGVyQ29sb3JTY2FsZSh2YWx1ZSkpLmRhcmtlcihoaWdobGlnaHRlZENpcmNsZVN0cm9rZURhcmtuZXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKGQua2V5PT1uZXdzSWRTZWxlY3RlZCl7XG4gICAgICAgICAgICByZXR1cm4gXCIycHhcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKGQua2V5ID09IG5ld3NJZFNlbGVjdGVkKXtcbiAgICAgICAgICAgIHZhciBpdGVtID0gZDMuc2VsZWN0KHRoaXMpO1xuXG4gICAgICAgICAgICB2YXIgeSA9IDA7XG4gICAgICAgICAgICB2YXIgeCA9IDA7XG4gICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICB5ID0geVNjYWxlKGdldFBlcmNlbnRUeXBlKFwic3VwV2hpdGVcIixkLnZhbHVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICB5ID0geVNjYWxlKGdldFBlcmNlbnRUeXBlKFwic3VwR2VuZGVyXCIsZC52YWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICB4ID0geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwicmFjZVN0YWZmXCIsZC52YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgeCA9IHhTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlclN0YWZmXCIsZC52YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGlnaGxpZ2h0ZWRQb3NpdGlvbiA9IFt4LHksZC52YWx1ZS5yYWRpdXNdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgO1xuXG4gICAgICBjZWxsQ2lyY2xlXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuICtkLmtleSA9PSBuZXdzSURTZWFyY2g7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcInN0cm9rZS1vcGFjaXR5XCIsLjUpXG4gICAgICAgIC5zdHlsZShcInotaW5kZXhcIiwxMDAwMDAwMDAwKVxuICAgICAgICAudHJhbnNpdGlvbihcImJvcmRlclwiKVxuICAgICAgICAuZHVyYXRpb24oMTAwMClcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsXCIxMHB4XCIpXG4gICAgICAgIC50cmFuc2l0aW9uKFwiYm9yZGVyXCIpXG4gICAgICAgIC5kdXJhdGlvbigxMDAwKVxuICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIixcIjFweFwiKVxuICAgICAgICAuc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLDEpXG4gICAgICAgIDtcblxuICAgICAgY2VsbEltYWdlcyA9IGNlbGwuc2VsZWN0QWxsKFwiLnN3YXJtLWltYWdlLWNvbnRhaW5lclwiKVxuXG4gICAgICBjZWxsSW1hZ2VzXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJyYWNlU3RhZmZcIixkLnZhbHVlKSkgKyBcIixcIiArIHlTY2FsZShnZXRQZXJjZW50VHlwZShcInN1cFdoaXRlXCIsZC52YWx1ZSkpICsgXCIpXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyU3RhZmZcIixkLnZhbHVlKSkgKyBcIixcIiArIHlTY2FsZShnZXRQZXJjZW50VHlwZShcInN1cEdlbmRlclwiLGQudmFsdWUpKSArIFwiKVwiXG4gICAgICAgIH0pXG4gICAgICAgIDtcblxuICAgICAgLy8gaWYocmVidWlsZEF4aXMpe1xuICAgICAgICBjaGFydEF4aXNcbiAgICAgICAgICAuc2VsZWN0KFwiZ1wiKVxuICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAuZHVyYXRpb24oMjUwKVxuICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwwKVxuICAgICAgICAgIC5vbihcImVuZFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnJlbW92ZSgpO1xuICAgICAgICAgICAgYnVpbGRBeGlzKCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICA7XG4gICAgICAvLyB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkQXhpcygpe1xuXG4gICAgICAgIHZhciBjaGFydEF4aXNDb250YWluZXIgPSBjaGFydEF4aXMuYXBwZW5kKFwiZ1wiKVxuXG4gICAgICAgIHZhciBjaGFydEF4aXNMaW5lcyA9IGNoYXJ0QXhpc0NvbnRhaW5lci5hcHBlbmQoXCJnXCIpXG5cbiAgICAgICAgY2hhcnRBeGlzTGluZXNcbiAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLXNjYXR0ZXItcmVjdC1nZW5kZXItZ1wiKVxuICAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tc2NhdHRlci1yZWN0LWdlbmRlci1saW5lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4MVwiLDApXG4gICAgICAgICAgLmF0dHIoXCJ4MlwiLHdpZHRoKVxuICAgICAgICAgIC5hdHRyKFwieTFcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHJldHVybiBoZWlnaHQvMjtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKFwieTJcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHJldHVybiBoZWlnaHQvMjtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zdHlsZShcInZpc2liaWxpdHlcIixmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICAgIHJldHVybiBcImhpZGRlblwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIDtcblxuICAgICAgICBjaGFydEF4aXNMaW5lc1xuICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLXNjYXR0ZXIteC1heGlzLWxpbmVzXCIpXG4gICAgICAgICAuc2VsZWN0QWxsKFwibGluZVwiKVxuICAgICAgICAgLmRhdGEoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICAgcmV0dXJuIFsuMSwuMywuNSwuN11cbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gWy4yNSwuMzUsLjQ1LC41NSwuNjUsLjc1XTtcbiAgICAgICAgIH0pXG4gICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgIC5hdHRyKFwieDFcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgcmV0dXJuIHhTY2FsZShkKTtcbiAgICAgICAgIH0pXG4gICAgICAgICAuYXR0cihcIngyXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgIHJldHVybiB4U2NhbGUoZCk7XG4gICAgICAgICB9KVxuICAgICAgICAgLmF0dHIoXCJ5MVwiLDApXG4gICAgICAgICAuYXR0cihcInkyXCIsaGVpZ2h0KVxuICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy1saW5lXCIpXG4gICAgICAgICA7XG5cbiAgICAgICAgY2hhcnRBeGlzTGluZXMuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLXNjYXR0ZXIteS1heGlzLWxpbmVzXCIpXG4gICAgICAgICAgLnNlbGVjdEFsbChcImxpbmVcIilcbiAgICAgICAgICAuZGF0YShmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICAgIHJldHVybiBbLjEsLjMsLjUsLjddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFsuMywuNSwuNCwuNiwuN107XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4MVwiLDApXG4gICAgICAgICAgLmF0dHIoXCJ4MlwiLHdpZHRoKVxuICAgICAgICAgIC5hdHRyKFwieTFcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHJldHVybiB5U2NhbGUoZCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cihcInkyXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICByZXR1cm4geVNjYWxlKGQpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy1saW5lXCIpXG4gICAgICAgICAgO1xuXG4gICAgICAgIHZhciBjaGFydEF4aXNUZXh0ID0gY2hhcnRBeGlzQ29udGFpbmVyLmFwcGVuZChcImdcIilcblxuICAgICAgICBjaGFydEF4aXNUZXh0XG4gICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgIC5kYXRhKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgNDUwKXtcbiAgICAgICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcIuKGkCBNb3JlIFdoaXRlXCIsXCJTdGFmZiBSYWNlXCIsXCJNb3JlIE5vbi13aGl0ZSDihpJcIl1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gW1wi4oaQIE1vcmUgTWFsZSBTdGFmZlwiLFwiU3RhZmYgR2VuZGVyXCIsXCJNb3JlIEZlbWFsZSBTdGFmZiDihpJcIl1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gW1wi4oaQIE1vcmUgV2hpdGVcIixcIlN0YWZmIFJhY2VcIixcIk1vcmUgUGVvcGxlIG9mIENvbG9yIOKGklwiXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtcIuKGkCBNb3JlIE1hbGUgU3RhZmZcIixcIlN0YWZmIEdlbmRlclwiLFwiTW9yZSBGZW1hbGUgU3RhZmYg4oaSXCJdXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGk9PTEpe1xuICAgICAgICAgICAgICByZXR1cm4gd2lkdGgvMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB3aWR0aDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICByZXR1cm4gaGVpZ2h0XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgIGlmKGkhPTEpe1xuICAgICAgICAgICAgICByZXR1cm4gXCJzd2FybS1heGlzLXRpY2stdGV4dCBzY2F0dGVyLWF4aXMtY2hhcnQtdGV4dCBzY2F0dGVyLWF4aXMtY2hhcnQtc2lkZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJzd2FybS1heGlzLXRpY2stdGV4dCBzY2F0dGVyLWF4aXMtY2hhcnQtdGV4dFwiO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgICAgICByZXR1cm4gXCJzdGFydFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihpIT0xKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiZW5kXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJtaWRkbGVcIlxuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuXG4gICAgICAgIGNoYXJ0QXhpc1RleHRcbiAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgLmRhdGEoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gW3t0ZXh0OlwiNzUlIExlYWRlcnMgYXJlIE5vdCBXaGl0ZVwiLHZhbHVlOi43NX0se3RleHQ6XCJMZWFkZXJzOiA1MC01MCBXaGl0ZS9Ob24tV2hpdGVcIix2YWx1ZTouNX0se3RleHQ6XCIyNSUgTm9uLVdoaXRlXCIsdmFsdWU6LjI1fSx7dGV4dDpcIjAlIE5vbi1XaGl0ZSBMZWFkZXJzXCIsdmFsdWU6LjB9XVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFt7dGV4dDpcIjc1JSBMZWFkZXJzIGFyZSBXb21lblwiLHZhbHVlOi43NX0se3RleHQ6XCI2NSUgRmVtYWxlXCIsdmFsdWU6LjY1fSx7dGV4dDpcIkxlYWRlcnM6IDUwLTUwIE1hbGUvRmVtYWxlXCIsdmFsdWU6LjV9LHt0ZXh0OlwiMzUlIEZlbWFsZVwiLHZhbHVlOi4zNX0se3RleHQ6XCIyNSUgTGVhZGVycyBhcmUgRmVtYWxlXCIsdmFsdWU6LjI1fV1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiKyh3aWR0aC0xMCkrXCIsMClcIilcbiAgICAgICAgICAuYXR0cihcInlcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgcmV0dXJuIHlTY2FsZShkLnZhbHVlKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgcmV0dXJuIFwic3dhcm0tYXhpcy10aWNrLXRleHQgc2NhdHRlci1heGlzLWNoYXJ0LXRleHQteVwiO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgcmV0dXJuIFwiZW5kXCJcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgcmV0dXJuIGQudGV4dDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKFwiZHlcIiwwKVxuICAgICAgICAgIC5jYWxsKHdyYXAsOTUpXG4gICAgICAgICAgO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBidWlsZEF2ZXJhZ2UoKXtcblxuICAgICAgICAgY2hhcnREaXYuc2VsZWN0KFwiLnN3YXJtLWF2ZXJhZ2VcIikucmVtb3ZlKCk7XG4gICAgICAgICBjaGFydERpdi5zZWxlY3QoXCIuc3dhcm0tYW5ubm90YXRpb25cIikucmVtb3ZlKCk7XG5cbiAgICAgICAgIGZ1bmN0aW9uIGxlYXN0U3F1YXJlcyh4U2VyaWVzLCB5U2VyaWVzKSB7XG4gICAgICAgXHRcdHZhciByZWR1Y2VTdW1GdW5jID0gZnVuY3Rpb24ocHJldiwgY3VyKSB7IHJldHVybiBwcmV2ICsgY3VyOyB9O1xuXG4gICAgICAgXHRcdHZhciB4QmFyID0geFNlcmllcy5yZWR1Y2UocmVkdWNlU3VtRnVuYykgKiAxLjAgLyB4U2VyaWVzLmxlbmd0aDtcbiAgICAgICBcdFx0dmFyIHlCYXIgPSB5U2VyaWVzLnJlZHVjZShyZWR1Y2VTdW1GdW5jKSAqIDEuMCAvIHlTZXJpZXMubGVuZ3RoO1xuXG4gICAgICAgXHRcdHZhciBzc1hYID0geFNlcmllcy5tYXAoZnVuY3Rpb24oZCkgeyByZXR1cm4gTWF0aC5wb3coZCAtIHhCYXIsIDIpOyB9KVxuICAgICAgIFx0XHRcdC5yZWR1Y2UocmVkdWNlU3VtRnVuYyk7XG5cbiAgICAgICBcdFx0dmFyIHNzWVkgPSB5U2VyaWVzLm1hcChmdW5jdGlvbihkKSB7IHJldHVybiBNYXRoLnBvdyhkIC0geUJhciwgMik7IH0pXG4gICAgICAgXHRcdFx0LnJlZHVjZShyZWR1Y2VTdW1GdW5jKTtcblxuICAgICAgIFx0XHR2YXIgc3NYWSA9IHhTZXJpZXMubWFwKGZ1bmN0aW9uKGQsIGkpIHsgcmV0dXJuIChkIC0geEJhcikgKiAoeVNlcmllc1tpXSAtIHlCYXIpOyB9KVxuICAgICAgIFx0XHRcdC5yZWR1Y2UocmVkdWNlU3VtRnVuYyk7XG5cbiAgICAgICBcdFx0dmFyIHNsb3BlID0gc3NYWSAvIHNzWFg7XG4gICAgICAgXHRcdHZhciBpbnRlcmNlcHQgPSB5QmFyIC0gKHhCYXIgKiBzbG9wZSk7XG4gICAgICAgXHRcdHZhciByU3F1YXJlID0gTWF0aC5wb3coc3NYWSwgMikgLyAoc3NYWCAqIHNzWVkpO1xuXG4gICAgICAgXHRcdHJldHVybiB7c2xvcGU6c2xvcGUsaW50ZXJjZXB0OmludGVyY2VwdCxyMjpyU3F1YXJlfTtcbiAgICAgICBcdH1cbiAgICAgICAgIHZhciB4VmFsdWVzID0gY2VsbENpcmNsZS5kYXRhKCkubWFwKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgICByZXR1cm4gZ2V0UGVyY2VudFR5cGUoXCJyYWNlU3RhZmZcIixkLnZhbHVlKTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJTdGFmZlwiLGQudmFsdWUpO1xuICAgICAgICAgfSk7XG4gICAgICAgICB2YXIgeVZhbHVlcyA9IGNlbGxDaXJjbGUuZGF0YSgpLm1hcChmdW5jdGlvbihkKXtcbiAgICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICAgcmV0dXJuIGdldFBlcmNlbnRUeXBlKFwic3VwV2hpdGVcIixkLnZhbHVlKTtcbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gZ2V0UGVyY2VudFR5cGUoXCJzdXBHZW5kZXJcIixkLnZhbHVlKTtcbiAgICAgICAgIH0pO1xuICAgICAgICAgdmFyIGxpbmVhciA9IGxlYXN0U3F1YXJlcyh4VmFsdWVzLHlWYWx1ZXMpO1xuXG5cbiAgICAgICAgIHZhciBjaGFydEF2ZXJhZ2UgPSBjaGFydERpdi5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF2ZXJhZ2VcIilcbiAgICAgICAgICAgICA7XG5cbiAgICAgICAgIHZhciBjaGFydEFubm90YXRpb24gPSBjaGFydEF2ZXJhZ2UuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWFubm5vdGF0aW9uXCIpXG4gICAgICAgICAgO1xuXG5cbiAgICAgICAgY2hhcnRBdmVyYWdlLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1zY2F0dGVyLXJlZ3Jlc3Npb24tbGluZVwiKVxuICAgICAgICAgIC5hdHRyKFwieDFcIiwgMClcbiAgICAgICAgICAuYXR0cihcInkxXCIsIHlTY2FsZShsaW5lYXIuaW50ZXJjZXB0KSlcbiAgICAgICAgICAuYXR0cihcIngyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICAgIHJldHVybiB4U2NhbGUoLjg1KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHhTY2FsZSguODUpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cihcInkyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHlTY2FsZSggKC44NSAqIGxpbmVhci5zbG9wZSkgKyBsaW5lYXIuaW50ZXJjZXB0IClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB5U2NhbGUoICguODUgKiBsaW5lYXIuc2xvcGUpICsgbGluZWFyLmludGVyY2VwdCApXG4gICAgICAgICAgfSlcbiAgICAgICAgICA7XG5cbiAgICAgICAgdmFyIHJlZ3Jlc3Npb25Bbm5vdGF0aW9uID0gY2hhcnRBbm5vdGF0aW9uLmFwcGVuZChcImdcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1zY2F0dGVyLXJlZ3Jlc3Npb24tYW5ub3RhdGlvblwiKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIreFNjYWxlKC44Ki44KStcIixcIit5U2NhbGUoICguOCouOCAqIGxpbmVhci5zbG9wZSkgKyBsaW5lYXIuaW50ZXJjZXB0ICkrXCIpXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIit4U2NhbGUoLjgqLjgpK1wiLFwiK3lTY2FsZSggKC44Ki44ICogbGluZWFyLnNsb3BlKSArIGxpbmVhci5pbnRlcmNlcHQgKStcIilcIlxuICAgICAgICAgIH0pXG5cbiAgICAgICAgcmVncmVzc2lvbkFubm90YXRpb25cbiAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLXNjYXR0ZXItcmVncmVzc2lvbi1hbm5vdGF0aW9uLXRleHRcIilcbiAgICAgICAgICAudGV4dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICAgIHJldHVybiBcIk5ld3Nyb29tcyB3aXRoIHJhY2lhbGx5IGRpdmVyc2UgbGVhZGVyc2hpcCB0ZW5kIHRvIGhhdmUgYSByYWNpYWxseSBkaXZlcnNlIHN0YWZmXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIk5ld3Nyb29tcyB3aXRoIGZlbWFsZSBsZWFkZXJzaGlwIHRlbmQgdG8gaGF2ZSBtb3JlIHdvbWVuIG9uIHN0YWZmXCJcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIrLTQwK1wiLFwiKy01NStcIilcIilcbiAgICAgICAgICAuYXR0cihcImR5XCIsMClcbiAgICAgICAgICAuY2FsbCh3cmFwVHdvLDI1MClcbiAgICAgICAgICA7XG5cbiAgICAgICAgcmVncmVzc2lvbkFubm90YXRpb25cbiAgICAgICAgICAuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLXNjYXR0ZXItcmVncmVzc2lvbi1hbm5vdGF0aW9uLWxpbmVcIilcbiAgICAgICAgICAuYXR0cihcIngxXCIsIC0zNSlcbiAgICAgICAgICAuYXR0cihcInkxXCIsIC0zNSlcbiAgICAgICAgICAuYXR0cihcIngyXCIsIC01KVxuICAgICAgICAgIC5hdHRyKFwieTJcIiwgLTUpXG4gICAgICAgICAgLmF0dHIoXCJtYXJrZXItZW5kXCIsXCJ1cmwoI2Fycm93LWhlYWQtYmxhY2spXCIpXG4gICAgICAgICAgO1xuXG4gICAgICAgIHZhciBoaWdobGlnaHRlZEFubm90YXRpb25PZmZzZXQgPSAxNTA7XG4gICAgICAgIC8vXG4gICAgICAgIHZhciBoaWdobGlnaHRlZEFubm90YXRpb24gPSBjaGFydEF2ZXJhZ2UuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK2hpZ2hsaWdodGVkUG9zaXRpb25bMF0rXCIsXCIraGlnaGxpZ2h0ZWRQb3NpdGlvblsxXStcIilcIilcbiAgICAgICAgLy9cbiAgICAgICAgaGlnaGxpZ2h0ZWRBbm5vdGF0aW9uXG4gICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1heGlzLWFubm90YXRpb24tbGluZVwiKVxuICAgICAgICAgIC5hdHRyKFwieDFcIixoaWdobGlnaHRlZFBvc2l0aW9uWzJdKVxuICAgICAgICAgIC5hdHRyKFwieDJcIixoaWdobGlnaHRlZFBvc2l0aW9uWzJdICsgaGlnaGxpZ2h0ZWRBbm5vdGF0aW9uT2Zmc2V0KVxuICAgICAgICAgIC5hdHRyKFwieTFcIiwwKVxuICAgICAgICAgIC5hdHRyKFwieTJcIiwwKVxuICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLGhpZ2hsaWdodGVkU3Ryb2tlQ29sb3IpXG4gICAgICAgICAgO1xuICAgICAgICAvL1xuICAgICAgICBoaWdobGlnaHRlZEFubm90YXRpb25cbiAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgICAgcmV0dXJuIG5ld3NJRE5hbWUuZ2V0KG5ld3NJZFNlbGVjdGVkKS5Db21wYW55XG4gICAgICAgICB9KVxuICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy1hbm5vdGF0aW9uLXRleHRcIilcbiAgICAgICAgIC5hdHRyKFwieFwiLGhpZ2hsaWdodGVkUG9zaXRpb25bMl0gKyBoaWdobGlnaHRlZEFubm90YXRpb25PZmZzZXQpXG4gICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLFwic3RhcnRcIilcbiAgICAgICAgIDtcblxuICAgICAgICAvLyBjaGFydEFubm90YXRpb24uYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAvLyAgIC5hdHRyKFwieDFcIixmdW5jdGlvbigpe1xuICAgICAgICAvLyAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgIC8vICAgICAgIHJldHVybiB4U2NhbGUoLjUpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgcmV0dXJuIHhTY2FsZSguNjUpO1xuICAgICAgICAvLyAgIH0pXG4gICAgICAgIC8vICAgLmF0dHIoXCJ4MlwiLGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgLy8gICAgICAgcmV0dXJuIHhTY2FsZSguNTUpXG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICByZXR1cm4geFNjYWxlKC43KVxuICAgICAgICAvLyAgIH0pXG4gICAgICAgIC8vICAgLmF0dHIoXCJ5MVwiLGhlaWdodC0yMClcbiAgICAgICAgLy8gICAuYXR0cihcInkyXCIsaGVpZ2h0LTIwKVxuICAgICAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWFubm5vdGF0aW9uLWxpbmVcIilcbiAgICAgICAgLy8gICAuYXR0cihcIm1hcmtlci1lbmRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgIC8vICAgICByZXR1cm4gXCJ1cmwoI2Fycm93LWhlYWQpXCJcbiAgICAgICAgLy8gICB9KVxuICAgICAgICAvLyAgIDtcblxuICAgICAgICAvLyBjaGFydEFubm90YXRpb24uYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAvLyAgIC5zdHlsZShcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAvLyAgICAgICB2YXIgdHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIrKHhTY2FsZSguNSktMTApK1wicHgsXCIrKGhlaWdodC0yMCkrXCJweCkgcm90YXRlKDApXCI7XG4gICAgICAgIC8vICAgICAgIHJldHVybiB0cmFuc2Zvcm07XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICB2YXIgdHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIrKHhTY2FsZSguNjUpLTEwKStcInB4LFwiKyhoZWlnaHQtMjApK1wicHgpIHJvdGF0ZSgwKVwiO1xuICAgICAgICAvLyAgICAgcmV0dXJuIHRyYW5zZm9ybTtcbiAgICAgICAgLy8gICB9KVxuICAgICAgICAvLyAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWFubm5vdGF0aW9uLXRleHQgc3dhcm0tc2NhdHRlci15LWFubm5vdGF0aW9uLXRleHRcIilcbiAgICAgICAgLy8gICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgLy8gICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAvLyAgICAgICByZXR1cm4gXCJQZW9wbGUgb2YgQ29sb3IgU3RhZmZcIlxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgcmV0dXJuIFwiV29tZW4gU3RhZmZcIjtcbiAgICAgICAgLy8gICB9KVxuICAgICAgICAvLyAgIDtcbiAgICAgICAgLy9cbiAgICAgICAgIGNoYXJ0QW5ub3RhdGlvbi5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgIC5hdHRyKFwieDFcIiwyMClcbiAgICAgICAgICAgLmF0dHIoXCJ4MlwiLDIwKVxuICAgICAgICAgICAuYXR0cihcInkxXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgICAgIHJldHVybiB5U2NhbGUoLjcpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICByZXR1cm4geVNjYWxlKC43NSk7XG4gICAgICAgICAgIH0pXG4gICAgICAgICAgIC5hdHRyKFwieTJcIiwxNSlcbiAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYW5ubm90YXRpb24tbGluZVwiKVxuICAgICAgICAgICAuYXR0cihcIm1hcmtlci1lbmRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgcmV0dXJuIFwidXJsKCNhcnJvdy1oZWFkKVwiXG4gICAgICAgICAgIH0pXG4gICAgICAgICAgIDtcblxuICAgICAgICAgY2hhcnRBbm5vdGF0aW9uLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgLnN0eWxlKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiKzIwK1wicHgsXCIrKHlTY2FsZSguNykrMTApK1wicHgpIHJvdGF0ZSgyNzBkZWcpXCI7XG4gICAgICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIrMjArXCJweCxcIisoeVNjYWxlKC43NSkrMTApK1wicHgpIHJvdGF0ZSgyNzBkZWcpXCI7XG4gICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybTtcbiAgICAgICAgICAgfSlcbiAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYW5ubm90YXRpb24tdGV4dCBzd2FybS1zY2F0dGVyLXktYW5ubm90YXRpb24tdGV4dFwiKVxuICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgICAgIHJldHVybiBcIlBlb3BsZSBvZiBDb2xvciBMZWFkZXJzaGlwXCJcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgcmV0dXJuIFwiV29tZW4gTGVhZGVyc1wiO1xuICAgICAgICAgICB9KVxuICAgICAgICAgICA7XG5cbiAgICAgICAgICAgY29uc29sZS5sb2coXCIyMzg4XCIpO1xuICAgICAgICAgY2hhcnRBdmVyYWdlLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaXJjbGUgc3dhcm0tY2lyY2xlLWF2ZXJhZ2VcIilcbiAgICAgICAgICAgLmF0dHIoXCJjeFwiLHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSkpXG4gICAgICAgICAgIC5hdHRyKFwiY3lcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICByZXR1cm4geVNjYWxlKG5ld3NOZXN0U3VwQXZlcmFnZVQxKTtcbiAgICAgICAgICAgfSlcbiAgICAgICAgICAgLmF0dHIoXCJyXCIsNilcbiAgICAgICAgICAgO1xuXG4gICAgICAgICBjaGFydEF2ZXJhZ2UuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlLXRleHQgc3dhcm0tYXZlcmFnZS10ZXh0LWxhYmVsXCIpXG4gICAgICAgICAgIC5hdHRyKFwieFwiLHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSkpXG4gICAgICAgICAgIC5hdHRyKFwieVwiLHlTY2FsZShuZXdzTmVzdFN1cEF2ZXJhZ2VUMSkgLSAxMilcbiAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLFwiYmxhY2tcIilcbiAgICAgICAgICAgLnRleHQoXCJBdmVyYWdlXCIpXG5cbiAgICAgIH1cblxuICAgICAgYnVpbGRBdmVyYWdlKCk7XG5cblxuICAgIH1cbiAgICBlbHNlIGlmKGNoYXJ0VHlwZSA9PSBcInN3YXJtXCIpe1xuXG4gICAgICB2YXIgZm9yY2VDb2xsaWRlID0gZDMuZm9yY2VDb2xsaWRlKClcbiAgICAgICAgICAucmFkaXVzKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudmFsdWUucmFkaXVzICsgMTsgfSlcbiAgICAgICAgICAuaXRlcmF0aW9ucygxKTtcblxuICAgICAgdmFyIHNpbXVsYXRpb24gPSBkMy5mb3JjZVNpbXVsYXRpb24obmV3c05lc3QpXG4gICAgICAgICAgLmZvcmNlKFwieFwiLCBkMy5mb3JjZVgoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShnZXRQZXJjZW50VHlwZShjdXQsZC52YWx1ZSkpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnN0cmVuZ3RoKDEpKVxuICAgICAgICAgIC5mb3JjZShcInlcIiwgZDMuZm9yY2VZKGhlaWdodCAvIDIpKVxuICAgICAgICAgIC5mb3JjZShcImNvbGxpZGVcIiwgZm9yY2VDb2xsaWRlKVxuICAgICAgICAgIC5zdG9wKClcbiAgICAgICAgICA7XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkQXhpcygpe1xuXG5cbiAgICAgICAgICB2YXIgY2hhcnRBeGlzQ29udGFpbmVyID0gY2hhcnRBeGlzLmFwcGVuZChcImdcIilcblxuICAgICAgICAgIHZhciB0aWNrRGF0YSA9IFsuMiwuMywuNSwuNywuOF07XG4gICAgICAgICAgaWYoZXh0ZW50T3ZlcnJpZGVbMF0gPCAuMiB8fCBleHRlbnRPdmVycmlkZVsxXSA+IC44KXtcbiAgICAgICAgICAgIHZhciB0aWNrRGF0YSA9IFsuMiwuNSwuOF07XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBtaWRQb2ludCA9IC41XG4gICAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICAgIHRpY2tEYXRhID0gWy0xLC0uNSwtLjI1LDAsLjI1LDFdO1xuICAgICAgICAgICAgbWlkUG9pbnQgPSAwXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA3MDApe1xuICAgICAgICAgICAgdGlja0RhdGEgPSBbLjIsLjUsLjhdO1xuICAgICAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICAgICAgdGlja0RhdGEgPSBbLTEsMCwxXTtcbiAgICAgICAgICAgICAgbWlkUG9pbnQgPSAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHRpY2tzID0gY2hhcnRBeGlzQ29udGFpbmVyXG4gICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy10aWNrLWNvbnRhaW5lclwiKVxuICAgICAgICAgICAgLnNlbGVjdEFsbChcImdcIilcbiAgICAgICAgICAgIC5kYXRhKHRpY2tEYXRhKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1heGlzLXRpY2stZ1wiKVxuICAgICAgICAgICAgO1xuXG4gICAgICAgICAgdGlja3NcbiAgICAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgaWYoZD09bWlkUG9pbnQpe1xuICAgICAgICAgICAgICAgIHJldHVybiBcIiM4ODhcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZ2VuZGVyQ29sb3JTY2FsZShkKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXR0cihcIngxXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgIHJldHVybiB4U2NhbGUoZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICByZXR1cm4geFNjYWxlKGQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgICBpZihkPT1taWRQb2ludCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodC8yO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICBpZihkPT1taWRQb2ludCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodCouMDU7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy10aWNrXCIpXG4gICAgICAgICAgICA7XG5cbiAgICAgICAgICB0aWNrc1xuICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICByZXR1cm4geFNjYWxlKGQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLC05KVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy10aWNrLXRleHRcIilcbiAgICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgICAgaWYoaT09MCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic3RhcnRcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGk9PXRpY2tEYXRhLmxlbmd0aC0xKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJlbmRcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICAgIGlmKGQ9PW1pZFBvaW50KXtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCIjODg4XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGdlbmRlckNvbG9yU2NhbGUoZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgICAgaWYoaT09MCl7XG4gICAgICAgICAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA0NTApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIrXCIrTWF0aC5mbG9vcihNYXRoLmFicyhkKSoxMDApK1wiIHB0cy4gV2hpdGVcIjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBcIk1vcmUgV2hpdGUgdnMuIENpdHkqIENlbnN1c1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxLWQpKjEwMCkrXCIlIE1hbGUgU3RhZmZcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGk9PXRpY2tEYXRhLmxlbmd0aC0xKXtcbiAgICAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDQ1MCl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIitcIitNYXRoLmZsb29yKE1hdGguYWJzKGQpKjEwMCkrXCIgcHRzLiBOb24td2hpdGVcIjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBcIk1vcmUgUGVvcGxlIG9mIENvbG9yIHZzLiBDaXR5KiBDZW5zdXNcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkKjEwMCkrXCIlIEZlbWFsZSBTdGFmZlwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYoZD09bWlkUG9pbnQpe1xuICAgICAgICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCJQYXJpdHkgd2l0aCBDaXR5KlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBcIjUwLzUwICBTcGxpdFwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGQ8bWlkUG9pbnQpe1xuICAgICAgICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCIrXCIrTWF0aC5mbG9vcihNYXRoLmFicyhkKSoxMDApK1wiIHB0cy5cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKDEtZCkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBcIitcIitNYXRoLmZsb29yKE1hdGguYWJzKGQpKjEwMCkrXCIgcHRzLlwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGQqMTAwKStcIiVcIjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA7XG5cbiAgICAgICAgICBjaGFydEF4aXNDb250YWluZXIuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwieDFcIiwwKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLHdpZHRoKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLGhlaWdodC8yKVxuICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLGhlaWdodC8yKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy1saW5lXCIpXG4gICAgICB9XG5cbiAgICAgIC8vIGlmKHJlYnVpbGRBeGlzKXtcbiAgICAgICAgY2hhcnRBeGlzXG4gICAgICAgICAgLnNlbGVjdChcImdcIilcbiAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsMClcbiAgICAgICAgICAub24oXCJlbmRcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGJ1aWxkQXhpcygpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuICAgICAgLy8gfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1MDsgKytpKSBzaW11bGF0aW9uLnRpY2soKTtcblxuICAgICAgY2VsbFxuICAgICAgICAuZWFjaChmdW5jdGlvbihkKXtcbiAgICAgICAgICBpZihkLmtleSA9PSBuZXdzSWRTZWxlY3RlZCl7XG4gICAgICAgICAgICBoaWdobGlnaHRlZFBvc2l0aW9uID0gW2QueCxkLnksZC52YWx1ZS5yYWRpdXNdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgO1xuXG4gICAgICBjZWxsQ2lyY2xlID0gY2VsbC5zZWxlY3RBbGwoXCIuc3dhcm0tY2lyY2xlXCIpXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHZhciBkYXRhID0gZDtcbiAgICAgICAgICBtb3VzZU92ZXJFdmVudHMoZGF0YSxkMy5zZWxlY3QodGhpcykpO1xuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW91dFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHZhciBkYXRhID0gZDtcbiAgICAgICAgICBtb3VzZU91dEV2ZW50cyhkYXRhLGQzLnNlbGVjdCh0aGlzKSk7XG4gICAgICAgIH0pXG5cbiAgICAgIGNlbGxDaXJjbGVcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLng7IH0pXG4gICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC55OyB9KVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoK2Qua2V5ID09IG5ld3NJRFNlYXJjaCl7XG4gICAgICAgICAgICByZXR1cm4gbmV3c0lEU2VhcmNoQ29sb3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB2YWx1ZSA9IGdldFBlcmNlbnRUeXBlKGN1dCxkLnZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gZ2VuZGVyQ29sb3JTY2FsZSh2YWx1ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiclwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZS5yYWRpdXNcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgdmFyIHZhbHVlID0gZ2V0UGVyY2VudFR5cGUoY3V0LGQudmFsdWUpO1xuICAgICAgICAgIGlmKCtkLmtleSA9PSBuZXdzSURTZWFyY2gpe1xuICAgICAgICAgICAgcmV0dXJuIG5ld3NJRFNlYXJjaENvbG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihkLmtleSA9PSBuZXdzSWRTZWxlY3RlZCl7XG4gICAgICAgICAgICByZXR1cm4gZDMuY29sb3IoZ2VuZGVyQ29sb3JTY2FsZSh2YWx1ZSkpLmRhcmtlcihoaWdobGlnaHRlZENpcmNsZVN0cm9rZURhcmtuZXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGQzLmNvbG9yKGdlbmRlckNvbG9yU2NhbGUodmFsdWUpKS5kYXJrZXIoMSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKGQua2V5PT1uZXdzSWRTZWxlY3RlZCl7XG4gICAgICAgICAgICByZXR1cm4gXCIycHhcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pXG4gICAgICAgIDtcblxuICAgICAgY2VsbENpcmNsZVxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHJldHVybiArZC5rZXkgPT0gbmV3c0lEU2VhcmNoO1xuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLC41KVxuICAgICAgICAudHJhbnNpdGlvbihcImJvcmRlclwiKVxuICAgICAgICAuZHVyYXRpb24oMTAwMClcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsXCIxMHB4XCIpXG4gICAgICAgIC50cmFuc2l0aW9uKFwiYm9yZGVyXCIpXG4gICAgICAgIC5kdXJhdGlvbigxMDAwKVxuICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIixcIjFweFwiKVxuICAgICAgICAuc3R5bGUoXCJzdHJva2Utb3BhY2l0eVwiLDEpXG4gICAgICAgIDtcblxuICAgICAgY2VsbEltYWdlcyA9IGNlbGwuc2VsZWN0QWxsKFwiLnN3YXJtLWltYWdlLWNvbnRhaW5lclwiKVxuXG4gICAgICBjZWxsSW1hZ2VzXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDEpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIGQueCArIFwiLFwiICsgZC55ICsgXCIpXCJcbiAgICAgICAgfSlcbiAgICAgICAgO1xuXG4gICAgICBmdW5jdGlvbiBidWlsZEF2ZXJhZ2UoKXtcblxuICAgICAgICAgIGNoYXJ0RGl2LnNlbGVjdChcIi5zd2FybS1hdmVyYWdlXCIpLnJlbW92ZSgpO1xuICAgICAgICAgIGNoYXJ0RGl2LnNlbGVjdChcIi5zd2FybS1hbm5ub3RhdGlvblwiKS5yZW1vdmUoKTtcblxuICAgICAgICAgIHZhciBjaGFydEFubm90YXRpb24gPSBjaGFydERpdi5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWFubm5vdGF0aW9uXCIpXG4gICAgICAgICAgICAgO1xuXG4gICAgICAgICAgaWYoIW1vYmlsZSAmJiB2aWV3cG9ydFdpZHRoID4gNTUwKXtcbiAgICAgICAgICAgIHZhciBhZGp1c3RXaWR0aCA9IDA7XG4gICAgICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgNjUwKXtcbiAgICAgICAgICAgICAgYWRqdXN0V2lkdGggPSAxMDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNoYXJ0QW5ub3RhdGlvbi5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwieDFcIix3aWR0aC0xNDcrYWRqdXN0V2lkdGgpXG4gICAgICAgICAgICAgIC5hdHRyKFwieDJcIix3aWR0aC0xMClcbiAgICAgICAgICAgICAgLmF0dHIoXCJ5MVwiLGhlaWdodC8yKzI1KVxuICAgICAgICAgICAgICAuYXR0cihcInkyXCIsaGVpZ2h0LzIrMjUpXG4gICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWFubm5vdGF0aW9uLWxpbmVcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJtYXJrZXItZW5kXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgIHJldHVybiBcInVybCgjYXJyb3ctaGVhZClcIlxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICA7XG5cbiAgICAgICAgICAgIGNoYXJ0QW5ub3RhdGlvbi5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwieFwiLHdpZHRoLTE0NythZGp1c3RXaWR0aClcbiAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsaGVpZ2h0LzIrMjUpXG4gICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWFubm5vdGF0aW9uLXRleHRcIilcbiAgICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBcIk1vcmUgUGVvcGxlIG9mIENvbG9yXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBcIk1vcmUgV29tZW5cIjtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjaGFydEF2ZXJhZ2UgPSBjaGFydERpdi5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF2ZXJhZ2VcIilcbiAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsMClcbiAgICAgICAgICAgICA7XG5cbiAgICAgICAgIHZhciBoaWdobGlnaHRlZEFubm90YXRpb25PZmZzZXQgPSBoZWlnaHQgLSBoaWdobGlnaHRlZFBvc2l0aW9uWzFdO1xuXG4gICAgICAgICB2YXIgaGlnaGxpZ2h0ZWRBbm5vdGF0aW9uID0gY2hhcnRBdmVyYWdlLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsXCJ0cmFuc2xhdGUoXCIraGlnaGxpZ2h0ZWRQb3NpdGlvblswXStcIixcIitoaWdobGlnaHRlZFBvc2l0aW9uWzFdK1wiKVwiKVxuXG4gICAgICAgICBoaWdobGlnaHRlZEFubm90YXRpb25cbiAgICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy1hbm5vdGF0aW9uLWxpbmVcIilcbiAgICAgICAgICAgLmF0dHIoXCJ4MVwiLDApXG4gICAgICAgICAgIC5hdHRyKFwieDJcIiwwKVxuICAgICAgICAgICAuYXR0cihcInkxXCIsaGlnaGxpZ2h0ZWRQb3NpdGlvblsyXSlcbiAgICAgICAgICAgLmF0dHIoXCJ5MlwiLGhpZ2hsaWdodGVkQW5ub3RhdGlvbk9mZnNldClcbiAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsaGlnaGxpZ2h0ZWRTdHJva2VDb2xvcilcbiAgICAgICAgICAgO1xuXG4gICAgICAgICBoaWdobGlnaHRlZEFubm90YXRpb25cbiAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgIC50ZXh0KG5ld3NJRE5hbWUuZ2V0KG5ld3NJZFNlbGVjdGVkKS5Db21wYW55KVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtYW5ub3RhdGlvbi10ZXh0XCIpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsaGlnaGxpZ2h0ZWRBbm5vdGF0aW9uT2Zmc2V0KzEwKVxuICAgICAgICAgIDtcblxuICAgICAgICAgY2hhcnRBdmVyYWdlLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXZlcmFnZS10ZXh0IHN3YXJtLWF2ZXJhZ2UtdGV4dC1sYWJlbFwiKVxuICAgICAgICAgICAuYXR0cihcInhcIix4U2NhbGUobmV3c05lc3RBdmVyYWdlVDEpKVxuICAgICAgICAgICAuYXR0cihcInlcIixoZWlnaHQqLjItMjIpXG4gICAgICAgICAgIC50ZXh0KFwiQXZlcmFnZVwiKVxuXG4gICAgICAgIGNoYXJ0QXZlcmFnZS5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXZlcmFnZS10ZXh0XCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIseFNjYWxlKG5ld3NOZXN0QXZlcmFnZVQxKSlcbiAgICAgICAgICAuYXR0cihcInlcIixoZWlnaHQqLjItNylcbiAgICAgICAgICAudGV4dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKE1hdGguYWJzKG5ld3NOZXN0QXZlcmFnZVQxKSkqMTAwKStcIiBwdHMuIG92ZXItcmVwcmVzZW50ZWQgd2hpdGVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKDEtbmV3c05lc3RBdmVyYWdlVDEpKjEwMCkrXCIlIE1hbGVcIlxuICAgICAgICAgIH0pXG5cbiAgICAgICAgY2hhcnRBdmVyYWdlLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlLWxpbmVcIilcbiAgICAgICAgICAuYXR0cihcIngxXCIseFNjYWxlKG5ld3NOZXN0QXZlcmFnZVQxKSlcbiAgICAgICAgICAuYXR0cihcIngyXCIseFNjYWxlKG5ld3NOZXN0QXZlcmFnZVQxKSlcbiAgICAgICAgICAuYXR0cihcInkxXCIsaGVpZ2h0Ki4yKVxuICAgICAgICAgIC5hdHRyKFwieTJcIixoZWlnaHQqLjgpXG4gICAgICAgICAgO1xuXG4gICAgICAgIGNoYXJ0QXZlcmFnZS50cmFuc2l0aW9uKCkuZHVyYXRpb24oZHVyYXRpb24pLmRlbGF5KGR1cmF0aW9uKS5zdHlsZShcIm9wYWNpdHlcIiwxKVxuXG4gICAgICB9XG5cbiAgICAgIGJ1aWxkQXZlcmFnZSgpO1xuXG4gICAgfVxuICAgIGVsc2UgaWYoY2hhcnRUeXBlID09IFwibmV3XCIpe1xuXG4gICAgICB2YXIgZm9yY2VDb2xsaWRlID0gZDMuZm9yY2VDb2xsaWRlKClcbiAgICAgICAgICAucmFkaXVzKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudmFsdWUucmFkaXVzICsgMTsgfSlcbiAgICAgICAgICAuaXRlcmF0aW9ucygxKTtcblxuICAgICAgdmFyIHNpbXVsYXRpb24gPSBkMy5mb3JjZVNpbXVsYXRpb24obmV3c05lc3QpXG4gICAgICAgICAgLmZvcmNlKFwieFwiLCBkMy5mb3JjZVgoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShnZXRQZXJjZW50VHlwZShjdXQsZC52YWx1ZSkpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnN0cmVuZ3RoKDEpKVxuICAgICAgICAgIC5mb3JjZShcInlcIiwgZDMuZm9yY2VZKGhlaWdodCAvIDIpKVxuICAgICAgICAgIC5mb3JjZShcImNvbGxpZGVcIiwgZm9yY2VDb2xsaWRlKVxuICAgICAgICAgIC5zdG9wKClcbiAgICAgICAgICA7XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkQXhpcygpe1xuXG4gICAgICAgdmFyIGNoYXJ0QXhpc0NvbnRhaW5lciA9IGNoYXJ0QXhpcy5hcHBlbmQoXCJnXCIpXG5cbiAgICAgICB2YXIgdGlja0RhdGEgPSBbLjIsLjMsLjUsLjcsLjhdO1xuICAgICAgIHZhciBtaWRQb2ludCA9IC41XG4gICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgIHRpY2tEYXRhID0gWy0xLC0uNSwtLjI1LDAsLjI1LDFdO1xuICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDc1MCl7XG4gICAgICAgICAgIHRpY2tEYXRhID0gWy0xLC0uMjUsMCwuMjUsMV07XG4gICAgICAgICB9XG4gICAgICAgICBtaWRQb2ludCA9IDBcbiAgICAgICB9XG4gICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDcwMCl7XG4gICAgICAgICB0aWNrRGF0YSA9IFsuMiwuNSwuOF07XG4gICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICB0aWNrRGF0YSA9IFstMSwwLDFdO1xuICAgICAgICAgICBtaWRQb2ludCA9IDBcbiAgICAgICAgIH1cbiAgICAgICB9XG5cbiAgICAgICB2YXIgdGlja3MgPSBjaGFydEF4aXNDb250YWluZXJcbiAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1heGlzLXRpY2stY29udGFpbmVyXCIpXG4gICAgICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAgICAgICAgLmRhdGEodGlja0RhdGEpXG4gICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtdGljay1nXCIpXG4gICAgICAgICA7XG5cbiAgICAgICAgdGlja3NcbiAgICAgICAgICAuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgaWYoZD09bWlkUG9pbnQpe1xuICAgICAgICAgICAgICByZXR1cm4gXCIjODg4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ2VuZGVyQ29sb3JTY2FsZShkKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKFwieDFcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHJldHVybiB4U2NhbGUoZCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cihcIngyXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICByZXR1cm4geFNjYWxlKGQpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmF0dHIoXCJ5MVwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICBpZihkPT1taWRQb2ludCl7XG4gICAgICAgICAgICAgIHJldHVybiBoZWlnaHQvMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cihcInkyXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBpZihkPT1taWRQb2ludCl7XG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhlaWdodCouMDU7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1heGlzLXRpY2tcIilcbiAgICAgICAgICA7XG5cbiAgICAgICAgdGlja3NcbiAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgIC5hdHRyKFwieFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShkKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLC05KVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtdGljay10ZXh0XCIpXG4gICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgaWYoaT09MCl7XG4gICAgICAgICAgICAgIHJldHVybiBcInN0YXJ0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGk9PXRpY2tEYXRhLmxlbmd0aC0xKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiZW5kXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgIGlmKGQ9PW1pZFBvaW50KXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiIzg4OFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdlbmRlckNvbG9yU2NhbGUoZCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGV4dChmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgaWYoaT09MCl7XG4gICAgICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDc1MCl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCIrXCIrTWF0aC5mbG9vcihNYXRoLmFicyhkKSoxMDApK1wiIHB0cy4gV2hpdGVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTW9yZSBXaGl0ZSB2cy4gQ2l0eSogQ2Vuc3VzXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMS1kKSoxMDApK1wiJSBNYWxlIFN0YWZmXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGk9PXRpY2tEYXRhLmxlbmd0aC0xKXtcbiAgICAgICAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgNzUwKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBcIitcIitNYXRoLmZsb29yKE1hdGguYWJzKGQpKjEwMCkrXCIgcHRzLiBOb24td2hpdGVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTW9yZSBQZW9wbGUgb2YgQ29sb3IgdnMuIENpdHkqIENlbnN1c1wiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZCoxMDApK1wiJSBGZW1hbGUgU3RhZmZcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZD09bWlkUG9pbnQpe1xuICAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBcIlBhcml0eSB3aXRoIENpdHkqXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gXCI1MC81MCAgU3BsaXRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQ8bWlkUG9pbnQpe1xuICAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBcIitcIitNYXRoLmZsb29yKE1hdGguYWJzKGQpKjEwMCkrXCIgcHRzLlwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCgxLWQpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gXCIrXCIrTWF0aC5mbG9vcihNYXRoLmFicyhkKSoxMDApK1wiIHB0cy5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGQqMTAwKStcIiVcIjtcbiAgICAgICAgICB9KVxuICAgICAgICAgIDtcblxuICAgICAgICBjaGFydEF4aXNDb250YWluZXIuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgIC5hdHRyKFwieDFcIiwwKVxuICAgICAgICAgLmF0dHIoXCJ4MlwiLHdpZHRoKVxuICAgICAgICAgLmF0dHIoXCJ5MVwiLGhlaWdodC8yKVxuICAgICAgICAgLmF0dHIoXCJ5MlwiLGhlaWdodC8yKVxuICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy1saW5lXCIpXG5cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYnVpbGRBdmVyYWdlKCl7XG5cbiAgICAgICAgICBjaGFydERpdi5zZWxlY3QoXCIuc3dhcm0tYXZlcmFnZVwiKS5yZW1vdmUoKTtcbiAgICAgICAgICBjaGFydERpdi5zZWxlY3QoXCIuc3dhcm0tYW5ubm90YXRpb25cIikucmVtb3ZlKCk7XG5cbiAgICAgICAgICB2YXIgY2hhcnRBbm5vdGF0aW9uID0gY2hhcnREaXYuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIilcbiAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hbm5ub3RhdGlvblwiKVxuICAgICAgICAgICAgIDtcblxuICAgICAgICAgIGlmKCFtb2JpbGUgJiYgdmlld3BvcnRXaWR0aCA+IDU1MCl7XG4gICAgICAgICAgICB2YXIgYWRqdXN0V2lkdGggPSAwO1xuICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDY1MCl7XG4gICAgICAgICAgICAgIGFkanVzdFdpZHRoID0gMTAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hhcnRBbm5vdGF0aW9uLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLHdpZHRoLTE0NythZGp1c3RXaWR0aClcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4MlwiLHdpZHRoLTEwKVxuICAgICAgICAgICAgICAuYXR0cihcInkxXCIsaGVpZ2h0LzIrMjUpXG4gICAgICAgICAgICAgIC5hdHRyKFwieTJcIixoZWlnaHQvMisyNSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYW5ubm90YXRpb24tbGluZVwiKVxuICAgICAgICAgICAgICAuYXR0cihcIm1hcmtlci1lbmRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidXJsKCNhcnJvdy1oZWFkKVwiXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIDtcblxuICAgICAgICAgICAgY2hhcnRBbm5vdGF0aW9uLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsd2lkdGgtMTQ3K2FkanVzdFdpZHRoKVxuICAgICAgICAgICAgICAuYXR0cihcInlcIixoZWlnaHQvMisyNSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYW5ubm90YXRpb24tdGV4dFwiKVxuICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTW9yZSBQZW9wbGUgb2YgQ29sb3JcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTW9yZSBXb21lblwiO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICA7XG5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgY2hhcnRBdmVyYWdlID0gY2hhcnREaXYuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIilcbiAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlXCIpXG4gICAgICAgICAgICAgO1xuXG4gICAgICAgICBjaGFydEF2ZXJhZ2UuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlLXRleHQgc3dhcm0tYXZlcmFnZS10ZXh0LWxhYmVsXCIpXG4gICAgICAgICAgIC5hdHRyKFwieFwiLHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSkpXG4gICAgICAgICAgIC5hdHRyKFwieVwiLGhlaWdodCouMi0yMilcbiAgICAgICAgICAgLnRleHQoXCJBdmVyYWdlXCIpXG5cbiAgICAgICAgICBjaGFydEF2ZXJhZ2UuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXZlcmFnZS10ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIix4U2NhbGUobmV3c05lc3RBdmVyYWdlVDEpKVxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsaGVpZ2h0Ki4yLTcpXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChNYXRoLmFicyhuZXdzTmVzdEF2ZXJhZ2VUMSkpKjEwMCkrXCIgcHRzLiBvdmVyLXJlcHJlc2VudGVkIHdoaXRlXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoMS1uZXdzTmVzdEF2ZXJhZ2VUMSkqMTAwKStcIiUgTWFsZVwiXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgY2hhcnRBdmVyYWdlLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF2ZXJhZ2UtbGluZVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSkpXG4gICAgICAgICAgICAuYXR0cihcIngyXCIseFNjYWxlKG5ld3NOZXN0QXZlcmFnZVQxKSlcbiAgICAgICAgICAgIC5hdHRyKFwieTFcIixoZWlnaHQqLjIpXG4gICAgICAgICAgICAuYXR0cihcInkyXCIsaGVpZ2h0Ki44KVxuICAgICAgICAgICAgO1xuXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICBcdGlwOiAnMjQuMTk0LjI2Ljc0JyxcbiAgICAgICAgICBcdGNvdW50cnlfY29kZTogJ1VTJyxcbiAgICAgICAgICBcdGNvdW50cnlfbmFtZTogJ1VuaXRlZCBTdGF0ZXMnLFxuICAgICAgICAgIFx0cmVnaW9uX2NvZGU6ICdDQScsXG4gICAgICAgICAgXHRyZWdpb25fbmFtZTogJ01hc3NhY2h1c2V0dHMnLFxuICAgICAgICAgIFx0Y2l0eTogJ05ldyBZb3JrJyxcbiAgICAgICAgICBcdHppcF9jb2RlOiAnMDEyMzAnLFxuICAgICAgICAgIFx0dGltZV96b25lOiAnQW1lcmljYS9OZXdfWW9yaycsXG4gICAgICAgICAgIGxhdGl0dWRlOiA0Mi4zNjAxLFxuICAgICAgICAgIFx0bG9uZ2l0dWRlOiAtNzEuMDU4OSxcbiAgICAgICAgICBcdG1ldHJvX2NvZGU6IDUzMixcbiAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICBsb2NhdGUoJ2ZkNGQ4N2Y2MDU2ODFjMDk1OWMxNmQ5MTY0YWI2YTRhJywgKGVyciwgcmVzcG9uc2UpID0+IHtcblxuICAgICAgICAgICB2YXIgbG9jYXRpb25zID0gW107XG5cbiAgICAgICAgICAgaWYocmVzcG9uc2Upe1xuICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3BvbnNlO1xuICAgICAgICAgICB9XG5cbiAgICAgICAgICAgY2VsbFxuICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgaWYoZC52YWx1ZS5oYXNMb2NhdGlvbiAmJiByZXN1bHQgIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgIHZhciBpdGVtQiA9IGQudmFsdWUubG9jYXRpb247XG4gICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IGdlb2xpYi5nZXREaXN0YW5jZVNpbXBsZShyZXN1bHQsIGl0ZW1CKVxuICAgICAgICAgICAgICAgICBpZihkaXN0YW5jZSA8IDIwMDAwMCl7XG4gICAgICAgICAgICAgICAgICAgbG9jYXRpb25zLnB1c2goZCk7XG4gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgIDtcblxuICAgICAgICAgICBpZihsb2NhdGlvbnMubGVuZ3RoID4gMSl7XG5cbiAgICAgICAgICAgICBsb2NhdGlvbnMgPSBsb2NhdGlvbnMuc29ydChmdW5jdGlvbihhLGIpe1xuICAgICAgICAgICAgICAgcmV0dXJuICtiLnZhbHVlLm1heFRvdGFsIC0gK2EudmFsdWUubWF4VG90YWw7XG4gICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICAgaWYoIFtcIm5qXCIsXCJueVwiLFwiY3RcIl0uaW5kZXhPZihyZXN1bHQucmVnaW9uX2NvZGUudG9Mb3dlckNhc2UoKSkgPiAtMSl7XG4gICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgcmV0dXJuIGQudmFsdWUuY29tcGFueURhdGEuU3RhdGUgPT0gcmVzdWx0LnJlZ2lvbl9jb2RlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICBsb2NhdGlvbnMgPSBsb2NhdGlvbnMuc2xpY2UoMCxjdXRBbW91bnQpXG5cbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZihsb2NhdGlvbnMubGVuZ3RoICE9IDApe1xuXG4gICAgICAgICAgICAgdGFibGVEYXRhID0gbG9jYXRpb25zO1xuICAgICAgICAgICAgIG5ld3NJZFNlbGVjdGVkID0gK2xvY2F0aW9uc1swXS5rZXk7XG4gICAgICAgICAgICAgaGlnaGxpZ2h0ZWRQb3NpdGlvbiA9IFtsb2NhdGlvbnNbMF0ueCxsb2NhdGlvbnNbMF0ueSxsb2NhdGlvbnNbMF0udmFsdWUucmFkaXVzXTtcblxuICAgICAgICAgICAgIHZhciBoaWdobGlnaHRlZEFubm90YXRpb25PZmZzZXQgPSBoZWlnaHQgLSBoaWdobGlnaHRlZFBvc2l0aW9uWzFdO1xuXG4gICAgICAgICAgICAgdmFyIGhpZ2hsaWdodGVkQW5ub3RhdGlvbiA9IGNoYXJ0QXZlcmFnZS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitoaWdobGlnaHRlZFBvc2l0aW9uWzBdK1wiLFwiK2hpZ2hsaWdodGVkUG9zaXRpb25bMV0rXCIpXCIpXG5cbiAgICAgICAgICAgICBoaWdobGlnaHRlZEFubm90YXRpb25cbiAgICAgICAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1heGlzLWFubm90YXRpb24tbGluZVwiKVxuICAgICAgICAgICAgICAgLmF0dHIoXCJ4MVwiLDApXG4gICAgICAgICAgICAgICAuYXR0cihcIngyXCIsMClcbiAgICAgICAgICAgICAgIC5hdHRyKFwieTFcIixoaWdobGlnaHRlZFBvc2l0aW9uWzJdKVxuICAgICAgICAgICAgICAgLmF0dHIoXCJ5MlwiLGhpZ2hsaWdodGVkQW5ub3RhdGlvbk9mZnNldClcbiAgICAgICAgICAgICAgIC5zdHlsZShcInN0cm9rZVwiLGhpZ2hsaWdodGVkU3Ryb2tlQ29sb3IpXG4gICAgICAgICAgICAgICA7XG5cbiAgICAgICAgICAgICBoaWdobGlnaHRlZEFubm90YXRpb25cbiAgICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgLnRleHQobmV3c0lETmFtZS5nZXQobmV3c0lkU2VsZWN0ZWQpLkNvbXBhbnkpXG4gICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtYW5ub3RhdGlvbi10ZXh0XCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwieVwiLGhpZ2hsaWdodGVkQW5ub3RhdGlvbk9mZnNldCsxMClcbiAgICAgICAgICAgICAgO1xuXG4gICAgICAgICAgICBjZWxsQ2lyY2xlLmVhY2goZnVuY3Rpb24oZCxpLGope1xuICAgICAgICAgICAgICBpZigrZC5rZXkgPT0gbmV3c0lkU2VsZWN0ZWQpe1xuICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkSXRlbShkMy5zZWxlY3QodGhpcykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgIH1cbiAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICB0YWJsZURhdGEgPSBuZXdzTmVzdC5zbGljZSgwLGN1dEFtb3VudCk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYodXJsUGFyYW0gIT0gXCJcIiAmJiArdXJsUGFyYW0gIT0gMCl7XG4gICAgICAgICAgICAgY3VycmVudENoYXJ0ID0gc3RlcHBlclNlcXVlbmNlW3VybFBhcmFtXTtcbiAgICAgICAgICAgICBidWlsZENoYXJ0KGN1cnJlbnRDaGFydCk7XG4gICAgICAgICAgIH1cblxuICAgICAgICAgfSlcblxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1MDsgKytpKSBzaW11bGF0aW9uLnRpY2soKTtcblxuICAgICAgY2VsbCA9IGNoYXJ0R1xuICAgICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAgICAgICAuZGF0YShuZXdzTmVzdClcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2VsbC1nXCIpXG4gICAgICAgIDtcblxuICAgICAgY2VsbExpbmUgPSBjZWxsXG4gICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWxpbmVcIilcbiAgICAgICAgO1xuXG4gICAgICBjb25zb2xlLmxvZyhcIjMwNzFcIik7XG5cbiAgICAgIGNlbGxDaXJjbGVUd28gPSBjZWxsXG4gICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2lyY2xlLXR3b1wiKVxuICAgICAgICAuYXR0cihcInJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIDRcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIGQueDtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnk7IH0pXG4gICAgICAgIDtcblxuY29uc29sZS5sb2coXCIzMDg1XCIpO1xuXG4gICAgICBjZWxsQ2lyY2xlID0gY2VsbFxuICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNpcmNsZVwiKVxuICAgICAgICAuYXR0cihcInJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIGQudmFsdWUucmFkaXVzXG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC54OyB9KVxuICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQueTsgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgdmFyIGRhdGEgPSBkO1xuICAgICAgICAgIG1vdXNlT3ZlckV2ZW50cyhkYXRhLGQzLnNlbGVjdCh0aGlzKSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgdmFyIGRhdGEgPSBkO1xuICAgICAgICAgIG1vdXNlT3V0RXZlbnRzKGRhdGEsZDMuc2VsZWN0KHRoaXMpKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKCtkLmtleSA9PSBuZXdzSURTZWFyY2gpe1xuICAgICAgICAgICAgcmV0dXJuIG5ld3NJRFNlYXJjaENvbG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdmFsdWUgPSBnZXRQZXJjZW50VHlwZShjdXQsZC52YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGdlbmRlckNvbG9yU2NhbGUodmFsdWUpO1xuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBnZXRQZXJjZW50VHlwZShjdXQsZC52YWx1ZSk7XG4gICAgICAgICAgaWYoK2Qua2V5ID09IG5ld3NJRFNlYXJjaCl7XG4gICAgICAgICAgICByZXR1cm4gbmV3c0lEU2VhcmNoQ29sb3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGQua2V5ID09IG5ld3NJZFNlbGVjdGVkKXtcbiAgICAgICAgICAgIHJldHVybiBkMy5jb2xvcihnZW5kZXJDb2xvclNjYWxlKHZhbHVlKSkuZGFya2VyKGhpZ2hsaWdodGVkQ2lyY2xlU3Ryb2tlRGFya25lc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZDMuY29sb3IoZ2VuZGVyQ29sb3JTY2FsZSh2YWx1ZSkpLmRhcmtlcigxKTtcbiAgICAgICAgfSlcbiAgICAgICAgO1xuXG4gICAgICBjZWxsSW1hZ2VzID0gY2VsbFxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0taW1hZ2UtY29udGFpbmVyXCIpXG5cbiAgICAgIGNlbGxJbWFnZXNcbiAgICAgICAgLmFwcGVuZChcImltYWdlXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWltYWdlXCIpXG4gICAgICAgIC5hdHRyKFwieGxpbms6aHJlZlwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKGQudmFsdWUuY29tcGFueU5hbWUgPT0gXCJOZXdzZGF5IChMb25nIElzbGFuZClcIil7XG4gICAgICAgICAgICByZXR1cm4gXCJhc3NldHMvbmV3c2RheS1sb2dvLnN2Z1wiXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGQudmFsdWUuY29tcGFueU5hbWUgPT0gXCJ0aGUgbmV3IHlvcmsgdGltZXNcIil7XG4gICAgICAgICAgICByZXR1cm4gXCJhc3NldHMvbnktdGltZXMtbG9nby5zdmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihkLnZhbHVlLmNvbXBhbnlOYW1lID09IFwiY2hpY2FnbyB0cmlidW5lXCIpe1xuICAgICAgICAgICAgcmV0dXJuIFwiYXNzZXRzL2NoaWNhZ28tdHJpYnVuZS1sb2dvLnN2Z1wiXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGQudmFsdWUuY29tcGFueU5hbWUgPT0gXCJ0aGUgd2FsbCBzdHJlZXQgam91cm5hbFwiKXtcbiAgICAgICAgICAgIHJldHVybiBcImFzc2V0cy93c2otbG9nby5zdmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihkLnZhbHVlLmNvbXBhbnlOYW1lID09IFwiTG9zIEFuZ2VsZXMgVGltZXNcIil7XG4gICAgICAgICAgICByZXR1cm4gXCJhc3NldHMvbGEtdGltZXMuc3ZnXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZC52YWx1ZS5jb21wYW55TmFtZSA9PSBcInVzYSB0b2RheVwiKXtcbiAgICAgICAgICAgIHJldHVybiBcImFzc2V0cy91c2EtdG9kYXktbG9nby5zdmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihkLnZhbHVlLmNvbXBhbnlOYW1lID09IFwidGhlIHdhc2hpbmd0b24gcG9zdFwiKXtcbiAgICAgICAgICAgIHJldHVybiBcImFzc2V0cy93YXBvLWxvZ28ucG5nXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZS5yYWRpdXMqMiouNztcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZS5yYWRpdXMqMiouNztcbiAgICAgICAgfSlcbiAgICAgICAgLy8gLnN0eWxlKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIC8vICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiKygtMSpkLnZhbHVlLnJhZGl1cyoyKi43KS8yK1wicHgsXCIrKC0xKmQudmFsdWUucmFkaXVzKjIqLjcpLzIrXCJweClcIlxuICAgICAgICAvLyB9KVxuICAgICAgICAuYXR0cihcInN0eWxlXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIFwiLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZShcIisoLTEqZC52YWx1ZS5yYWRpdXMqMiouNykvMitcInB4LFwiKygtMSpkLnZhbHVlLnJhZGl1cyoyKi43KS8yK1wicHgpOyB0cmFuc2Zvcm06dHJhbnNsYXRlKFwiKygtMSpkLnZhbHVlLnJhZGl1cyoyKi43KS8yK1wicHgsXCIrKC0xKmQudmFsdWUucmFkaXVzKjIqLjcpLzIrXCJweCk7XCI7XG4gICAgICAgIH0pXG4gICAgICAgIDtcbiAgICAgIGZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcihzdHJpbmcpIHtcbiAgICAgICAgICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xuICAgICAgfVxuXG4gICAgICBjZWxsVGV4dCA9IGNlbGxcbiAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJ4XCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICByZXR1cm4gZC54O1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcInlcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgIHJldHVybiBkLnk7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLXRleHRcIilcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLDApXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLXRleHRcIilcbiAgICAgICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgdmFyIHRleHQgPSBkLnZhbHVlLmNvbXBhbnlOYW1lLnJlcGxhY2UoL1xcYlxcdy9nLCBsID0+IGwudG9VcHBlckNhc2UoKSlcbiAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgfSlcbiAgICAgICAgO1xuXG4gICAgICBjZWxsVGV4dC5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgICAgIHJldHVybiBuZXdEYXRhSURzLmluZGV4T2YoK2Qua2V5KSA9PSAtMVxuICAgICAgfSlcbiAgICAgIC5hcHBlbmQoXCJ0c3BhblwiKVxuICAgICAgLmF0dHIoXCJkeFwiLDIpXG4gICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgcmV0dXJuIFwiKlwiXG4gICAgICB9KVxuICAgICAgO1xuXG4gICAgICBjZWxsRGFzaCA9IGNlbGxcbiAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tdGV4dC1kYXNoXCIpXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwwKVxuICAgICAgICA7XG5cbiAgICAgIGZvb3RlckNvbnRhaW5lciA9IGNvbnRhaW5lci5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwiZm9vdGVyLWNvbnRhaW5lclwiKVxuICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcImZvb3Rlci13cmFwcGVyXCIpXG4gICAgICAgIDtcblxuICAgICAgZm9vdGVyQ29udGFpbmVyLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJuZXdzLWxhYi1sb2dvXCIpXG4gICAgICAgIC5hcHBlbmQoXCJwXCIpXG4gICAgICAgIC5odG1sKFwiKjEwNSBvZiAyOTIgbmV3c3Jvb21zIGFyZSBjb21wYXJlZCB0byBhIGdlb2dyYXBoeSBsYXJnZXIgdGhhbiBhIGNpdHksIChlLmcuLCBVU0EgVG9kYXk6IFVTQS4gQm9zdG9uIEdsb2JlOiBNYXNzYWNodXNldHRzKS4gR2VvZ3JhcGhpZXMgd2VyZSBhcHByb3hpbWF0ZWQgdXNpbmcgcHVibGljIGRhdGEuXCIpXG4gICAgICAgIDtcblxuICAgICAgdmFyIGVtYmVkTGluayA9IGZvb3RlckNvbnRhaW5lci5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwiZW1iZWQtbGlua1wiKVxuXG4gICAgICBlbWJlZExpbmtUZXh0ID0gZW1iZWRMaW5rXG4gICAgICAgIC5hcHBlbmQoXCJwXCIpXG4gICAgICAgIC5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcImVtYmVkLWxpbmstdGV4dFwiKVxuICAgICAgICAudGV4dChcIkVtYmVkIFRoaXMgQ2hhcnRcIilcbiAgICAgICAgLm9uKFwiY2xpY2tcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBkMy5zZWxlY3QodGhpcykudGV4dChcIlBhc3RlIGNvZGUgaW50byB5b3VyIHNpdGVcIilcbiAgICAgICAgICBlbWJlZExpbmtJbnB1dC5zdHlsZShcImRpc3BsYXlcIixcImJsb2NrXCIpXG4gICAgICAgICAgICAuYXR0cihcInJlYWRvbmx5XCIsdHJ1ZSlcbiAgICAgICAgICAgIC5hdHRyKFwidmFsdWVcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCI8aWZyYW1lIHNyYz0naHR0cHM6Ly9nb29nbGV0cmVuZHMuZ2l0aHViLmlvL2FzbmUvaW5kZXguaHRtbD92aWV3PVwiK3N0ZXBwZXJTZXF1ZW5jZS5pbmRleE9mKGN1cnJlbnRDaGFydCkrXCImZmlsdGVyPVwiK2N1dCtcIicgZnJhbWVib3JkZXI9JzAnPjwvaWZyYW1lPlwiXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgO1xuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIGVtYmVkTGlua0lucHV0ID0gZW1iZWRMaW5rLmFwcGVuZChcImlucHV0XCIpO1xuXG4gICAgICBkMy5zZWxlY3QoXCIubm90ZS1uZXctZGF0YVwiKS5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIGQzLnNlbGVjdChcIi5mb290ZXItaGlnaGxpZ2h0XCIpLmNsYXNzZWQoXCJmb290ZXItaGlnaGxpZ2h0ZWRcIix0cnVlKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zvb3Rlci1lbGVtZW50Jykuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgIH0pXG5cbiAgICAgIGZvb3RlckNvbnRhaW5lci5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtc291cmNlXCIpXG4gICAgICAgIC5hdHRyKFwiaWRcIixcImZvb3Rlci1lbGVtZW50XCIpXG4gICAgICAgIC5zZWxlY3RBbGwoXCJwXCIpXG4gICAgICAgIC5kYXRhKFtcIlNvdXJjZTogQVNORSwgQ2Vuc3VzOiAmbHNxdW87MTEtJmxzcXVvOzE1XCIsXCJBbWVyaWNhbiBDb21tdW5pdHkgU3VydmV5LlwiLFwiTmV3c3Jvb21zIHNob3duIGFyZSB0aG9zZVwiLFwid2l0aCAyNSB0b3RhbCBzdGFmZiBvciBtb3JlXCJdKVxuICAgICAgICAvLyAuZGF0YShbXCJTb3VyY2U6IEFTTkUsIENlbnN1czogJmxzcXVvOzExLSZsc3F1bzsxNVwiLFwiQW1lcmljYW4gQ29tbXVuaXR5IFN1cnZleS5cIixcIk5ld3Nyb29tcyBzaG93biBhcmUgdGhvc2VcIixcIndpdGggMjUgdG90YWwgc3RhZmYgb3IgbW9yZVwiLFwiPHNwYW4gY2xhc3M9J25vdGUtbmV3LWRhdGEtZm9vdGVyJz4qPC9zcGFuPkFib3V0IHR3by10aGlyZHMgb2YgbmV3c3Jvb21zIGRpZCBub3QgcmVzcG9uZCB0byB0aGUgMjAxOCBzdXJ2ZXkgYW5kIHVzZSBkYXRhIGZyb20gMjAxNy4gVGhpcyB5ZWFy4oCZcyByZXNwb25kZW50cyBhcmUgaGVyZS5cIl0pXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJwXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXNvdXJjZS10ZXh0XCIpXG4gICAgICAgIC5zdHlsZShcIm1hcmdpbi10b3BcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgIGlmKGk9PTEgfHwgaSA9PSA0KXtcbiAgICAgICAgICAgIHJldHVybiBcIjEwcHhcIlxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSlcbiAgICAgICAgLmNsYXNzZWQoXCJmb290ZXItaGlnaGxpZ2h0XCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBpZihpPT00KXtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pXG4gICAgICAgIC5odG1sKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICB9KVxuICAgICAgICA7XG5cblxuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWFyY2gtcmVzdWx0cy1ib3gnKS5jb250YWlucyhlLnRhcmdldCkpe1xuICAgICAgICAgIC8vIENsaWNrZWQgaW4gYm94XG4gICAgICAgIH0gZWxzZXtcbiAgICAgICAgICBjaGFydFRvb2xUaXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsbnVsbCk7XG4gICAgICAgICAgc2VhcmNoUmVzdWx0c0NvbnRhaW5lci5zdHlsZShcImRpc3BsYXlcIixudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24oZSl7XG4gICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoLXJlc3VsdHMtYm94JykuY29udGFpbnMoZS50YXJnZXQpKXtcbiAgICAgICAgICAvLyBDbGlja2VkIGluIGJveFxuICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgY2hhcnRUb29sVGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLG51bGwpO1xuICAgICAgICAgIHNlYXJjaFJlc3VsdHNDb250YWluZXIuc3R5bGUoXCJkaXNwbGF5XCIsbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBidWlsZFRvZ2dsZXMoKVxuICAgICAgc2VhcmNoU3BlY3RydW0oKTtcblxuICAgICAgYnVpbGRBeGlzKCk7XG4gICAgICBidWlsZEF2ZXJhZ2UoKTtcblxuXG4gICAgfVxuICAgIGVsc2UgaWYoY2hhcnRUeXBlID09IFwiYXJyb3ctc2NhdHRlclwiKXtcbiAgICAgIHZhciBhcnJvd0R1cmF0aW9uID0gZHVyYXRpb247XG5cbiAgICAgIHZhciBzd2l0Y2hTZXQgPSBmYWxzZTtcbiAgICAgIHZhciBzd2l0Y2hOdW0gPSAwO1xuXG4gICAgICBpZighcmVidWlsZEF4aXMpe1xuICAgICAgICBhcnJvd0R1cmF0aW9uID0gMFxuICAgICAgfVxuXG4gICAgICB2YXIgcm93U3BhY2luZyA9IDE1XG4gICAgICAvLyBjZWxsQ2lyY2xlID0gY2VsbC5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAgIHZhciBjaGFydEFubm90YXRpb25EYXRhO1xuXG4gICAgICB2YXIgY2VsbEZpbHRlcmVkID0gY2VsbFxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHJldHVybiBkLnZhbHVlLm1pbmlDaGFydCA+IC0xIHx8IGQua2V5ID09IG5ld3NJRFNlYXJjaDtcbiAgICAgICAgfSlcbiAgICAgICAgLnNvcnQoZnVuY3Rpb24oYSxiKXtcbiAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgIHJldHVybiBiLnZhbHVlLnJhY2VEaWZmIC0gYS52YWx1ZS5yYWNlRGlmZjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGIudmFsdWUuZGlmZiAtIGEudmFsdWUuZGlmZjtcbiAgICAgICAgfSlcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBkLnZhbHVlLmFycm93U29ydCA9IGk7XG5cbiAgICAgICAgICBpZihkLnZhbHVlLmRpZmYgPCAwICYmIGN1dCAhPSBcInJhY2VcIil7XG4gICAgICAgICAgICBpZighc3dpdGNoU2V0KXtcbiAgICAgICAgICAgICAgc3dpdGNoU2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgc3dpdGNoTnVtID0gaSsyXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkLnZhbHVlLmFycm93U29ydCA9IGkrMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZC52YWx1ZS5yYWNlRGlmZiA8IDAgJiYgY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICAgIGlmKCFzd2l0Y2hTZXQpe1xuICAgICAgICAgICAgICBzd2l0Y2hTZXQgPSB0cnVlO1xuICAgICAgICAgICAgICBzd2l0Y2hOdW0gPSBpKzJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGQudmFsdWUuYXJyb3dTb3J0ID0gaSsyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgICAgY2hhcnRBbm5vdGF0aW9uRGF0YSA9IGQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICB2YXIgaXRlbXMgPSBjZWxsRmlsdGVyZWQuc2l6ZSgpKzI7XG5cbiAgICAgIHZhciBkZWxheSA9IDUwMDtcblxuICAgICAgY2VsbFxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHJldHVybiBkLnZhbHVlLm1pbmlDaGFydCA9PSAtMSAmJiBkLmtleSAhPSBuZXdzSURTZWFyY2g7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwwKVxuICAgICAgICA7XG5cbiAgICAgIGNlbGxDaXJjbGUgPSBjZWxsLnNlbGVjdEFsbChcIi5zd2FybS1jaXJjbGVcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3V0XCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIH0pXG5cbiAgICAgIGNlbGxDaXJjbGVcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZS5taW5pQ2hhcnQgPiAtMSB8fCBkLmtleSA9PSBuZXdzSURTZWFyY2g7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwxKVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsbnVsbClcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsbnVsbClcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oYXJyb3dEdXJhdGlvbilcbiAgICAgICAgLmF0dHIoXCJyXCIsIDQpXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwicmFjZVwiLGQudmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHhTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUpKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkLGkpIHtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZS5hcnJvd1NvcnQqcm93U3BhY2luZyArIHJvd1NwYWNpbmcvMlxuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIGNlbGxJbWFnZXMgPSBjZWxsLnNlbGVjdEFsbChcIi5zd2FybS1pbWFnZS1jb250YWluZXJcIilcblxuICAgICAgY2VsbEltYWdlc1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHJldHVybiBkLnZhbHVlLm1pbmlDaGFydCA+IC0xIHx8IGQua2V5ID09IG5ld3NJRFNlYXJjaDtcbiAgICAgICAgfSlcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwwKVxuICAgICAgICA7XG5cbiAgICAgIGNlbGxUZXh0ID0gY2VsbC5zZWxlY3RBbGwoXCIuc3dhcm0tdGV4dFwiKVxuXG4gICAgICBjZWxsVGV4dFxuICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLG51bGwpXG4gICAgICAgIC5zdHlsZShcImZpbGxcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBpZigrZC5rZXkgPT0gbmV3c0lkU2VsZWN0ZWQpe1xuICAgICAgICAgICAgcmV0dXJuIFwiYmxhY2tcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcImZvbnQtd2VpZ2h0XCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoK2Qua2V5ID09IG5ld3NJZFNlbGVjdGVkKXtcbiAgICAgICAgICAgIHJldHVybiA2MDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH0pXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIGQudmFsdWUubWluaUNoYXJ0ID4gLTEgfHwgZC5rZXkgPT0gbmV3c0lEU2VhcmNoO1xuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsbnVsbClcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oYXJyb3dEdXJhdGlvbilcbiAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQsaSkge1xuICAgICAgICAgIHJldHVybiBkLnZhbHVlLmFycm93U29ydCpyb3dTcGFjaW5nICsgcm93U3BhY2luZy8yXG4gICAgICAgIH0pXG4gICAgICAgIDtcblxuICAgICAgdmFyIGRlZmF1bHRGb250U2l6ZSA9IDExO1xuXG4gICAgICBjZWxsQ2lyY2xlVHdvID0gY2VsbC5zZWxlY3RBbGwoXCIuc3dhcm0tY2lyY2xlLXR3b1wiKVxuICAgICAgICAub24oXCJtb3VzZW92ZXJcIixmdW5jdGlvbihkKXtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihkKXtcbiAgICAgICAgfSlcblxuICAgICAgY2VsbENpcmNsZVR3b1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHJldHVybiBkLnZhbHVlLm1pbmlDaGFydCA+IC0xIHx8IGQua2V5ID09IG5ld3NJRFNlYXJjaDtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJyXCIsIDQpXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZ2V0UGVyY2VudFR5cGUoXCJyYWNlLW9sZFwiLGQudmFsdWUpO1xuICAgICAgICAgICAgaWYocmVzdWx0ID09IFwibi9hXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB4U2NhbGUocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyLW9sZFwiLGQudmFsdWUpO1xuICAgICAgICAgIGlmKHJlc3VsdCA9PSBcIm4vYVwiKXtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geFNjYWxlKHJlc3VsdCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCxpLGopIHtcbiAgICAgICAgICByZXR1cm4gZC52YWx1ZS5hcnJvd1NvcnQqcm93U3BhY2luZyArIHJvd1NwYWNpbmcvMlxuICAgICAgICB9KVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbihhcnJvd0R1cmF0aW9uKVxuICAgICAgICAuZGVsYXkoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoIXJlYnVpbGRBeGlzKXtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZC52YWx1ZS5hcnJvd1NvcnQqMTArZGVsYXk7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwxKVxuICAgICAgICA7XG5cbiAgICAgIGNlbGxUZXh0LmZpbHRlcihmdW5jdGlvbihkKXtcbiAgICAgICAgICBpZihkLmtleSA9PSBuZXdzSURTZWFyY2gpe1xuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsbmV3c0lEU2VhcmNoQ29sb3IpXG4gICAgICAgIC5zdHlsZShcImZvbnQtd2VpZ2h0XCIsNjAwKVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsXCIxNXB4XCIpXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIixkZWZhdWx0Rm9udFNpemUrXCJweFwiKVxuICAgICAgICA7XG5cbiAgICAgIGNlbGxDaXJjbGVUd28uZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKGQua2V5ID09IG5ld3NJRFNlYXJjaCl7XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0pXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsbmV3c0lEU2VhcmNoQ29sb3IpXG4gICAgICAgIC5zdHlsZShcInN0cm9rZVwiLG5ld3NJRFNlYXJjaENvbG9yKVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbihkdXJhdGlvbilcbiAgICAgICAgLnN0eWxlKFwiZmlsbFwiLG51bGwpXG4gICAgICAgIC5zdHlsZShcInN0cm9rZVwiLG51bGwpXG4gICAgICAgIDtcblxuICAgICAgY2VsbENpcmNsZS5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoZC5rZXkgPT0gbmV3c0lEU2VhcmNoKXtcbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSlcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5zdHlsZShcImZpbGxcIixuZXdzSURTZWFyY2hDb2xvcilcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsbmV3c0lEU2VhcmNoQ29sb3IpXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKGR1cmF0aW9uKVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsbnVsbClcbiAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsbnVsbClcbiAgICAgICAgO1xuXG4gICAgICBmdW5jdGlvbiBkcmF3QXJyb3cgKHQwLHQxLHRvcE9mZnNldCkge1xuICBcdFx0XHR2YXIgZCA9IHQxID4gdDAgP1xuICAgICAgICAgIC8vIChcIk1cIit0MCtcIiwwIExcIit0MStcIiwwIFpcIikgOlxuICAgICAgICAgIChcIk1cIisodDEtNikrXCIsXCIrdG9wT2Zmc2V0K1wiIExcIisodDEtMTIpK1wiLFwiKyh0b3BPZmZzZXQrNCkrXCIgTFwiKyh0MS0xMikrXCIsXCIrKHRvcE9mZnNldCsxLjUpK1wiIExcIit0MCtcIixcIit0b3BPZmZzZXQrXCIgTFwiKyh0MS0xMikrXCIsXCIrKHRvcE9mZnNldC0xLjUpK1wiIExcIisodDEtMTIpK1wiLFwiKyh0b3BPZmZzZXQtNCkrXCIgTFwiKyh0MS02KStcIixcIit0b3BPZmZzZXQpIDpcbiAgICAgICAgICAoXCJNXCIrKHQxKzYpK1wiLFwiK3RvcE9mZnNldCtcIiBMXCIrKHQxKzEyKStcIixcIisodG9wT2Zmc2V0KzQpK1wiIExcIisodDErMTIpK1wiLFwiKyh0b3BPZmZzZXQrMS41KStcIiBMXCIrdDArXCIsXCIrdG9wT2Zmc2V0K1wiIExcIisodDErMTIpK1wiLFwiKyh0b3BPZmZzZXQtMS41KStcIiBMXCIrKHQxKzEyKStcIixcIisodG9wT2Zmc2V0LTQpK1wiIExcIisodDErNikrXCIsXCIrdG9wT2Zmc2V0KTtcblxuICAgICAgICAgIC8vIChcIk0wLFwiICsgKHQxLTIpICsgXCIgTDQsXCIgKyAodDEtOCkgKyBcIiBMMS41LFwiICsgKHQxLTgpICsgXCIgTDAsXCIgKyB0MCArIFwiIEwtMS41LFwiICsgKHQxLTgpICsgXCIgTC00LFwiICsgKHQxLTgpICsgXCIgWlwiKSA6XG4gIFx0XHRcdFx0Ly8gKFwiTTAsXCIgKyAodDEtMikgKyBcIiBMNCxcIiArICh0MS04KSArIFwiIEwxLjUsXCIgKyAodDEtOCkgKyBcIiBMMCxcIiArIHQwICsgXCIgTC0xLjUsXCIgKyAodDEtOCkgKyBcIiBMLTQsXCIgKyAodDEtOCkgKyBcIiBaXCIpIDpcbiAgXHRcdFx0XHQvLyAoXCJNMCxcIiArICh0MSsyKSArIFwiIEw0LFwiICsgKHQxKzgpICsgXCIgTDEuNSxcIiArICh0MSs4KSArIFwiIEwwLFwiICsgdDAgKyBcIiBMLTEuNSxcIiArICh0MSs4KSArIFwiIEwtNCxcIiArICh0MSs4KSArIFwiIFpcIik7XG4gIFx0XHRcdHJldHVybiBkO1xuICBcdFx0fVxuICAgICAgZnVuY3Rpb24gZHJhd0RpYW1vbmQodDAsdDEpe1xuICAgICAgICByZXR1cm4gKFwiTTAsXCIgKyAodDEtNClcbiAgICAgICAgKyBcIiBMNCxcIiArICh0MS04KVxuICAgICAgICAvLyArIFwiIEwxLjUsXCIgKyAodDEtOClcbiAgICAgICAgKyBcIiBMMCxcIiArICh0MS0xMilcbiAgICAgICAgKyBcIiBMLTQsXCIgKyAodDEtOClcbiAgICAgICAgKyBcIiBaXCIpO1xuICAgICAgfVxuXG4gICAgICBjZWxsTGluZSA9IGNlbGwuc2VsZWN0QWxsKFwiLnN3YXJtLWxpbmVcIik7XG5cbiAgICAgIGNlbGxMaW5lXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIGQudmFsdWUubWluaUNoYXJ0ID4gLTEgfHwgZC5rZXkgPT0gbmV3c0lEU2VhcmNoO1xuICAgICAgICB9KVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbigwKVxuICAgICAgICAuYXR0cihcImRcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgdmFyIHQwID0geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwicmFjZS1vbGRcIixkLnZhbHVlKSlcbiAgICAgICAgICAgIHZhciB0MSA9IHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsZC52YWx1ZSkpXG4gICAgICAgICAgICBpZihNYXRoLmFicyhkLnZhbHVlLnJhY2VEaWZmKSA8IC4wMil7XG4gICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZC52YWx1ZS5yYWNlRGlmZj4uMDIpe1xuICAgICAgICAgICAgICByZXR1cm4gZHJhd0Fycm93KHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsZC52YWx1ZSkpLHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsZC52YWx1ZSkrLjAyKSwoZC52YWx1ZS5hcnJvd1NvcnQqcm93U3BhY2luZyArIHJvd1NwYWNpbmcvMikpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZHJhd0Fycm93KHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsZC52YWx1ZSkpLHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsZC52YWx1ZSktLjAyKSwoZC52YWx1ZS5hcnJvd1NvcnQqcm93U3BhY2luZyArIHJvd1NwYWNpbmcvMikpXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICB2YXIgdDAgPSB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXItb2xkXCIsZC52YWx1ZSkpXG4gICAgICAgICAgICB2YXIgdDEgPSB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXItb2xkXCIsZC52YWx1ZSkpXG4gICAgICAgICAgICBpZihNYXRoLmFicyhkLnZhbHVlLmRpZmYpIDwgLjAyKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihkLnZhbHVlLmRpZmY+LjAyKXtcbiAgICAgICAgICAgICAgcmV0dXJuIGRyYXdBcnJvdyh4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXItb2xkXCIsZC52YWx1ZSkpLHhTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlci1vbGRcIixkLnZhbHVlKSsuMDIpLChkLnZhbHVlLmFycm93U29ydCpyb3dTcGFjaW5nICsgcm93U3BhY2luZy8yKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkcmF3QXJyb3coeFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyLW9sZFwiLGQudmFsdWUpKSx4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXItb2xkXCIsZC52YWx1ZSktLjAyKSwoZC52YWx1ZS5hcnJvd1NvcnQqcm93U3BhY2luZyArIHJvd1NwYWNpbmcvMikpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcImZpbGxcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBpZihkLnZhbHVlLnJhY2VEaWZmID4gMCAmJiBjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgcmV0dXJuIFwidXJsKCNncmFkaWVudC1yaWdodClcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZC52YWx1ZS5kaWZmID4gMCAmJiBjdXQgIT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgcmV0dXJuIFwidXJsKCNncmFkaWVudC1yaWdodClcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFwidXJsKCNncmFkaWVudC1sZWZ0KVwiO1xuICAgICAgICB9KVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbihhcnJvd0R1cmF0aW9uKVxuICAgICAgICAuZGVsYXkoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoIXJlYnVpbGRBeGlzKXtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZC52YWx1ZS5hcnJvd1NvcnQqMTArZGVsYXkrZHVyYXRpb247XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwxKVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5kdXJhdGlvbihmdW5jdGlvbigpe1xuICAgICAgICAgIGlmKCFyZWJ1aWxkQXhpcyl7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIDQwMFxuICAgICAgICB9KVxuICAgICAgICAuZGVsYXkoZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBpZighcmVidWlsZEF4aXMpe1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkLnZhbHVlLmFycm93U29ydCoxNTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHJUd2VlbihcImRcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgdmFyIHQwID0geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwicmFjZS1vbGRcIixkLnZhbHVlKSlcbiAgICAgICAgICAgIHZhciB0MSA9IHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2VcIixkLnZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KXtcbiAgICAgICAgICAgICAgaWYoTWF0aC5hYnMoZC52YWx1ZS5yYWNlRGlmZikgPCAuMDIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGQudmFsdWUucmFjZURpZmY+LjAyKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZHJhd0Fycm93KHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsZC52YWx1ZSkpLCh4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsZC52YWx1ZSkpLXhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsZC52YWx1ZSkrLjAyKSkqdCt4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJyYWNlLW9sZFwiLGQudmFsdWUpKy4wMiksKGQudmFsdWUuYXJyb3dTb3J0KnJvd1NwYWNpbmcgKyByb3dTcGFjaW5nLzIpKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgaWYoZC52YWx1ZS5yYWNlRGlmZjwtLjAyKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZHJhd0Fycm93KHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsZC52YWx1ZSkpLHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsZC52YWx1ZSktLjAyKS0oTWF0aC5hYnMoeFNjYWxlKGdldFBlcmNlbnRUeXBlKFwicmFjZVwiLGQudmFsdWUpKS14U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJyYWNlLW9sZFwiLGQudmFsdWUpLS4wMikpKnQpLChkLnZhbHVlLmFycm93U29ydCpyb3dTcGFjaW5nICsgcm93U3BhY2luZy8yKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgdmFyIHQwID0geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyLW9sZFwiLGQudmFsdWUpKVxuICAgICAgICAgICAgdmFyIHQxID0geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCl7XG4gICAgICAgICAgICAgIGlmKE1hdGguYWJzKGQudmFsdWUuZGlmZikgPCAuMDIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGQudmFsdWUuZGlmZj4uMDIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBkcmF3QXJyb3coeFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyLW9sZFwiLGQudmFsdWUpKSwoeFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkpLXhTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlci1vbGRcIixkLnZhbHVlKSsuMDIpKSp0K3hTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlci1vbGRcIixkLnZhbHVlKSsuMDIpLChkLnZhbHVlLmFycm93U29ydCpyb3dTcGFjaW5nICsgcm93U3BhY2luZy8yKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIGlmKGQudmFsdWUuZGlmZjwtLjAyKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZHJhd0Fycm93KHhTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlci1vbGRcIixkLnZhbHVlKSkseFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyLW9sZFwiLGQudmFsdWUpLS4wMiktKE1hdGguYWJzKHhTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUpKS14U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXItb2xkXCIsZC52YWx1ZSktLjAyKSkqdCksKGQudmFsdWUuYXJyb3dTb3J0KnJvd1NwYWNpbmcgKyByb3dTcGFjaW5nLzIpKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG5cbiAgICAgICAgfSlcbiAgICAgICAgO1xuXG4gICAgICAgY2hhcnRBeGlzXG4gICAgICAgICAuc2VsZWN0KFwiZ1wiKVxuICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgLmR1cmF0aW9uKDI1MClcbiAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwwKVxuICAgICAgICAgLm9uKFwiZW5kXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgICAgYnVpbGRBeGlzKCk7XG4gICAgICAgICB9KVxuICAgICAgICAgO1xuXG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkQXhpcygpe1xuICAgICAgICB2YXIgY2hhcnRBeGlzQ29udGFpbmVyID0gY2hhcnRBeGlzLmFwcGVuZChcImdcIilcbiAgICAgICAgdmFyIGNoYXJ0QXhpc0xpbmVzID0gY2hhcnRBeGlzQ29udGFpbmVyLmFwcGVuZChcImdcIilcblxuICAgICAgICB2YXIgbGluZXNEYXRhID0gWy4yLC4zNSwuNSwuNjUsLjhdO1xuICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgIGxpbmVzRGF0YSA9IFstMSwtLjI1LDAsLjI1LDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDgyMCl7XG4gICAgICAgICAgdmFyIGxpbmVzRGF0YSA9IFsuMjUsLjUsLjc1XTtcbiAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgbGluZXNEYXRhID0gWy0xLDBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNoYXJ0QXhpc0xpbmVzXG4gICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXJyb3cteC1heGlzLWxpbmVzXCIpXG4gICAgICAgICAuc2VsZWN0QWxsKFwibGluZVwiKVxuICAgICAgICAgLmRhdGEobGluZXNEYXRhKVxuICAgICAgICAgLmVudGVyKClcbiAgICAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAuYXR0cihcIngxXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgIHJldHVybiB4U2NhbGUoZCk7XG4gICAgICAgICB9KVxuICAgICAgICAgLmF0dHIoXCJ4MlwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICByZXR1cm4geFNjYWxlKGQpO1xuICAgICAgICAgfSlcbiAgICAgICAgIC5hdHRyKFwieTFcIiwtMTApXG4gICAgICAgICAuYXR0cihcInkyXCIsaXRlbXMqcm93U3BhY2luZylcbiAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtbGluZVwiKVxuICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgaWYoZD09LjUpe1xuICAgICAgICAgICAgIHJldHVybiBcInJnYmEoMCwgMCwgMCwgMC4wOSlcIjtcbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgIH0pXG4gICAgICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICBpZihkPT0uNSl7XG4gICAgICAgICAgICAgcmV0dXJuIFwiMnB4XCI7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICB9KVxuICAgICAgICAgO1xuXG4gICAgICAgY2hhcnRBeGlzTGluZXMuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tc2NhdHRlci15LWF4aXMtbGluZXNcIilcbiAgICAgICAgIC5zZWxlY3RBbGwoXCJsaW5lXCIpXG4gICAgICAgICAuZGF0YShkMy5yYW5nZShpdGVtcykpXG4gICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgIC5hdHRyKFwieDFcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICBpZihpPT0wIHx8IGk9PXN3aXRjaE51bSl7XG4gICAgICAgICAgICAgcmV0dXJuIC0xNDBcbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gLTE1XG4gICAgICAgICB9KVxuICAgICAgICAgLmF0dHIoXCJ4MlwiLHdpZHRoKzE1KVxuICAgICAgICAgLmF0dHIoXCJ5MVwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgIHJldHVybiBpKnJvd1NwYWNpbmcvL3lTY2FsZShkKTtcbiAgICAgICAgIH0pXG4gICAgICAgICAuYXR0cihcInkyXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgcmV0dXJuIGkqcm93U3BhY2luZy8veVNjYWxlKGQpO1xuICAgICAgICAgfSlcbiAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF4aXMtbGluZVwiKVxuICAgICAgICAgO1xuXG4gICAgICAgdmFyIGNoYXJ0QXhpc1RleHQgPSBjaGFydEF4aXNDb250YWluZXIuYXBwZW5kKFwiZ1wiKVxuXG4gICAgICAgY2hhcnRBeGlzVGV4dFxuICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAuZGF0YShsaW5lc0RhdGEpXG4gICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgIC5hdHRyKFwieFwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgIHJldHVybiB4U2NhbGUoZCk7XG4gICAgICAgICB9KVxuICAgICAgICAgLmF0dHIoXCJ5XCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgIH0pXG4gICAgICAgICAuYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgcmV0dXJuIFwic3dhcm0tYXJyb3ctdGljay10ZXh0XCI7XG4gICAgICAgICB9KVxuICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgICByZXR1cm4gXCJzdGFydFwiXG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYoZD09MSAmJiBjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgIHJldHVybiBcImVuZFwiO1xuICAgICAgICAgICB9XG4gICAgICAgICAgIGlmKGQ9PS43NSl7XG4gICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDY1MSl7XG4gICAgICAgICAgICAgICByZXR1cm4gXCJlbmRcIjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYoZD09Ljgpe1xuICAgICAgICAgICAgIHJldHVybiBcImVuZFwiO1xuICAgICAgICAgICB9XG4gICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA4MjApe1xuICAgICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgICByZXR1cm4gXCJlbmRcIlxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgIH0pXG4gICAgICAgICAudGV4dChmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDgyMCl7XG4gICAgICAgICAgICAgICAgIHJldHVybiBcIitcIitNYXRoLmZsb29yKChNYXRoLmFicyhkKSkqMTAwKStcIiBwdHMuIHdoaXRlXCJcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIHJldHVybiBcIk1vcmUgV2hpdGUgdnMuIENpdHkqIENlbnN1c1wiXG4gICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoTWF0aC5hYnMoZCkpKjEwMCkrXCIgcHRzLiBvdmVyLXJlcHJlc2VudGVkIHdoaXRlXCJcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKDEtZCkqMTAwKStcIiUgTWFsZVwiXG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYoZD09MCl7XG4gICAgICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgODIwKXtcbiAgICAgICAgICAgICAgICAgcmV0dXJuIFwiUGFyaXR5IHcvQ2Vuc3VzXCJcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIHJldHVybiBcIlBhcml0eSB3aXRoIENlbnN1c1wiXG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgICAgIGlmKGQ8LjUpe1xuICAgICAgICAgICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgcmV0dXJuIFwiK1wiK01hdGguZmxvb3IoTWF0aC5hYnMoZCkqMTAwKSArIFwiIHB0cy5cIjtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKDEtZCkqMTAwKStcIiVcIlxuICAgICAgICAgICB9XG4gICAgICAgICAgIGlmKGQ9PS41ICYmIGN1dCAhPSBcInJhY2VcIil7XG4gICAgICAgICAgICAgcmV0dXJuIFwiNTAvNTAgU3BsaXRcIlxuICAgICAgICAgICB9XG4gICAgICAgICAgIGlmKGQ9PS43NSl7XG4gICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDY1MSl7XG4gICAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkKjEwMCkrXCIlIEZlbWFsZVwiO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZihkPT0uOCl7XG4gICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZCoxMDApK1wiJSBGZW1hbGVcIjtcbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZihkPT0xICYmIGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDgyMCl7XG4gICAgICAgICAgICAgICByZXR1cm4gXCIrXCIrTWF0aC5mbG9vcigoTWF0aC5hYnMoZCkpKjEwMCkrXCIgcHRzLiBtb3JlIG5vbi13aGl0ZSB2cy4gY2Vuc3VzXCJcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgcmV0dXJuIFwiTW9yZSBQZW9wbGUgb2YgQ29sb3IgdnMuIENpdHkqIENlbnN1c1wiXG4gICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKGQpKjEwMCkrXCIgcHRzLiBvdmVyLXJlcHJlc2VudGVkIHBlb3BsZSBvZiBjb2xvclwiXG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICAgcmV0dXJuIFwiK1wiK01hdGguZmxvb3IoTWF0aC5hYnMoZCkqMTAwKSArIFwiIHB0cy5cIjtcbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkKjEwMCkrXCIlXCI7XG4gICAgICAgICB9KVxuICAgICAgICAgO1xuXG5cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkQXZlcmFnZSgpe1xuXG4gICAgICAgY2hhcnREaXYuc2VsZWN0KFwiLnN3YXJtLWF2ZXJhZ2VcIikucmVtb3ZlKCk7XG4gICAgICAgY2hhcnREaXYuc2VsZWN0KFwiLnN3YXJtLWFubm5vdGF0aW9uXCIpLnJlbW92ZSgpO1xuXG4gICAgICAgdmFyIGNoYXJ0QXZlcmFnZSA9IGNoYXJ0RGl2LmFwcGVuZChcImdcIilcbiAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hdmVyYWdlXCIpXG4gICAgICAgICAgIDtcblxuICAgICAgIHZhciBjaGFydEFubm90YXRpb24gPSBjaGFydEF2ZXJhZ2UuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hbm5ub3RhdGlvblwiKVxuICAgICAgICA7XG5cbiAgICAgICB2YXIgY2hhcnRBbm5vdGF0aW9uRG90cyA9IFtcImdlbmRlci1vbGRcIixcImdlbmRlclwiXTtcbiAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgIGNoYXJ0QW5ub3RhdGlvbkRvdHMgPSBbXCJyYWNlLW9sZFwiLFwicmFjZVwiXTtcbiAgICAgICB9XG5cbiAgICAgICB2YXIgY2hhcnRBbm5vdGF0aW9uVG9wID0gY2hhcnRBbm5vdGF0aW9uXG4gICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAgICAgICAgIC5kYXRhKGNoYXJ0QW5ub3RhdGlvbkRvdHMpXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWFycm93LWFubm90YXRpb24tdG9wXCIpXG4gICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiK3hTY2FsZShnZXRQZXJjZW50VHlwZShkLGNoYXJ0QW5ub3RhdGlvbkRhdGEudmFsdWUpKStcIixcIiswK1wiKVwiXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsMClcbiAgICAgICAgICA7XG5cbiAgICAgICAgY2hhcnRBbm5vdGF0aW9uVG9wXG4gICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgIC5kdXJhdGlvbihhcnJvd0R1cmF0aW9uKVxuICAgICAgICAgIC5kZWxheShmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgaWYoIXJlYnVpbGRBeGlzKXtcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgICAgcmV0dXJuIGRlbGF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsMSlcblxuICAgICAgICB2YXIgY2hhcnRBbm5vdGF0aW9uVGV4dCA9IFtcIkdlbmRlciBEaXZlcnNpdHkgSW1wcm92ZWRcIixcIkdlbmRlciBEaXZlcnNpdHkgRHJvcHBlZFwiXTtcbiAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICBjaGFydEFubm90YXRpb25UZXh0ID0gW1wiUmFjZSBEaXZlcnNpdHkgSW1wcm92ZWRcIixcIlJhY2UgRGl2ZXJzaXR5IERyb3BwZWRcIl07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2hhcnRBbm5vdGF0aW9uTGVmdCA9IGNoYXJ0QW5ub3RhdGlvblxuICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAuZGF0YShjaGFydEFubm90YXRpb25UZXh0KVxuICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hcnJvdy1hbm5vdGF0aW9uLWxlZnRcIilcbiAgICAgICAgICAuYXR0cihcInhcIiwwKVxuICAgICAgICAgIC5hdHRyKFwieVwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcm93U3BhY2luZyooc3dpdGNoTnVtKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgfSlcbiAgICAgICAgICA7XG5cbiAgICAgICAgdmFyIGNoYXJ0QW5ub3RhdGlvblRvcE9mZnNldCA9IC0zMDtcblxuICAgICAgICBjaGFydEFubm90YXRpb25Ub3AuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgIC5hdHRyKFwieVwiLGNoYXJ0QW5ub3RhdGlvblRvcE9mZnNldClcbiAgICAgICAgICAuYXR0cihcInhcIiwwKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWFycm93LWFubm90YXRpb24tdG9wLXRleHRcIilcbiAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBpZihkPT1cImdlbmRlclwiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiI2RhYjMwYlwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCIjODg4XCJcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgICBpZihkPT1cInJhY2VcIil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic3RhcnRcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBcImVuZFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDY1MSl7XG4gICAgICAgICAgICAgIGlmKGQ9PVwiZ2VuZGVyXCIgfHwgZD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgIHJldHVybiBcIkluIFwiK3llYXJTZWxlY3RlZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBcIkluIFwiK3llYXJPbGRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgICBpZihkPT1cInJhY2VcIil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiUmFjZSBpbiBcIit5ZWFyU2VsZWN0ZWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gXCJSYWNlIGluIFwiK3llYXJPbGRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQ9PVwiZ2VuZGVyXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gXCJHZW5kZXIgaW4gXCIreWVhclNlbGVjdGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJHZW5kZXIgaW4gXCIreWVhck9sZFxuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuXG4gICAgICAgIGNoYXJ0QW5ub3RhdGlvblRvcC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ5MVwiLDApXG4gICAgICAgICAgLmF0dHIoXCJ5MlwiLGNoYXJ0QW5ub3RhdGlvblRvcE9mZnNldClcbiAgICAgICAgICAuYXR0cihcIngxXCIsMClcbiAgICAgICAgICAuYXR0cihcIngyXCIsMClcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hcnJvdy1hbm5vdGF0aW9uLXRvcC1saW5lXCIpXG4gICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgNjUxKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiYmxhY2tcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQ9PVwiZ2VuZGVyXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gXCIjYzFhNDI3XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIiM4ODhcIlxuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuXG5cbiAgICAgIH1cblxuICAgICAgYnVpbGRBdmVyYWdlKCk7XG4gICAgfVxuICAgIGVsc2UgaWYoY2hhcnRUeXBlID09IFwiYXJyb3ctc2NhdHRlci1mdWxsXCIpe1xuXG4gICAgICB2YXIgcm93U3BhY2luZyA9IDMuNTtcblxuICAgICAgdmFyIGNoYXJ0QW5ub3RhdGlvbkRhdGE7XG5cbiAgICAgIHZhciBhbm5vdGF0aW9uRGF0YURpZmYgPSBbXTtcbiAgICAgIHZhciBhbm5vdGF0aW9uVGV4dEFycmF5ID0gW107XG5cbiAgICAgIHZhciBjZWxsRmlsdGVyZWQgPSBjZWxsXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICByZXR1cm4gbmV3c0lEU2VhcmNoTGlzdC5pbmRleE9mKCtkLmtleSkgPT0gLTE7XG4gICAgICAgIH0pXG4gICAgICAgIC5zb3J0KGZ1bmN0aW9uKGEsYil7XG4gICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICByZXR1cm4gYi52YWx1ZS5yYWNlRGlmZiAtIGEudmFsdWUucmFjZURpZmY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICByZXR1cm4gYi52YWx1ZS5kaWZmIC0gYS52YWx1ZS5kaWZmO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oZCxpKXtcblxuICAgICAgICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgYW5ub3RhdGlvbkRhdGFEaWZmLnB1c2goZC52YWx1ZS5yYWNlRGlmZilcbiAgICAgICAgICAgIGFubm90YXRpb25UZXh0QXJyYXkucHVzaChnZXRQZXJjZW50VHlwZShcInJhY2VcIixkLnZhbHVlKSlcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGFubm90YXRpb25EYXRhRGlmZi5wdXNoKGQudmFsdWUuZGlmZilcbiAgICAgICAgICAgIGFubm90YXRpb25UZXh0QXJyYXkucHVzaChnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUpKVxuICAgICAgICAgIH1cbiAgICAgICAgICBkLnZhbHVlLmFycm93U29ydCA9IGk7XG4gICAgICAgIH0pO1xuXG4gICAgICB2YXIgYW5ub3RhdGlvbkRhdGFFeHRlbnQgPSBkMy5leHRlbnQoYW5ub3RhdGlvblRleHRBcnJheSk7XG5cbiAgICAgIHZhciBpdGVtcyA9IGNlbGxGaWx0ZXJlZC5zaXplKCk7XG5cbiAgICAgIHZhciBkZWxheSA9IGR1cmF0aW9uKzEwMDA7XG5cbiAgICAgIGNlbGxDaXJjbGUgPSBjZWxsLnNlbGVjdEFsbChcIi5zd2FybS1jaXJjbGVcIik7XG5cbiAgICAgIGNlbGxDaXJjbGVcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwwKVxuICAgICAgICA7XG5cbiAgICAgIGNlbGxJbWFnZXMgPSBjZWxsLnNlbGVjdEFsbChcIi5zd2FybS1pbWFnZS1jb250YWluZXJcIik7XG5cbiAgICAgIGNlbGxJbWFnZXNcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwwKVxuICAgICAgICA7XG5cbiAgICAgIHZhciB0ZXh0QW1vdW50ID0gMTU7XG5cbiAgICAgIGNlbGxUZXh0ID0gY2VsbC5zZWxlY3RBbGwoXCIuc3dhcm0tdGV4dFwiKTtcblxuICAgICAgY2VsbFRleHRcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oMClcbiAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICBpZihnZXRQZXJjZW50VHlwZShcImdlbmRlci1vbGRcIixkLnZhbHVlKT09XCJuL2FcIil7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICBpZihNYXRoLmFicyhkLnZhbHVlLnJhY2VEaWZmKSA8IC4wMyl7XG4gICAgICAgICAgICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsZC52YWx1ZSkpKzc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihkLnZhbHVlLnJhY2VEaWZmID4gMCl7XG4gICAgICAgICAgICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsZC52YWx1ZSkpKzY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwicmFjZVwiLGQudmFsdWUpKS02O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgaWYoTWF0aC5hYnMoZC52YWx1ZS5kaWZmKSA8IC4wMil7XG4gICAgICAgICAgICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlKSkrNztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQudmFsdWUuZGlmZiA+IDApe1xuICAgICAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkpKzY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkpLTY7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsZnVuY3Rpb24oZCxpLGope1xuICAgICAgICAgIGlmKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyLW9sZFwiLGQudmFsdWUpPT1cIm4vYVwiKXtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgNjAwKXtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgIGlmKGdldFBlcmNlbnRUeXBlKFwicmFjZVwiLGQudmFsdWUpID09IGFubm90YXRpb25EYXRhRXh0ZW50WzBdIHx8IGdldFBlcmNlbnRUeXBlKFwicmFjZVwiLGQudmFsdWUpID09IGFubm90YXRpb25EYXRhRXh0ZW50WzFdKXtcbiAgICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlKSA9PSBhbm5vdGF0aW9uRGF0YUV4dGVudFswXSB8fCBnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUpID09IGFubm90YXRpb25EYXRhRXh0ZW50WzFdKXtcbiAgICAgICAgICAgIHJldHVybiAxXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXItb2xkXCIsZC52YWx1ZSk9PVwibi9hXCIpe1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGN1dCA9PVwicmFjZVwiKXtcbiAgICAgICAgICAgIGlmKE1hdGguYWJzKGQudmFsdWUucmFjZURpZmYpIDwgLjAzKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiIzg4OFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihkLnZhbHVlLnJhY2VEaWZmID4gMCl7XG4gICAgICAgICAgICAgIHJldHVybiBcImJsdWVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcInJlZFwiO1xuXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICBpZihNYXRoLmFicyhkLnZhbHVlLmRpZmYpIDwgLjAyKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiIzg4OFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihkLnZhbHVlLmRpZmYgPiAwKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiYmx1ZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwicmVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCxpKSB7XG4gICAgICAgICAgaWYoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXItb2xkXCIsZC52YWx1ZSk9PVwibi9hXCIpe1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkLnZhbHVlLmFycm93U29ydCpyb3dTcGFjaW5nXG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBpZihnZXRQZXJjZW50VHlwZShcImdlbmRlci1vbGRcIixkLnZhbHVlKT09XCJuL2FcIil7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICAgIGlmKE1hdGguYWJzKGQudmFsdWUucmFjZURpZmYpIDwgLjAzKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwic3RhcnRcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZC52YWx1ZS5yYWNlRGlmZiA+IDApe1xuICAgICAgICAgICAgICByZXR1cm4gXCJzdGFydFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICBpZihNYXRoLmFicyhkLnZhbHVlLmRpZmYpIDwgLjAyKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwic3RhcnRcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZC52YWx1ZS5kaWZmID4gMCl7XG4gICAgICAgICAgICAgIHJldHVybiBcInN0YXJ0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFwiZW5kXCI7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcInRyYW5zZm9ybVwiLFwibm9uZVwiKVxuICAgICAgICA7XG4gICAgICAvL1xuICAgICAgY2VsbERhc2ggPSBjZWxsLnNlbGVjdEFsbChcIi5zd2FybS10ZXh0LWRhc2hcIik7XG5cbiAgICAgIGNlbGxEYXNoXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIixmdW5jdGlvbihkLGksail7XG4gICAgICAgICAgaWYoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXItb2xkXCIsZC52YWx1ZSk9PVwibi9hXCIpe1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgaWYoZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsZC52YWx1ZSkgPT0gYW5ub3RhdGlvbkRhdGFFeHRlbnRbMF0gfHwgZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsZC52YWx1ZSkgPT0gYW5ub3RhdGlvbkRhdGFFeHRlbnRbMV0pe1xuICAgICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICBpZihnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUpID09IGFubm90YXRpb25EYXRhRXh0ZW50WzBdIHx8IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkgPT0gYW5ub3RhdGlvbkRhdGFFeHRlbnRbMV0pe1xuICAgICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcInkxXCIsIGZ1bmN0aW9uKGQsaSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIHJldHVybiBkLnZhbHVlLmFycm93U29ydCpyb3dTcGFjaW5nXG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwieTJcIiwgZnVuY3Rpb24oZCxpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgcmV0dXJuIGQudmFsdWUuYXJyb3dTb3J0KnJvd1NwYWNpbmdcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJ4MVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICBpZihNYXRoLmFicyhkLnZhbHVlLnJhY2VEaWZmKSA8IC4wMyl7XG4gICAgICAgICAgICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsZC52YWx1ZSkpKzU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihkLnZhbHVlLnJhY2VEaWZmID4gMCl7XG4gICAgICAgICAgICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsZC52YWx1ZSkpKzQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwicmFjZVwiLGQudmFsdWUpKS00O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgaWYoTWF0aC5hYnMoZC52YWx1ZS5kaWZmKSA8IC4wMil7XG4gICAgICAgICAgICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlKSkrNTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQudmFsdWUuZGlmZiA+IDApe1xuICAgICAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkpKzQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geFNjYWxlKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkpLTQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcIngyXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgIGlmKE1hdGguYWJzKGQudmFsdWUucmFjZURpZmYpIDwgLjAyKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2VcIixkLnZhbHVlKSktMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQudmFsdWUucmFjZURpZmYgPiAwKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2VcIixkLnZhbHVlKSktNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsZC52YWx1ZSkpKzQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICBpZihNYXRoLmFicyhkLnZhbHVlLmRpZmYpIDwgLjAyKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHhTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUpKS0yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoZC52YWx1ZS5kaWZmID4gMCl7XG4gICAgICAgICAgICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlKSktNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlKSkrNDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgIGZ1bmN0aW9uIGRyYXdBcnJvdyAodDAsdDEsdG9wT2Zmc2V0KSB7XG4gIFx0XHRcdHZhciBkID0gdDEgPiB0MCA/XG4gICAgICAgICAgLy8gKFwiTVwiK3QwK1wiLDAgTFwiK3QxK1wiLDAgWlwiKSA6XG4gICAgICAgICAgKFwiTVwiKyh0MS02KStcIixcIit0b3BPZmZzZXQrXCIgTFwiKyh0MS0xMikrXCIsXCIrKHRvcE9mZnNldCs0KStcIiBMXCIrKHQxLTEyKStcIixcIisodG9wT2Zmc2V0KzEuNSkrXCIgTFwiK3QwK1wiLFwiK3RvcE9mZnNldCtcIiBMXCIrKHQxLTEyKStcIixcIisodG9wT2Zmc2V0LTEuNSkrXCIgTFwiKyh0MS0xMikrXCIsXCIrKHRvcE9mZnNldC00KStcIiBMXCIrKHQxLTYpK1wiLFwiK3RvcE9mZnNldCkgOlxuICAgICAgICAgIChcIk1cIisodDErNikrXCIsXCIrdG9wT2Zmc2V0K1wiIExcIisodDErMTIpK1wiLFwiKyh0b3BPZmZzZXQrNCkrXCIgTFwiKyh0MSsxMikrXCIsXCIrKHRvcE9mZnNldCsxLjUpK1wiIExcIit0MCtcIixcIit0b3BPZmZzZXQrXCIgTFwiKyh0MSsxMikrXCIsXCIrKHRvcE9mZnNldC0xLjUpK1wiIExcIisodDErMTIpK1wiLFwiKyh0b3BPZmZzZXQtNCkrXCIgTFwiKyh0MSs2KStcIixcIit0b3BPZmZzZXQpO1xuXG4gICAgICAgICAgLy8gKFwiTTAsXCIgKyAodDEtMikgKyBcIiBMNCxcIiArICh0MS04KSArIFwiIEwxLjUsXCIgKyAodDEtOCkgKyBcIiBMMCxcIiArIHQwICsgXCIgTC0xLjUsXCIgKyAodDEtOCkgKyBcIiBMLTQsXCIgKyAodDEtOCkgKyBcIiBaXCIpIDpcbiAgXHRcdFx0XHQvLyAoXCJNMCxcIiArICh0MS0yKSArIFwiIEw0LFwiICsgKHQxLTgpICsgXCIgTDEuNSxcIiArICh0MS04KSArIFwiIEwwLFwiICsgdDAgKyBcIiBMLTEuNSxcIiArICh0MS04KSArIFwiIEwtNCxcIiArICh0MS04KSArIFwiIFpcIikgOlxuICBcdFx0XHRcdC8vIChcIk0wLFwiICsgKHQxKzIpICsgXCIgTDQsXCIgKyAodDErOCkgKyBcIiBMMS41LFwiICsgKHQxKzgpICsgXCIgTDAsXCIgKyB0MCArIFwiIEwtMS41LFwiICsgKHQxKzgpICsgXCIgTC00LFwiICsgKHQxKzgpICsgXCIgWlwiKTtcbiAgXHRcdFx0cmV0dXJuIGQ7XG4gIFx0XHR9XG4gICAgICBmdW5jdGlvbiBkcmF3RGlhbW9uZCh0MCx0MSx0b3BPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIChcIk1cIisodDEtNCkrXCIsXCIgKyB0b3BPZmZzZXRcbiAgICAgICAgKyBcIiBMXCIrKHQxLTgpK1wiLFwiICsgKHRvcE9mZnNldCs0KVxuICAgICAgICAvLyArIFwiIEwxLjUsXCIgKyAodDEtOClcbiAgICAgICAgKyBcIiBMXCIrKHQxLTEyKStcIixcIiArICh0b3BPZmZzZXQrMClcbiAgICAgICAgKyBcIiBMXCIrKHQxLTgpK1wiLFwiICsgKHRvcE9mZnNldC00KVxuICAgICAgICArIFwiIFpcIik7XG4gICAgICB9XG5cbiAgICAgIGNlbGxMaW5lID0gY2VsbC5zZWxlY3RBbGwoXCIuc3dhcm0tbGluZVwiKVxuXG4gICAgICB2YXIga2VlcE5ld3NJRFNlYXJjaCA9IG5ld3NJRFNlYXJjaDtcblxuICAgICAgZnVuY3Rpb24gZ2V0TGluZUZpbGwoZCl7XG4gICAgICAgIGlmKCtkLmtleSA9PSAra2VlcE5ld3NJRFNlYXJjaCl7XG4gICAgICAgICAgcmV0dXJuIG5ld3NJRFNlYXJjaENvbG9yXG4gICAgICAgIH1cbiAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICBpZihNYXRoLmFicyhkLnZhbHVlLnJhY2VEaWZmKSA8IC4wMyl7XG4gICAgICAgICAgICByZXR1cm4gXCIjODg4XCJcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZC52YWx1ZS5yYWNlRGlmZiA+IDApe1xuICAgICAgICAgICAgcmV0dXJuIFwidXJsKCNncmFkaWVudC1ibHVlKVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgIGlmKE1hdGguYWJzKGQudmFsdWUuZGlmZikgPCAuMDIpe1xuICAgICAgICAgICAgcmV0dXJuIFwiIzg4OFwiXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGQudmFsdWUuZGlmZiA+IDApe1xuICAgICAgICAgICAgcmV0dXJuIFwidXJsKCNncmFkaWVudC1ibHVlKVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJ1cmwoI2dyYWRpZW50LXJlZClcIjtcbiAgICAgIH1cblxuICAgICAgY2VsbExpbmVcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oMClcbiAgICAgICAgLmF0dHIoXCJkXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXItb2xkXCIsZC52YWx1ZSk9PVwibi9hXCIpe1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgdmFyIHJlc3VsdE9sZCA9IGdldFBlcmNlbnRUeXBlKFwicmFjZS1vbGRcIixkLnZhbHVlKVxuICAgICAgICAgICAgaWYocmVzdWx0T2xkID09IFwibi9hXCIpe1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0MCA9IHhTY2FsZShnZXRQZXJjZW50VHlwZShcInJhY2Utb2xkXCIsZC52YWx1ZSkpXG4gICAgICAgICAgICB2YXIgdDEgPSB4U2NhbGUoZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsZC52YWx1ZSkpXG5cbiAgICAgICAgICAgIGlmKE1hdGguYWJzKGQudmFsdWUucmFjZURpZmYpIDwgLjAzKXtcbiAgICAgICAgICAgICAgcmV0dXJuIGRyYXdEaWFtb25kKHQwLHQxLChkLnZhbHVlLmFycm93U29ydCpyb3dTcGFjaW5nKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkcmF3QXJyb3codDAsdDEsKGQudmFsdWUuYXJyb3dTb3J0KnJvd1NwYWNpbmcpKVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgdmFyIHJlc3VsdE9sZCA9IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyLW9sZFwiLGQudmFsdWUpXG4gICAgICAgICAgICBpZihyZXN1bHRPbGQgPT0gXCJuL2FcIil7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHQwID0geFNjYWxlKHJlc3VsdE9sZClcbiAgICAgICAgICAgIHZhciB0MSA9IHhTY2FsZShnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUpKVxuXG4gICAgICAgICAgICBpZihNYXRoLmFicyhkLnZhbHVlLmRpZmYpIDwgLjAyKXtcbiAgICAgICAgICAgICAgcmV0dXJuIGRyYXdEaWFtb25kKHQwLHQxLChkLnZhbHVlLmFycm93U29ydCpyb3dTcGFjaW5nKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkcmF3QXJyb3codDAsdDEsKGQudmFsdWUuYXJyb3dTb3J0KnJvd1NwYWNpbmcpKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIGdldExpbmVGaWxsKGQpO1xuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJzdHJva2VcIixcIm5vbmVcIilcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oNzUwKVxuICAgICAgICAuZGVsYXkoZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBpZihkLmtleSA9PSBuZXdzSURTZWFyY2gpe1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAyNTArZC52YWx1ZS5hcnJvd1NvcnQqMTA7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKGQua2V5ID09IG5ld3NJRFNlYXJjaCl7XG4gICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCxcIisoLWQudmFsdWUuYXJyb3dTb3J0KnJvd1NwYWNpbmcpK1wiKVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSlcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oNzUwKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKGQua2V5ID09IG5ld3NJRFNlYXJjaCl7XG4gICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoMCwwKVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSlcbiAgICAgICAgO1xuXG4gICAgICAvLyBpZihyZWJ1aWxkQXhpcyl7XG4gICAgICAgIGNoYXJ0QXhpc1xuICAgICAgICAgIC5zZWxlY3QoXCJnXCIpXG4gICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgIC5kdXJhdGlvbigyNTApXG4gICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLDApXG4gICAgICAgICAgLm9uKFwiZW5kXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICBidWlsZEF4aXMoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIDtcbiAgICAgIC8vIH1cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkQXhpcygpe1xuICAgICAgICB2YXIgY2hhcnRBeGlzQ29udGFpbmVyID0gY2hhcnRBeGlzLmFwcGVuZChcImdcIilcbiAgICAgICAgdmFyIGNoYXJ0QXhpc0xpbmVzID0gY2hhcnRBeGlzQ29udGFpbmVyLmFwcGVuZChcImdcIilcblxuICAgICAgICB2YXIgbGluZXNEYXRhID0gWy4yLC4zNSwuNSwuNjUsLjhdO1xuICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgIGxpbmVzRGF0YSA9IFstMSwtLjI1LDAsLjI1LDFdO1xuICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA3MDApe1xuICAgICAgICAgICAgbGluZXNEYXRhID0gWy0xLC0uNSwwLC4zNV07XG4gICAgICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgNDUwKXtcbiAgICAgICAgICAgICAgICBsaW5lc0RhdGEgPSBbLS44NSwwLC4zNV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2hhcnRBeGlzTGluZXNcbiAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1hcnJvdy14LWF4aXMtbGluZXNcIilcbiAgICAgICAgIC5zZWxlY3RBbGwoXCJsaW5lXCIpXG4gICAgICAgICAuZGF0YShsaW5lc0RhdGEpXG4gICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgIC5hdHRyKFwieDFcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgcmV0dXJuIHhTY2FsZShkKTtcbiAgICAgICAgIH0pXG4gICAgICAgICAuYXR0cihcIngyXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgIHJldHVybiB4U2NhbGUoZCk7XG4gICAgICAgICB9KVxuICAgICAgICAgLmF0dHIoXCJ5MVwiLC0xMClcbiAgICAgICAgIC5hdHRyKFwieTJcIixpdGVtcypyb3dTcGFjaW5nKVxuICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXhpcy1saW5lXCIpXG4gICAgICAgICAuc3R5bGUoXCJzdHJva2VcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICBpZihkPT0uNSl7XG4gICAgICAgICAgICAgcmV0dXJuIFwicmdiYSgwLCAwLCAwLCAwLjA5KVwiO1xuICAgICAgICAgICB9XG4gICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgfSlcbiAgICAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgIGlmKGQ9PS41KXtcbiAgICAgICAgICAgICByZXR1cm4gXCIycHhcIjtcbiAgICAgICAgICAgfVxuICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgIH0pXG4gICAgICAgICA7XG5cbiAgICAgICB2YXIgY2hhcnRBeGlzVGV4dCA9IGNoYXJ0QXhpc0NvbnRhaW5lci5hcHBlbmQoXCJnXCIpXG5cbiAgICAgICBjaGFydEF4aXNUZXh0XG4gICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgIC5kYXRhKGxpbmVzRGF0YSlcbiAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgLmF0dHIoXCJ4XCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgcmV0dXJuIHhTY2FsZShkKTtcbiAgICAgICAgIH0pXG4gICAgICAgICAuYXR0cihcInlcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgfSlcbiAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICByZXR1cm4gXCJzd2FybS1hcnJvdy10aWNrLXRleHRcIjtcbiAgICAgICAgIH0pXG4gICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgICAgIHJldHVybiBcInN0YXJ0XCJcbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgNzAwICYmIGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgaWYoZD09MCl7XG4gICAgICAgICAgICAgICByZXR1cm4gXCJlbmRcIlxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZihkPT0xICYmIGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgcmV0dXJuIFwiZW5kXCI7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYoZD09LjM1ICYmIGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICAgcmV0dXJuIFwiZW5kXCI7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYoZD09Ljgpe1xuICAgICAgICAgICAgIHJldHVybiBcImVuZFwiO1xuICAgICAgICAgICB9XG4gICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgfSlcbiAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgIGlmKGQ9PS4zNSAmJiBjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgICByZXR1cm4gXCIrXCIrTWF0aC5mbG9vcihNYXRoLmFicyhkKSoxMDApICsgXCIgcHRzLiBOb24td2hpdGVcIjtcbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgICBpZihjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDcwMCl7XG4gICAgICAgICAgICAgICAgIHJldHVybiBcIitcIitNYXRoLmZsb29yKChNYXRoLmFicyhkKSkqMTAwKStcIiBwdHMgV2hpdGVcIlxuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgcmV0dXJuIFwiTW9yZSBXaGl0ZSB2cy4gQ2l0eSogQ2Vuc3VzXCJcbiAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKChNYXRoLmFicyhkKSkqMTAwKStcIiBwdHMuIG92ZXItcmVwcmVzZW50ZWQgd2hpdGVcIlxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMS1kKSoxMDApK1wiJSBNYWxlXCJcbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZihkPT0wKXtcbiAgICAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA3NTApe1xuICAgICAgICAgICAgICAgICByZXR1cm4gXCJQYXJpdHkgdy9jZW5zdXNcIlxuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgcmV0dXJuIFwiUGFyaXR5IHdpdGggQ2Vuc3VzXCJcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYoZDwuNSl7XG4gICAgICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICAgICByZXR1cm4gXCIrXCIrTWF0aC5mbG9vcihNYXRoLmFicyhkKSoxMDApICsgXCIgcHRzLlwiO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMS1kKSoxMDApK1wiJVwiXG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYoZD09LjUgJiYgY3V0ICE9IFwicmFjZVwiKXtcbiAgICAgICAgICAgICByZXR1cm4gXCI1MC81MCBTcGxpdFwiXG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYoZD09Ljgpe1xuICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKGQqMTAwKStcIiUgRmVtYWxlXCI7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgaWYoZD09MSAmJiBjdXQgPT0gXCJyYWNlXCIpe1xuICAgICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA3MDApe1xuICAgICAgICAgICAgICAgcmV0dXJuIFwiK1wiK01hdGguZmxvb3IoKGQpKjEwMCkrXCIgcHRzIE5vbi13aGl0ZVwiXG4gICAgICAgICAgICAgfVxuICAgICAgICAgICAgIHJldHVybiBcIk1vcmUgUGVvcGxlIG9mIENvbG9yIHZzLiBDaXR5KiBDZW5zdXNcIlxuICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKChkKSoxMDApK1wiIHB0cy4gb3Zlci1yZXByZXNlbnRlZCBwZW9wbGUgb2YgY29sb3JcIlxuICAgICAgICAgICB9XG4gICAgICAgICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgIHJldHVybiBcIitcIitNYXRoLmZsb29yKE1hdGguYWJzKGQpKjEwMCkgKyBcIiBwdHMuXCI7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZCoxMDApK1wiJVwiO1xuICAgICAgICAgfSlcbiAgICAgICAgIDtcblxuXG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBidWlsZEF2ZXJhZ2UoKXtcblxuICAgICAgIGNoYXJ0RGl2LnNlbGVjdChcIi5zd2FybS1hdmVyYWdlXCIpLnJlbW92ZSgpO1xuICAgICAgIGNoYXJ0RGl2LnNlbGVjdChcIi5zd2FybS1hbm5ub3RhdGlvblwiKS5yZW1vdmUoKTtcblxuICAgICAgIHZhciBhbm5vdGF0aW9uRGF0YURpZmZEYXRhID0gWzAsMF07XG5cbiAgICAgICB2YXIgY2hhcnRBdmVyYWdlID0gY2hhcnREaXYuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpXG4gICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWF2ZXJhZ2VcIilcbiAgICAgICAgICAgO1xuXG4gICAgICAgdmFyIGNoYXJ0QW5ub3RhdGlvbiA9IGNoYXJ0QXZlcmFnZS5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWFubm5vdGF0aW9uXCIpXG4gICAgICAgIDtcblxuICAgICAgIHZhciBjaGFydE1vdXNlb3ZlckJveCA9IGNoYXJ0QXZlcmFnZS5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcImFycm93LXN3YXJtLWZ1bGwtbW91c2VvdmVyXCIpXG4gICAgICAgIC5zZWxlY3RBbGwoXCJyZWN0XCIpXG4gICAgICAgIC5kYXRhKGNlbGxGaWx0ZXJlZC5kYXRhKCkpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwid2lkdGhcIix3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIixyb3dTcGFjaW5nKVxuICAgICAgICAuYXR0cihcInhcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgIHJldHVybiAwXG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwieVwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHJldHVybiAoZC52YWx1ZS5hcnJvd1NvcnQqcm93U3BhY2luZykgLSByb3dTcGFjaW5nLzI7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcImFycm93LXN3YXJtLWZ1bGwtbW91c2VvdmVyLXJlY3RcIilcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oZCl7XG5cbiAgICAgICAgICBjaGFydEFubm90YXRpb25BdmVyYWdlLnN0eWxlKFwib3BhY2l0eVwiLC41KTtcbiAgICAgICAgICBjaGFydEFubm90YXRpb25EaWZmLnN0eWxlKFwib3BhY2l0eVwiLC41KTtcblxuICAgICAgICAgIHZhciBpdGVtID0gZC5rZXk7XG5cbiAgICAgICAgICBjaGFydEF2ZXJhZ2VUZXh0XG4gICAgICAgICAgICAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsXCJoaWRkZW5cIilcbiAgICAgICAgICAgIDtcblxuICAgICAgICAgIGNlbGxUZXh0XG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsZnVuY3Rpb24oZCxpLGope1xuICAgICAgICAgICAgICBpZihnZXRQZXJjZW50VHlwZShcImdlbmRlci1vbGRcIixkLnZhbHVlKT09XCJuL2FcIil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYoZC5rZXkgPT0gaXRlbSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgIGlmKGQua2V5ID09IGl0ZW0pe1xuICAgICAgICAgICAgICAgIHJldHVybiBcImJsYWNrXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgICAgICBpZihNYXRoLmFicyhkLnZhbHVlLnJhY2VEaWZmKSA8IC4wMil7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCIjODg4XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoZC52YWx1ZS5yYWNlRGlmZiA+IDApe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYmx1ZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGlmKE1hdGguYWJzKGQudmFsdWUuZGlmZikgPCAuMDIpe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiIzg4OFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGQudmFsdWUuZGlmZiA+IDApe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYmx1ZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gXCJyZWRcIjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3R5bGUoXCJmb250LXNpemVcIixcIjE0cHhcIik7XG4gICAgICAgICAgICA7XG5cbiAgICAgICAgICBjZWxsRGFzaFxuICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLGZ1bmN0aW9uKGQsaSxqKXtcbiAgICAgICAgICAgICAgaWYoZC5rZXkgPT0gaXRlbSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICBjZWxsTGluZVxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgIGlmKGQua2V5ID09IGl0ZW0pe1xuICAgICAgICAgICAgICAgIHJldHVybiBcImJsYWNrXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZ2V0TGluZUZpbGwoZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgIGlmKGQua2V5ID09IGl0ZW0pe1xuICAgICAgICAgICAgICAgIHJldHVybiBcImJsYWNrXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gXCJub25lXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA7XG5cbiAgICAgICAgfSlcbiAgICAgICAgLm9uKFwibW91c2VvdXRcIixmdW5jdGlvbihkKXtcblxuICAgICAgICAgIGNoYXJ0QW5ub3RhdGlvbkF2ZXJhZ2Uuc3R5bGUoXCJvcGFjaXR5XCIsbnVsbCk7XG4gICAgICAgICAgY2hhcnRBbm5vdGF0aW9uRGlmZi5zdHlsZShcIm9wYWNpdHlcIixudWxsKTtcblxuICAgICAgICAgIGNoYXJ0QXZlcmFnZVRleHRcbiAgICAgICAgICAgIC5zdHlsZShcInZpc2liaWxpdHlcIixudWxsKVxuICAgICAgICAgICAgO1xuXG4gICAgICAgICAgY2VsbERhc2hcbiAgICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIixmdW5jdGlvbihkLGksail7XG4gICAgICAgICAgICAgIGlmKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyLW9sZFwiLGQudmFsdWUpPT1cIm4vYVwiKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgICAgICBpZihnZXRQZXJjZW50VHlwZShcInJhY2VcIixkLnZhbHVlKSA9PSBhbm5vdGF0aW9uRGF0YUV4dGVudFswXSB8fCBnZXRQZXJjZW50VHlwZShcInJhY2VcIixkLnZhbHVlKSA9PSBhbm5vdGF0aW9uRGF0YUV4dGVudFsxXSl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIGlmKGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkgPT0gYW5ub3RhdGlvbkRhdGFFeHRlbnRbMF0gfHwgZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXJcIixkLnZhbHVlKSA9PSBhbm5vdGF0aW9uRGF0YUV4dGVudFsxXSl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgIGNlbGxUZXh0XG4gICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsZnVuY3Rpb24oZCxpLGope1xuICAgICAgICAgICAgICBpZihnZXRQZXJjZW50VHlwZShcImdlbmRlci1vbGRcIixkLnZhbHVlKT09XCJuL2FcIil7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYoY3V0PT1cInJhY2VcIil7XG4gICAgICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDcwMCl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsZC52YWx1ZSkgPT0gYW5ub3RhdGlvbkRhdGFFeHRlbnRbMF0gfHwgZ2V0UGVyY2VudFR5cGUoXCJyYWNlXCIsZC52YWx1ZSkgPT0gYW5ub3RhdGlvbkRhdGFFeHRlbnRbMV0pe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICBpZihnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUpID09IGFubm90YXRpb25EYXRhRXh0ZW50WzBdIHx8IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSkgPT0gYW5ub3RhdGlvbkRhdGFFeHRlbnRbMV0pe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgICAgICBpZihNYXRoLmFicyhkLnZhbHVlLnJhY2VEaWZmKSA8IC4wMil7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCIjODg4XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoZC52YWx1ZS5yYWNlRGlmZiA+IDApe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYmx1ZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgaWYoTWF0aC5hYnMoZC52YWx1ZS5kaWZmKSA8IC4wMil7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCIjODg4XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoZC52YWx1ZS5kaWZmID4gMCl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCJibHVlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBcInJlZFwiO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdHlsZShcImZvbnQtc2l6ZVwiLG51bGwpO1xuICAgICAgICAgICAgO1xuXG4gICAgICAgICAgY2VsbExpbmVcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICByZXR1cm4gZ2V0TGluZUZpbGwoZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0eWxlKFwic3Ryb2tlXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgIHJldHVybiBcIm5vbmVcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDtcblxuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgICBjaGFydEF2ZXJhZ2UuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJhcnJvdy1zY2F0dGVyLWxpbmUgYXJyb3ctc2NhdHRlci1saW5lLWF2ZXJhZ2VcIilcbiAgICAgICAgLmF0dHIoXCJkXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgdmFyIHQwID0geFNjYWxlKG5ld3NOZXN0QXZlcmFnZVQwKVxuICAgICAgICAgIHZhciB0MSA9IHhTY2FsZShuZXdzTmVzdEF2ZXJhZ2VUMSlcblxuICAgICAgICAgIGlmKE1hdGguYWJzKG5ld3NOZXN0QXZlcmFnZVQxLW5ld3NOZXN0QXZlcmFnZVQwKSA8IC4wMil7XG4gICAgICAgICAgICByZXR1cm4gZHJhd0RpYW1vbmQodDAsdDEsaGVpZ2h0LzIrMjApXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkcmF3QXJyb3codDAsdDEsaGVpZ2h0LzIrMjApXG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKG5ld3NOZXN0QXZlcmFnZVQxLW5ld3NOZXN0QXZlcmFnZVQwID4gMCl7XG4gICAgICAgICAgICByZXR1cm4gXCJ1cmwoI2dyYWRpZW50LWF2ZXJhZ2UpXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFwidXJsKCNncmFkaWVudClcIjtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIixcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwxKVxuICAgICAgICA7XG5cbiAgICAgICB2YXIgY2hhcnRBdmVyYWdlVGV4dCA9IGNoYXJ0QXZlcmFnZVxuICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwiYXJyb3ctc2NhdHRlci1hdmVyYWdlLXRleHRcIilcbiAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIreFNjYWxlKG5ld3NOZXN0QXZlcmFnZVQxKStcIixcIisoaGVpZ2h0LzIrMjApK1wiKVwiXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcImFycm93LXNjYXR0ZXItYXZlcmFnZS10ZXh0LWxhYmVsXCIpXG4gICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICByZXR1cm4gXCJBdmVyYWdlXCI7XG4gICAgICAgICAgfSlcbiAgICAgICAgICA7XG5cbiAgICAgICBmb3IgKHZhciBpdGVtIGluIGFubm90YXRpb25EYXRhRGlmZil7XG4gICAgICAgICBpZihhbm5vdGF0aW9uRGF0YURpZmZbaXRlbV0+IC4wMil7XG4gICAgICAgICAgIGFubm90YXRpb25EYXRhRGlmZkRhdGFbMF0gPSAgYW5ub3RhdGlvbkRhdGFEaWZmRGF0YVswXSsxXG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIGlmKGFubm90YXRpb25EYXRhRGlmZltpdGVtXSA8IC0uMDIpe1xuICAgICAgICAgICBhbm5vdGF0aW9uRGF0YURpZmZEYXRhWzFdID0gIGFubm90YXRpb25EYXRhRGlmZkRhdGFbMV0rMVxuICAgICAgICAgfVxuICAgICAgIH1cblxuICAgICAgIHZhciBjaGFydEFubm90YXRpb25EaWZmID0gY2hhcnRBbm5vdGF0aW9uXG4gICAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgIC5kYXRhKGFubm90YXRpb25EYXRhRGlmZkRhdGEpXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWFycm93LWZ1bGwtYW5ub3RhdGlvbi1kaWZmXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBpZihjdXQ9PVwicmFjZVwiKXtcbiAgICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA3MDApe1xuICAgICAgICAgICAgICBpZih2aWV3cG9ydFdpZHRoIDwgNjAwKXtcbiAgICAgICAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIit4U2NhbGUoLTEpK1wiLFwiKyhoZWlnaHQqYW5ub3RhdGlvbkRhdGFEaWZmRGF0YVswXS9pdGVtcy8yKStcIilcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIreFNjYWxlKC0xKStcIixcIitoZWlnaHQqKDEtKGFubm90YXRpb25EYXRhRGlmZkRhdGFbMV0vaXRlbXMvMikpK1wiKVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYoaT09MCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiK3hTY2FsZSgwKStcIixcIisoaGVpZ2h0KmFubm90YXRpb25EYXRhRGlmZkRhdGFbMF0vaXRlbXMvMikrXCIpXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIreFNjYWxlKDApK1wiLFwiK2hlaWdodCooMS0oYW5ub3RhdGlvbkRhdGFEaWZmRGF0YVsxXS9pdGVtcy8yKSkrXCIpXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIreFNjYWxlKC4zKStcIixcIisoaGVpZ2h0KmFubm90YXRpb25EYXRhRGlmZkRhdGFbMF0vaXRlbXMvMikrXCIpXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIit4U2NhbGUoLjMpK1wiLFwiK2hlaWdodCooMS0oYW5ub3RhdGlvbkRhdGFEaWZmRGF0YVsxXS9pdGVtcy8yKSkrXCIpXCJcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIreFNjYWxlKC41MSkrXCIsXCIrKGhlaWdodCphbm5vdGF0aW9uRGF0YURpZmZEYXRhWzBdL2l0ZW1zLzIpK1wiKVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIreFNjYWxlKC41MSkrXCIsXCIraGVpZ2h0KigxLShhbm5vdGF0aW9uRGF0YURpZmZEYXRhWzFdL2l0ZW1zLzIpKStcIilcIlxuICAgICAgICAgIH1cblxuICAgICAgICB9KVxuICAgICAgICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgIHJldHVybiBkMy5jb2xvcihcImJsdWVcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkMy5jb2xvcihcInJlZFwiKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJ4XCIsMClcbiAgICAgICAgLmF0dHIoXCJ5XCIsMClcbiAgICAgICAgLmF0dHIoXCJkeVwiLDApXG4gICAgICAgIC5zZWxlY3RBbGwoXCJ0c3BhblwiKVxuICAgICAgICAuZGF0YShmdW5jdGlvbihkLGkpe1xuICAgICAgICAgIGlmKGN1dCA9PSBcInJhY2VcIil7XG4gICAgICAgICAgICBpZihpPT0wKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFtNYXRoLnJvdW5kKGQvaXRlbXMqMTAwKStcIiVcIixcIiBvZiBuZXdzcm9vbXMgXCIsXCJnYWluZWRcIixcInJhY2lhbCBkaXZlcnNpdHksIFwiK3llYXJPbGQrXCIgLSBcIit5ZWFyU2VsZWN0ZWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtNYXRoLnJvdW5kKGQvaXRlbXMqMTAwKStcIiVcIixcIiBvZiBuZXdzcm9vbXMgXCIsXCJsb3N0XCIsXCJyYWNpYWwgZGl2ZXJzaXR5LCBcIit5ZWFyT2xkK1wiIC0gXCIreWVhclNlbGVjdGVkXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgICAgICByZXR1cm4gW01hdGgucm91bmQoZC9pdGVtcyoxMDApK1wiJVwiLFwiIG9mIG5ld3Nyb29tcyBcIixcImdhaW5lZFwiLFwiZ2VuZGVyIGRpdmVyc2l0eSwgXCIreWVhck9sZCtcIiAtIFwiK3llYXJTZWxlY3RlZF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW01hdGgucm91bmQoZC9pdGVtcyoxMDApK1wiJVwiLFwiIG9mIG5ld3Nyb29tcyBcIixcImxvc3RcIixcImdlbmRlciBkaXZlcnNpdHksIFwiK3llYXJPbGQrXCIgLSBcIit5ZWFyU2VsZWN0ZWRdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcInRzcGFuXCIpXG4gICAgICAgIC5hdHRyKFwieFwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgaWYoaT09Myl7XG4gICAgICAgICAgICByZXR1cm4gXCIwXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcInlcIiwwKVxuICAgICAgICAuYXR0cihcImR5XCIsZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICBpZihpPT0zKXtcbiAgICAgICAgICAgIHJldHVybiBcIjEuNGVtXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfSlcbiAgICAgICAgO1xuXG4gICAgICAgdmFyIGNoYXJ0QW5ub3RhdGlvbkF2ZXJhZ2UgPSBjaGFydEF2ZXJhZ2VcbiAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJhcnJvdy1zY2F0dGVyLWFubm9hdGlvbi1hdmVyYWdlXCIpXG4gICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgIGlmKGN1dD09XCJyYWNlXCIpe1xuICAgICAgICAgICAgIGlmKHZpZXdwb3J0V2lkdGggPCA3MDApe1xuICAgICAgICAgICAgICAgaWYodmlld3BvcnRXaWR0aCA8IDYwMCl7XG4gICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIit4U2NhbGUoLTEpK1wiLFwiKyhoZWlnaHQvMisyMCkrXCIpXCJcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIit4U2NhbGUoMCkrXCIsXCIrKGhlaWdodC8yKzIwKStcIilcIlxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIreFNjYWxlKC4zKStcIixcIisoaGVpZ2h0LzIrMjApK1wiKVwiXG4gICAgICAgICAgIH1cbiAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiK3hTY2FsZSguNTEpK1wiLFwiKyhoZWlnaHQvMisyMCkrXCIpXCJcbiAgICAgICAgIH0pXG4gICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwiYXJyb3ctc2NhdHRlci1hbm5vYXRpb24tYXZlcmFnZS10ZXh0XCIpXG4gICAgICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgICAgaWYoY3V0ID09IFwicmFjZVwiKXtcbiAgICAgICAgICAgICByZXR1cm4gXCJBdmVyYWdlOiBcIisoTWF0aC5yb3VuZCgobmV3c05lc3RBdmVyYWdlVDEtbmV3c05lc3RBdmVyYWdlVDApKjEwMDApLzEwKStcInB0LiBnYWluIHZzLiBjZW5zdXNcIjtcbiAgICAgICAgICAgfVxuICAgICAgICAgICBpZihuZXdzTmVzdEF2ZXJhZ2VUMS1uZXdzTmVzdEF2ZXJhZ2VUMCA+IDApe1xuICAgICAgICAgICAgIHJldHVybiBcIkF2ZXJhZ2U6IFwiKyhNYXRoLnJvdW5kKChuZXdzTmVzdEF2ZXJhZ2VUMS1uZXdzTmVzdEF2ZXJhZ2VUMCkqMTAwMCkvMTApK1wiJSBpbmNyZWFzZSBpbiB3b21lblwiO1xuICAgICAgICAgICB9XG4gICAgICAgICAgIHJldHVybiBcIkF2ZXJhZ2U6IFwiKyhNYXRoLnJvdW5kKChuZXdzTmVzdEF2ZXJhZ2VUMS1uZXdzTmVzdEF2ZXJhZ2VUMCkqMTAwMCkvMTApK1wiJSBpbmNyZWFzZSBpbiBtZW5cIjtcbiAgICAgICAgIH0pXG4gICAgICAgICA7XG4gICAgICAvL1xuICAgICAgfVxuXG4gICAgICAvLyBpZihyZWJ1aWxkQXhpcyl7XG4gICAgICBidWlsZEF2ZXJhZ2UoKTtcbiAgICAgIC8vIH1cbiAgICB9XG4gICAgZWxzZSBpZihjaGFydFR5cGUgPT0gXCJ0YWJsZVwiKXtcblxuICAgICAgY2hhcnREaXZDb250YWluZXJUYWJsZS5zZWxlY3RBbGwoXCIuc3dhcm0tY2hhcnQtdGFibGUtY29tcGFueS1jb250YWluZXJcIikucmVtb3ZlKCk7XG5cbiAgICAgIGNlbGxDaXJjbGVcbiAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oZCl7XG5cbiAgICAgICAgfSlcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuZHVyYXRpb24oNTAwKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsMClcbiAgICAgICAgO1xuXG4gICAgICBjZWxsSW1hZ2VzXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLDApO1xuXG4gICAgICBpZihyZWJ1aWxkQXhpcyl7XG4gICAgICAgIGNoYXJ0QXhpc1xuICAgICAgICAgIC5zZWxlY3QoXCJnXCIpXG4gICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgIC5kdXJhdGlvbig1MDApXG4gICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLDApXG4gICAgICAgICAgLm9uKFwiZW5kXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcykucmVtb3ZlKCk7XG4gICAgICAgICAgICB2YXIgY2hhcnRBeGlzQ29udGFpbmVyID0gY2hhcnRBeGlzLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgIGJ1aWxkVGFibGUoKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYnVpbGRUYWJsZSgpe1xuXG4gICAgICAgIGNoYXJ0VGFibGVJdGVtID0gY2hhcnREaXZDb250YWluZXJUYWJsZS5zZWxlY3RBbGwoXCJkaXZcIilcbiAgICAgICAgICAuZGF0YSh0YWJsZURhdGEpXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtdGFibGUtY29tcGFueS1jb250YWluZXJcIilcbiAgICAgICAgICA7XG5cbiAgICAgICAgY2hhcnRUYWJsZUl0ZW1cbiAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgICAgICAuZGVsYXkoZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgIHJldHVybiBpKjEwMDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwxKVxuICAgICAgICAgIC5zdHlsZShcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKDBweCwwcHgpXCIpXG5cbiAgICAgICAgY2hhcnRUYWJsZUl0ZW0uYXBwZW5kKFwicFwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXRhYmxlLWNvbXBhbnktbmFtZVwiKVxuICAgICAgICAgIC5odG1sKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgdmFyIG9sZERhdGEgPSBuZXdEYXRhSURzLmluZGV4T2YoK2Qua2V5KTtcbiAgICAgICAgICAgIHZhciB0ZXh0VmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgaWYoZC52YWx1ZS5jb21wYW55TmFtZSA9PSBcInVzYSB0b2RheVwiKXtcbiAgICAgICAgICAgICAgdGV4dFZhbHVlID0gXCJVU0EgVG9kYXlcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYoZC52YWx1ZS5jb21wYW55TmFtZS5sZW5ndGggPiAzMCl7XG4gICAgICAgICAgICAgIHRleHRWYWx1ZSA9IGQudmFsdWUuY29tcGFueU5hbWUucmVwbGFjZSgvXFxiXFx3L2csIGwgPT4gbC50b1VwcGVyQ2FzZSgpKS5zbGljZSgwLDI3KStcIi4uLlwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgdGV4dFZhbHVlID0gZC52YWx1ZS5jb21wYW55TmFtZS5yZXBsYWNlKC9cXGJcXHcvZywgbCA9PiBsLnRvVXBwZXJDYXNlKCkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihvbGREYXRhID09IC0xKXtcbiAgICAgICAgICAgICAgdGV4dFZhbHVlID0gdGV4dFZhbHVlICsgXCI8c3BhbiBjbGFzcz0ncmVkJz4qPC9zcGFuPlwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGV4dFZhbHVlO1xuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gdmFyIGNvbXBhbnlOYW1lID0gZC52YWx1ZS5jb21wYW55TmFtZVxuICAgICAgICAgICAgLy8gaWYoY29tcGFueU5hbWUubGVuZ3RoID4gMzApe1xuICAgICAgICAgICAgLy8gICByZXR1cm4gY29tcGFueU5hbWUucmVwbGFjZSgvXFxiXFx3L2csIGwgPT4gbC50b1VwcGVyQ2FzZSgpKS5zbGljZSgwLDI3KStcIi4uLlwiXG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAvLyByZXR1cm4gY29tcGFueU5hbWUucmVwbGFjZSgvXFxiXFx3L2csIGwgPT4gbC50b1VwcGVyQ2FzZSgpKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuXG4gICAgICAgIHZhciBjaGFydFRhYmxlU2VjdGlvbiA9IGNoYXJ0VGFibGVJdGVtLnNlbGVjdEFsbChcImRpdlwiKVxuICAgICAgICAgIC5kYXRhKGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICB2YXIgaXRlbUNvdW50ID0gaVxuICAgICAgICAgICAgdmFyIHZhbHVlID0gZDtcbiAgICAgICAgICAgIHJldHVybiBbXCJzdGFmZlwiLFwibGVhZGVyc1wiLFwiY2Vuc3VzXCJdLm1hcChmdW5jdGlvbihkKXtcbiAgICAgICAgICAgICAgcmV0dXJuIHtrZXk6ZCx2YWx1ZTp2YWx1ZSxjb21wYW55Q291bnQ6aXRlbUNvdW50fVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXRhYmxlLWNvbXBhbnktc2VjdGlvblwiKVxuICAgICAgICAgIDtcblxuICAgICAgICB2YXIgY2hhcnRUYWJsZVJvdyA9IGNoYXJ0VGFibGVTZWN0aW9uXG4gICAgICAgICAgLnNlbGVjdEFsbChcImRpdlwiKVxuICAgICAgICAgIC5kYXRhKGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICB2YXIgY2F0ID0gZDtcbiAgICAgICAgICAgIHZhciB5ZWFycyA9IFt5ZWFyU2VsZWN0ZWQsK3llYXJPbGRdO1xuICAgICAgICAgICAgaWYoY2F0LmtleSA9PSBcImNlbnN1c1wiKXtcbiAgICAgICAgICAgICAgeWVhcnMgPSBbeWVhclNlbGVjdGVkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB5ZWFycy5tYXAoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgIHJldHVybiB7eWVhcjpkLGtleTpjYXQua2V5LHZhbHVlOmNhdC52YWx1ZSxjb21wYW55Q291bnQ6Y2F0LmNvbXBhbnlDb3VudH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC10YWJsZS1jb21wYW55LXJvd1wiKVxuICAgICAgICAgIDtcblxuICAgICAgICB2YXIgY2hhcnRUYWJsZVBlcmNlbnQgPSBjaGFydFRhYmxlUm93LnNlbGVjdEFsbChcIi5zd2FybS1jaGFydC10YWJsZS1jb21wYW55LXBlcmNlbnRcIilcbiAgICAgICAgICAuZGF0YShmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBkO1xuICAgICAgICAgICAgdmFyIG5ld1RoaW5nID0gW1wid2hpdGVcIixcImJsYWNrXCIsXCJoaXNwLlwiLFwiYXNpYW5cIixcImZlbWFsZVwiXS5tYXAoZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICAgIHJldHVybiB7eWVhcjppdGVtLnllYXIsa2V5Oml0ZW0ua2V5LHZhbHVlOml0ZW0udmFsdWUsY2F0OmQsY29tcGFueUNvdW50Oml0ZW0uY29tcGFueUNvdW50fVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHJldHVybiBuZXdUaGluZ1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAuYXBwZW5kKFwicFwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXRhYmxlLWNvbXBhbnktcGVyY2VudFwiKVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgaWYoZC5rZXkgPT0gXCJjZW5zdXNcIil7XG4gICAgICAgICAgICAgIGlmKGQuY2F0PT1cImZlbWFsZVwiKXtcbiAgICAgICAgICAgICAgICB2YXIgZmVtYWxlRGF0YSA9IGQudmFsdWUudmFsdWUuZmVtYWxlQ2Vuc3VzO1xuICAgICAgICAgICAgICAgIGlmKGZlbWFsZURhdGEgPT0gXCJuL2FcIil7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmVtYWxlRGF0YTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZC52YWx1ZS52YWx1ZS5mZW1hbGVDZW5zdXMqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZihkLmNhdD09XCJ3aGl0ZVwiKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChkLnZhbHVlLnZhbHVlLndoaXRlQ2Vuc3VzKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYoZC5jYXQgPT0gXCJoaXNwLlwiKXtcbiAgICAgICAgICAgICAgICBpZihkLnllYXIgPT0geWVhclNlbGVjdGVkKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGQudmFsdWUudmFsdWUuaGlzcGFuaWNDZW5zdXMqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYoZC5jYXQgPT0gXCJibGFja1wiKXtcbiAgICAgICAgICAgICAgICBpZihkLnllYXIgPT0geWVhclNlbGVjdGVkKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGQudmFsdWUudmFsdWUuYmxhY2tDZW5zdXMqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYoZC5jYXQgPT0gXCJhc2lhblwiKXtcbiAgICAgICAgICAgICAgICBpZihkLnllYXIgPT0geWVhclNlbGVjdGVkKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGQudmFsdWUudmFsdWUuYXNpYW5DZW5zdXMqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQua2V5ID09IFwic3RhZmZcIil7XG5cbiAgICAgICAgICAgICAgaWYoZC5jYXQ9PVwid2hpdGVcIil7XG4gICAgICAgICAgICAgICAgaWYoZC55ZWFyID09IHllYXJTZWxlY3RlZCl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoZ2V0UGVyY2VudFR5cGUoXCJ3aGl0ZVwiLChkLnZhbHVlLnZhbHVlKSkpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZ2V0UGVyY2VudFR5cGUoXCJ3aGl0ZS1vbGRcIiwoZC52YWx1ZS52YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgaWYocmVzdWx0ID09IFwibi9hXCIpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKHJlc3VsdCkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYoZC5jYXQ9PVwiYmxhY2tcIil7XG4gICAgICAgICAgICAgICAgaWYoZC55ZWFyID09IHllYXJTZWxlY3RlZCl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoZ2V0UGVyY2VudFR5cGUoXCJibGFja1wiLChkLnZhbHVlLnZhbHVlKSkpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZ2V0UGVyY2VudFR5cGUoXCJibGFjay1vbGRcIiwoZC52YWx1ZS52YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgaWYocmVzdWx0ID09IFwibi9hXCIpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKHJlc3VsdCkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYoZC5jYXQ9PVwiaGlzcC5cIil7XG4gICAgICAgICAgICAgICAgaWYoZC55ZWFyID09IHllYXJTZWxlY3RlZCl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoZ2V0UGVyY2VudFR5cGUoXCJoaXNwXCIsKGQudmFsdWUudmFsdWUpKSkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBnZXRQZXJjZW50VHlwZShcImhpc3Atb2xkXCIsKGQudmFsdWUudmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdCA9PSBcIm4vYVwiKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChyZXN1bHQpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGQuY2F0PT1cImFzaWFuXCIpe1xuICAgICAgICAgICAgICAgIGlmKGQueWVhciA9PSB5ZWFyU2VsZWN0ZWQpe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKGdldFBlcmNlbnRUeXBlKFwiYXNpYW5cIiwoZC52YWx1ZS52YWx1ZSkpKSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGdldFBlcmNlbnRUeXBlKFwiYXNpYW4tb2xkXCIsKGQudmFsdWUudmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdCA9PSBcIm4vYVwiKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChyZXN1bHQpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmKGQuY2F0PT1cImZlbWFsZVwiKXtcbiAgICAgICAgICAgICAgICBpZihkLnllYXIgPT0geWVhclNlbGVjdGVkKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLChkLnZhbHVlLnZhbHVlKSkpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZ2V0UGVyY2VudFR5cGUoXCJnZW5kZXItb2xkXCIsKGQudmFsdWUudmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdCA9PSBcIm4vYVwiKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChyZXN1bHQpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQua2V5ID0gXCJsZWFkZXJzXCIpe1xuXG4gICAgICAgICAgICAgIGlmKGQuY2F0PT1cIndoaXRlXCIpe1xuICAgICAgICAgICAgICAgIGlmKGQueWVhciA9PSB5ZWFyU2VsZWN0ZWQpe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKGdldFBlcmNlbnRUeXBlKFwic3VwV2hpdGVSYXdcIiwoZC52YWx1ZS52YWx1ZSkpKSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGdldFBlcmNlbnRUeXBlKFwic3VwLXdoaXRlLW9sZFwiLChkLnZhbHVlLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICBpZihyZXN1bHQgPT0gXCJuL2FcIil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgocmVzdWx0KSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZihkLmNhdD09XCJibGFja1wiKXtcbiAgICAgICAgICAgICAgICBpZihkLnllYXIgPT0geWVhclNlbGVjdGVkKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChnZXRQZXJjZW50VHlwZShcInN1cEJsYWNrXCIsKGQudmFsdWUudmFsdWUpKSkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBnZXRQZXJjZW50VHlwZShcInN1cC1ibGFjay1vbGRcIiwoZC52YWx1ZS52YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgaWYocmVzdWx0ID09IFwibi9hXCIpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKHJlc3VsdCkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYoZC5jYXQ9PVwiaGlzcC5cIil7XG4gICAgICAgICAgICAgICAgaWYoZC55ZWFyID09IHllYXJTZWxlY3RlZCl7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoZ2V0UGVyY2VudFR5cGUoXCJzdXBIaXNwXCIsKGQudmFsdWUudmFsdWUpKSkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBnZXRQZXJjZW50VHlwZShcInN1cC1oaXNwLW9sZFwiLChkLnZhbHVlLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICBpZihyZXN1bHQgPT0gXCJuL2FcIil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgocmVzdWx0KSoxMDApK1wiJVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZihkLmNhdD09XCJhc2lhblwiKXtcbiAgICAgICAgICAgICAgICBpZihkLnllYXIgPT0geWVhclNlbGVjdGVkKXtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChnZXRQZXJjZW50VHlwZShcInN1cEFzaWFuXCIsKGQudmFsdWUudmFsdWUpKSkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBnZXRQZXJjZW50VHlwZShcInN1cC1hc2lhbi1vbGRcIiwoZC52YWx1ZS52YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgaWYocmVzdWx0ID09IFwibi9hXCIpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKHJlc3VsdCkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYoZC5jYXQ9PVwiZmVtYWxlXCIpe1xuICAgICAgICAgICAgICAgIGlmKGQueWVhciA9PSB5ZWFyU2VsZWN0ZWQpe1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKGdldFBlcmNlbnRUeXBlKFwic3VwR2VuZGVyXCIsKGQudmFsdWUudmFsdWUpKSkqMTAwKStcIiVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBnZXRQZXJjZW50VHlwZShcInN1cC1nZW5kZXItb2xkXCIsKGQudmFsdWUudmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdCA9PSBcIm4vYVwiKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChyZXN1bHQpKjEwMCkrXCIlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcInRiZFwiO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuXG4gICAgICAgIGNoYXJ0VGFibGVQZXJjZW50XG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgcmV0dXJuIGQua2V5PT1cImNlbnN1c1wiICYmIGQueWVhciA9PSB5ZWFyU2VsZWN0ZWQgJiYgaT09MDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtdGFibGUtY29tcGFueS1yb3ctdG9wLWxhYmVsLWNlbnN1c1wiKVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgaWYoZC52YWx1ZS52YWx1ZS5jb21wYW55RGF0YS5oYXNPdmVycmlkZSl7XG4gICAgICAgICAgICAgIGlmKGQudmFsdWUudmFsdWUuY29tcGFueURhdGEub3ZlcnJpZGUuY292ZXJhZ2VfYXJlYS5sZW5ndGggPiAyMCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQudmFsdWUudmFsdWUuY29tcGFueURhdGEub3ZlcnJpZGUuY292ZXJhZ2VfYXJlYS5zbGljZSgwLDE3KStcIi4uLlwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGQudmFsdWUudmFsdWUuY29tcGFueURhdGEub3ZlcnJpZGUuY292ZXJhZ2VfYXJlYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkLnZhbHVlLnZhbHVlLmNvbXBhbnlEYXRhLkNpdHkgKyBcIiwgXCIrZC52YWx1ZS52YWx1ZS5jb21wYW55RGF0YS5TdGF0ZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuXG4gICAgICAgIGNoYXJ0VGFibGVSb3dcbiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICByZXR1cm4gZC5rZXk9PVwic3RhZmZcIiAmJiBkLnllYXIgPT0geWVhclNlbGVjdGVkO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnNlbGVjdEFsbChcInBcIilcbiAgICAgICAgICAuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXRhYmxlLWNvbXBhbnktcm93LXRvcC1sYWJlbFwiKVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgcmV0dXJuIGQuY2F0O1xuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuXG4gICAgICAgIGNoYXJ0VGFibGVQZXJjZW50XG4gICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihkLGkpe1xuICAgICAgICAgICAgcmV0dXJuIGk9PTAgJiYgZC5jb21wYW55Q291bnQgPT0gMDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtdGFibGUtY29tcGFueS1yb3cteWVhclwiKVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgaWYoZC5rZXkgPT0gXCJjZW5zdXNcIil7XG4gICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQueWVhcjtcbiAgICAgICAgICB9KVxuICAgICAgICAgIDtcblxuICAgICAgICBjaGFydFRhYmxlUGVyY2VudFxuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oZCxpKXtcbiAgICAgICAgICAgIHJldHVybiBpPT0wICYmIGQuY29tcGFueUNvdW50ID09IDAgJiYgZC55ZWFyID09IHllYXJTZWxlY3RlZDtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgICBpZihkLmtleSA9PSBcImNlbnN1c1wiKXtcbiAgICAgICAgICAgICAgcmV0dXJuIFwic3dhcm0tY2hhcnQtdGFibGUtY29tcGFueS1yb3cta2V5IHN3YXJtLWNoYXJ0LXRhYmxlLWNvbXBhbnktcm93LWNlbnN1c1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwic3dhcm0tY2hhcnQtdGFibGUtY29tcGFueS1yb3cta2V5XCJcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgaWYoZC5rZXkgPT0gXCJjZW5zdXNcIil7XG4gICAgICAgICAgICAgIHJldHVybiBcImF1ZGllbmNlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGQua2V5ID09IFwic3RhZmZcIil7XG4gICAgICAgICAgICAgIHJldHVybiBcImFsbFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZC5rZXk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgcmV0dXJuIGQua2V5ID09IFwiY2Vuc3VzXCJcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtdGFibGUtY29tcGFueS1yb3cteWVhci1jZW5zdXMtc3BhblwiKVxuICAgICAgICAgIC50ZXh0KFwiTGF0ZXN0IENlbnN1cyBFc3QuXCIpXG4gICAgICAgICAgO1xuXG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGJ1aWxkQXZlcmFnZSgpe1xuXG4gICAgICAgICBjaGFydERpdi5zZWxlY3QoXCIuc3dhcm0tYXZlcmFnZVwiKS5yZW1vdmUoKTtcbiAgICAgICAgIGNoYXJ0RGl2LnNlbGVjdChcIi5zd2FybS1hbm5ub3RhdGlvblwiKS5yZW1vdmUoKTtcblxuICAgICAgICAgdmFyIGNoYXJ0QXZlcmFnZSA9IGNoYXJ0RGl2LmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpXG4gICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYXZlcmFnZVwiKVxuICAgICAgICAgICAgIDtcblxuICAgICAgICAgdmFyIGNoYXJ0QW5ub3RhdGlvbiA9IGNoYXJ0QXZlcmFnZS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tYW5ubm90YXRpb25cIilcbiAgICAgICAgICA7XG5cbiAgICAgIH1cbiAgICAgIGlmKHJlYnVpbGRBeGlzKXtcbiAgICAgICAgYnVpbGRBdmVyYWdlKCk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAvL2NsZWFyIG5ld3NJRFNlYXJjaFxuXG4gICAgdmFyIHByZXZpb3VzTmV3c0lEU2VhcmNoID0gbmV3c0lEU2VhcmNoO1xuICAgIG5ld3NJRFNlYXJjaCA9IFwiXCI7XG4gICAgbmV3c0lEU2VhcmNoTGlzdC5wdXNoKHByZXZpb3VzTmV3c0lEU2VhcmNoKTtcbiAgfVxuXG4gIC8vIHRhYmxlRGF0YSA9IG5ld3NOZXN0LnNsaWNlKDAsNCk7XG4gIC8vIHRhYmxlID1cbiAgYnVpbGRDaGFydChcIm5ld1wiKTtcblxuICBmdW5jdGlvbiBidWlsZFRvZ2dsZXMoKXtcblxuICAgIG5ld1RvZ2dsZUZvclJhY2VBbmRHZW5kZXIgPSBzdGVwcGVyQ29udGFpbmVyVG9nZ2xlLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwidG9wLXJvdy1jaGFydC10b2dnbGUtd3JhcHBlclwiKTtcblxuICAgIHZhciB0b2dnbGVzID0gZm9vdGVyQ29udGFpbmVyLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwiaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS13cmFwcGVyXCIpO1xuXG4gICAgdmFyIHNpemVDYXRzID0gWzAsMjAsNTAsMTAwLDUwMF07XG5cbiAgICB0b2dnbGVzXG4gICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLXNpemVcIilcbiAgICAgIC5zZWxlY3RBbGwoXCJwXCIpXG4gICAgICAuZGF0YShzaXplQ2F0cylcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKFwicFwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgIGlmKGk9PTApe1xuICAgICAgICAgIHJldHVybiBcInRvZ2dsZS1zZWxlY3RlZCBmcm9udC1jdXJ2ZSBoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgICAgfVxuICAgICAgICBpZihpPT1zaXplQ2F0cy5sZW5ndGgtMSl7XG4gICAgICAgICAgcmV0dXJuIFwiYmFjay1jdXJ2ZSBoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgIH0pXG4gICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgICB9KVxuICAgICAgLm9uKFwiY2xpY2tcIixmdW5jdGlvbihkKXtcblxuXG4gICAgICAgIHZhciBkYXRhU2VsZWN0ZWQgPSBkO1xuICAgICAgICBkMy5zZWxlY3QodGhpcy5wYXJlbnROb2RlKS5zZWxlY3RBbGwoXCJwXCIpLmNsYXNzZWQoXCJ0b2dnbGUtc2VsZWN0ZWRcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBpZihkPT1kYXRhU2VsZWN0ZWQpe1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSlcbiAgICAgICAgY291bnRNaW4gPSBkO1xuICAgICAgICBidWlsZENoYXJ0KGN1cnJlbnRDaGFydCk7XG4gICAgICB9KVxuICAgICAgO1xuXG4gICAgdmFyIHJhY2VHZW5kZXJUb2dnbGVEYXRhID0gW1wiZ2VuZGVyXCIsXCJyYWNlXCJdOy8vLFwic3VwV2hpdGVcIixcInN1cEdlbmRlclwiXVxuXG4gICAgdG9nZ2xlVHlwZSA9IG5ld1RvZ2dsZUZvclJhY2VBbmRHZW5kZXJcbiAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcImhpc3RvZ3JhbS1jaGFydC10b2dnbGUtdHlwZSBoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWZpcnN0XCIpXG5cbiAgICB0b2dnbGVUeXBlXG4gICAgICAuc2VsZWN0QWxsKFwicFwiKVxuICAgICAgLmRhdGEocmFjZUdlbmRlclRvZ2dsZURhdGEpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixmdW5jdGlvbihkLGkpe1xuXG4gICAgICAgIGlmKHVybFBhcmFtQ3V0ICE9IFwiXCIpe1xuICAgICAgICAgIGlmKGk9PTAgJiYgZD09dXJsUGFyYW1DdXQpe1xuICAgICAgICAgICAgcmV0dXJuIFwidG9nZ2xlLXNlbGVjdGVkIGZyb250LWN1cnZlIGhpc3RvZ3JhbS1jaGFydC10b2dnbGUtaXRlbVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmKGk9PTApe1xuICAgICAgICAgICAgcmV0dXJuIFwiZnJvbnQtY3VydmUgaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS1pdGVtXCI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoaT09MSAmJiBkPT11cmxQYXJhbUN1dCl7XG4gICAgICAgICAgICByZXR1cm4gXCJ0b2dnbGUtc2VsZWN0ZWQgYmFjay1jdXJ2ZSBoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZihpPT0xKXtcbiAgICAgICAgICAgIHJldHVybiBcImJhY2stY3VydmUgaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS1pdGVtXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgaWYoaT09MCl7XG4gICAgICAgICAgICByZXR1cm4gXCJ0b2dnbGUtc2VsZWN0ZWQgZnJvbnQtY3VydmUgaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS1pdGVtXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGk9PTEpe1xuICAgICAgICAgICAgcmV0dXJuIFwiYmFjay1jdXJ2ZSBoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLWl0ZW1cIjtcbiAgICAgIH0pXG4gICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgaWYoZD09XCJyYWNlXCIpe1xuICAgICAgICAgIHJldHVybiBcIlJhY2VcIlxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIkdlbmRlclwiO1xuICAgICAgfSlcbiAgICAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIGVtYmVkTGlua1RleHQudGV4dChcIkVtYmVkIHRoaXMgY2hhcnRcIik7XG4gICAgICAgIGVtYmVkTGlua0lucHV0LnN0eWxlKFwiZGlzcGxheVwiLG51bGwpO1xuXG4gICAgICAgIHZhciBkYXRhU2VsZWN0ZWQgPSBkO1xuICAgICAgICBkMy5zZWxlY3QodGhpcy5wYXJlbnROb2RlKS5zZWxlY3RBbGwoXCJwXCIpLmNsYXNzZWQoXCJ0b2dnbGUtc2VsZWN0ZWRcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICBpZihkPT1kYXRhU2VsZWN0ZWQpe1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSlcbiAgICAgICAgY3V0ID0gZDtcbiAgICAgICAgdXJsUGFyYW1ldGVyLnNldCgnZmlsdGVyJywgY3V0KTtcblxuICAgICAgICBidWlsZENoYXJ0KGN1cnJlbnRDaGFydCk7XG4gICAgICB9KVxuICAgICAgO1xuXG4gICAgdmFyIHByb2plY3Rpb24gPSBkMy5nZW9BbGJlcnNVc2EoKVxuICAgICAgICAvLyAuc2NhbGUoMTI4MClcbiAgICAgICAgLy8gLnRyYW5zbGF0ZShbd2lkdGggLyAyLCBoZWlnaHQgLyAyXSk7XG5cbiAgICB2YXIgcGF0aCA9IGQzLmdlb1BhdGgoKVxuICAgICAgICAucHJvamVjdGlvbihwcm9qZWN0aW9uKVxuICAgICAgICAvLyAucG9pbnRSYWRpdXMoMS41KVxuICAgICAgICA7XG5cbiAgICBmdW5jdGlvbiBtYXBNYWtlQmlnKCl7XG4gICAgICBtYXBCaWcgPSB0cnVlO1xuICAgICAgc2VhcmNoTWFwLmNsYXNzZWQoXCJzd2FybS1jaGFydC1taW5cIixmYWxzZSlcbiAgICAgIHNlYXJjaE1hcENsb3NlLnN0eWxlKFwiZGlzcGxheVwiLFwiYmxvY2tcIik7XG4gICAgICBzZWFyY2hNYXBMYWJlbC5zdHlsZShcImRpc3BsYXlcIixcIm5vbmVcIik7XG4gICAgICBzZWFyY2hNYXBTY3JlZW4uc3R5bGUoXCJkaXNwbGF5XCIsXCJub25lXCIpO1xuICAgICAgbWFwU3ZnLnN0eWxlKFwicG9pbnRlci1ldmVudHNcIixcImFsbFwiKTtcbiAgICAgIG1hcFNlbGVjdG9yLnN0eWxlKFwiZGlzcGxheVwiLFwiYmxvY2tcIilcblxuXG4gICAgfVxuICAgIGZ1bmN0aW9uIG1hcE1ha2VTbWFsbCgpe1xuICAgICAgbWFwQmlnID0gZmFsc2U7XG4gICAgICBzZWFyY2hNYXAuY2xhc3NlZChcInN3YXJtLWNoYXJ0LW1pblwiLHRydWUpXG4gICAgICBzZWFyY2hNYXBDbG9zZS5zdHlsZShcImRpc3BsYXlcIixudWxsKTtcbiAgICAgIHNlYXJjaE1hcExhYmVsLnN0eWxlKFwiZGlzcGxheVwiLG51bGwpO1xuICAgICAgbWFwU3ZnLnN0eWxlKFwicG9pbnRlci1ldmVudHNcIixudWxsKTtcbiAgICAgIG1hcFNlbGVjdG9yLnN0eWxlKFwiZGlzcGxheVwiLG51bGwpXG4gICAgICBzZWFyY2hNYXBTY3JlZW4uc3R5bGUoXCJkaXNwbGF5XCIsbnVsbCk7XG5cbiAgICB9XG5cbiAgICBzZWFyY2hNYXAgPSBuZXdUb2dnbGVGb3JSYWNlQW5kR2VuZGVyLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtbWFwIHN3YXJtLWNoYXJ0LW1pblwiKVxuICAgICAgO1xuXG4gICAgdmFyIHNlYXJjaE1hcFNjcmVlbiA9IHNlYXJjaE1hcC5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcIm1hcC1zY3JlZW5cIilcbiAgICAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIGlmKCFtYXBCaWcpe1xuICAgICAgICAgIG1hcE1ha2VCaWcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgIG1hcE1ha2VTbWFsbCgpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgO1xuXG4gICAgdmFyIHNlYXJjaE1hcENsb3NlID0gc2VhcmNoTWFwLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwibWFwLWNsb3NlXCIpXG4gICAgICAub24oXCJjbGlja1wiLGZ1bmN0aW9uKGQpe1xuICAgICAgICBtYXBNYWtlU21hbGwoKTtcbiAgICAgIH0pXG5cbiAgICBzZWFyY2hNYXBDbG9zZVxuICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwibWFwLWNsb3NlLWljb25cIilcbiAgICAgIDtcblxuICAgIHZhciBzZWFyY2hNYXBMYWJlbCA9IHNlYXJjaE1hcC5hcHBlbmQoXCJwXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJtYXAtbGFiZWxcIilcbiAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICByZXR1cm4gXCJTZWxlY3QgUmVnaW9uXCJcbiAgICAgIH0pXG4gICAgICA7XG5cbiAgICB2YXIgbWFwU3ZnID0gc2VhcmNoTWFwLmFwcGVuZChcInN2Z1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwibWFwcy1jaGFydC1zdmdcIilcbiAgICAgIC5hdHRyKFwidmlld0JveFwiLFwiMCAwIDk2MCA2MDBcIilcbiAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiKzArXCIsXCIrNTArXCIpXCIpXG4gICAgICA7XG5cbiAgICBtYXBTdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInN0YXRlc1wiKVxuICAgICAgLnNlbGVjdEFsbChcInBhdGhcIilcbiAgICAgIC5kYXRhKHRvcG9qc29uLmZlYXR1cmUoc3RhdGVUb3BvLCBzdGF0ZVRvcG8ub2JqZWN0cy5zdGF0ZXMpLmZlYXR1cmVzKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgLmF0dHIoXCJkXCIsIHBhdGgpXG4gICAgICA7XG5cbiAgICBtYXBTdmdcbiAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInN0YXRlLWJvcmRlcnNcIilcbiAgICAgIC5hdHRyKFwiZFwiLCBwYXRoKHRvcG9qc29uLm1lc2goc3RhdGVUb3BvLCBzdGF0ZVRvcG8ub2JqZWN0cy5zdGF0ZXMsIGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEgIT09IGI7IH0pKSlcbiAgICAgIDtcblxuICAgIGZ1bmN0aW9uIGdldExvY2F0aW9ucyhkKXtcblxuICAgICAgY29uc29sZS5sb2coZCk7XG5cbiAgICAgIHZhciBpdGVtU2VsZWN0ZWQgPSBkO1xuXG4gICAgICB2YXIgbG9jYXRpb24gPSBkLnZhbHVlLmxvY2F0aW9uO1xuICAgICAgdmFyIHByb2plY3QgPSBwcm9qZWN0aW9uKFsrbG9jYXRpb24ubG9uZ2l0dWRlLGxvY2F0aW9uLmxhdGl0dWRlXSk7XG5cbiAgICAgIG1hcFNlbGVjdG9yXG4gICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgLmR1cmF0aW9uKDc1MClcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixcInRyYW5zbGF0ZShcIitwcm9qZWN0K1wiKVwiKVxuICAgICAgICA7XG5cbiAgICAgIHZhciBkaXN0YW5jZUFycmF5ID0gW107XG5cbiAgICAgIG1hcE1hcmtlcnMuZWFjaChmdW5jdGlvbihkKXtcbiAgICAgICAgaWYoZC52YWx1ZS5oYXNMb2NhdGlvbil7XG4gICAgICAgICAgdmFyIGl0ZW1CID0gZC52YWx1ZS5sb2NhdGlvbjtcbiAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBnZW9saWIuZ2V0RGlzdGFuY2VTaW1wbGUobG9jYXRpb24sIGl0ZW1CKVxuICAgICAgICAgIGlmKGRpc3RhbmNlIDwgMjAwMDAwKXtcbiAgICAgICAgICAgIGRpc3RhbmNlQXJyYXkucHVzaChkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGRpc3RhbmNlQXJyYXkgPSBkaXN0YW5jZUFycmF5LmZpbHRlcihmdW5jdGlvbihkKXtcbiAgICAgICAgcmV0dXJuICtkLmtleSAhPSAraXRlbVNlbGVjdGVkLmtleTtcbiAgICAgIH0pO1xuXG4gICAgICBpZihkaXN0YW5jZUFycmF5Lmxlbmd0aCA+IDMpe1xuICAgICAgICBkaXN0YW5jZUFycmF5ID0gZGlzdGFuY2VBcnJheS5zb3J0KGZ1bmN0aW9uKGEsYil7XG4gICAgICAgICAgcmV0dXJuICtiLnZhbHVlLm1heFRvdGFsIC0gK2EudmFsdWUubWF4VG90YWw7XG4gICAgICAgIH0pLnNsaWNlKDAsMylcbiAgICAgIH1cblxuICAgICAgdGFibGVEYXRhID0gZGlzdGFuY2VBcnJheTtcbiAgICAgIHRhYmxlRGF0YS51bnNoaWZ0KGQpXG4gICAgICBpZihtb2JpbGUgfHwgdmlld3BvcnRXaWR0aCA8IDQ1MCl7XG4gICAgICAgIHRhYmxlRGF0YSA9IFtkXTtcbiAgICAgIH1cbiAgICAgIGJ1aWxkQ2hhcnQoXCJ0YWJsZVwiKTtcbiAgICB9XG5cbiAgICB2YXIgbWFwTWFya2VycyA9IG1hcFN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJtYXAtbWFya2Vyc1wiKVxuICAgICAgLnNlbGVjdEFsbChcImNpcmNsZVwiKVxuICAgICAgLmRhdGEoc2VhcmNoRGF0YVNldC5zb3J0KGZ1bmN0aW9uKGEsYil7XG4gICAgICAgIHJldHVybiByYWRpdXNTY2FsZSgrYi52YWx1ZS5tYXhUb3RhbCkgLSByYWRpdXNTY2FsZSgrYS52YWx1ZS5tYXhUb3RhbCk7XG4gICAgICB9KSlcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJtYXAtbWFya2VyXCIpXG4gICAgICAuYXR0cihcInJcIixmdW5jdGlvbihkKXtcbiAgICAgICAgcmV0dXJuIHJhZGl1c1NjYWxlKCtkLnZhbHVlLm1heFRvdGFsKTtcbiAgICAgIH0pXG4gICAgICAuc3R5bGUoXCJmaWxsXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIGlmKGQudmFsdWUuaGFzTG9jYXRpb24pe1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwicmdiYSgwLDAsMCwwKVwiXG4gICAgICB9KVxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIixmdW5jdGlvbihkKXtcbiAgICAgICAgaWYoZC52YWx1ZS5oYXNMb2NhdGlvbil7XG4gICAgICAgICAgdmFyIGxvY2F0aW9uID0gZC52YWx1ZS5sb2NhdGlvbjtcbiAgICAgICAgICBjb25zb2xlLmxvZygpO1xuICAgICAgICAgIHZhciBwcm9qZWN0ID0gcHJvamVjdGlvbihbK2xvY2F0aW9uLmxvbmdpdHVkZSxsb2NhdGlvbi5sYXRpdHVkZV0pO1xuICAgICAgICAgIGlmKHByb2plY3Qpe1xuICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiK3Byb2plY3QrXCIpXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSlcbiAgICAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIGdldExvY2F0aW9ucyhkKTtcbiAgICAgIH0pXG4gICAgICA7XG5cbiAgICB2YXIgbWFwU2VsZWN0b3IgPSBtYXBTdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwibWFwLXNlbGVjdG9yXCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiK3dpZHRoLzIrXCIsXCIraGVpZ2h0Ki44K1wiKVwiKVxuICAgICAgO1xuXG4gICAgdmFyIHNlbGVjdG9yUmFkaXVzID0gMjA7XG5jb25zb2xlLmxvZyhcIjU0MzJcIik7XG4gICAgbWFwU2VsZWN0b3JcbiAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcIm1hcC1zZWxlY3Rvci1jaXJjbGVcIilcbiAgICAgIC5hdHRyKFwiclwiLHNlbGVjdG9yUmFkaXVzKVxuICAgICAgO1xuXG4gICAgbWFwU2VsZWN0b3JcbiAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJtYXAtc2VsZWN0b3ItdGFyZ2V0XCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiKzArXCIsXCIrKC0xKStcIilcIilcbiAgICAgIC50ZXh0KFwiK1wiKVxuICAgICAgO1xuXG4gICAgbWFwU2VsZWN0b3JcbiAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJtYXAtc2VsZWN0b3ItdGV4dFwiKVxuICAgICAgLnRleHQoXCJTaG93IE5ld3Nyb29tcyBIZXJlXCIpXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLFwidHJhbnNsYXRlKFwiKygwKStcIixcIisoLXNlbGVjdG9yUmFkaXVzLTE1KStcIilcIilcbiAgICAgIDtcblxuXG4gICAgdmFyIHNlYXJjaERpdiA9IHRvZ2dsZXMuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC1zZWFyY2gtZGl2XCIpXG4gICAgICAuYXR0cihcImlkXCIsXCJzZWFyY2gtcmVzdWx0cy1ib3hcIilcblxuICAgIHNlYXJjaElucHV0ID0gc2VhcmNoRGl2XG4gICAgICAuYXBwZW5kKFwiaW5wdXRcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXNlYXJjaFwiKVxuICAgICAgLmF0dHIoXCJwbGFjZWhvbGRlclwiLFwiRmluZCBhIE5ld3Nyb29tXCIpXG4gICAgICAub24oXCJmb2N1c1wiLGZ1bmN0aW9uKGQpe1xuICAgICAgICBzZWFyY2hSZXN1bHRzQ29udGFpbmVyLnN0eWxlKFwiZGlzcGxheVwiLFwiYmxvY2tcIilcbiAgICAgIH0pXG4gICAgICA7XG5cbiAgICBzZWFyY2hEaXZcbiAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcIm1hZy1nbGFzc1wiKVxuICAgICAgLmFwcGVuZChcInN2Z1wiKVxuICAgICAgLmF0dHIoXCJ4bWxuc1wiLFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIilcbiAgICAgIC5hdHRyKFwieG1sbnM6eGxpbmtcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIilcbiAgICAgIC5hdHRyKFwieFwiLFwiMHB4XCIpXG4gICAgICAuYXR0cihcInlcIixcIjBweFwiKVxuICAgICAgLmF0dHIoXCJ2aWV3Qm94XCIsXCIwIDAgMTAwIDEyNVwiKVxuICAgICAgLmF0dHIoXCJ4bWw6c3BhY2VcIixcInByZXNlcnZlXCIpXG4gICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgLmF0dHIoXCJkXCIsXCJNNzkuMiw3Mi4zTDYyLjksNTYuN2M2LjMtOS4xLDUuMy0yMS43LTIuOC0yOS45Yy05LjItOS4yLTI0LTkuMi0zMy4yLDBjLTkuMiw5LjItOS4yLDI0LDAsMzMuMmM4LjEsOC4xLDIwLjcsOS4xLDI5LjksMi44ICBsMTUuNiwxNi40YzEsMSwyLjYsMSwzLjYsMGwzLjQtMy40QzgwLjMsNzQuOSw4MC4yLDczLjMsNzkuMiw3Mi4zeiBNNTYsNTZjLTYuOSw2LjktMTguMSw2LjktMjUsMFMyNCwzNy45LDMxLDMxczE4LjEtNi45LDI1LDAgIFM2Mi45LDQ5LjEsNTYsNTZ6XCIpXG4gICAgICA7XG5cbiAgICBzZWFyY2hSZXN1bHRzQ29udGFpbmVyID0gc2VhcmNoRGl2XG4gICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC1zZWFyY2gtcmVzdWx0c1wiKVxuICAgICAgO1xuXG4gICAgdmFyIHNlYXJjaEFscGhhU29ydCA9IHNlYXJjaFJlc3VsdHNDb250YWluZXJcbiAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXNlYXJjaC1yZXN1bHRzLWFscGhhLWNvbnRhaW5lclwiKTtcblxuICAgIHNlYXJjaEFscGhhU29ydC5hcHBlbmQoXCJwXCIpXG4gICAgICAudGV4dChcImZpbHRlclwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtc2VhcmNoLXJlc3VsdHMtYWxwaGEtbGFiZWxcIik7XG5cbiAgICBzZWFyY2hBbHBoYVNvcnRMZXR0ZXJzID0gc2VhcmNoQWxwaGFTb3J0XG4gICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1jaGFydC1zZWFyY2gtcmVzdWx0cy1hbHBoYS1pdGVtLWNvbnRhaW5lclwiKVxuICAgICAgLnNlbGVjdEFsbChcInBcIilcbiAgICAgIC5kYXRhKFtcImFcIixcImJcIixcImNcIixcImRcIixcImVcIixcImZcIixcImdcIixcImhcIixcImlcIixcImpcIixcImtcIixcImxcIixcIm1cIixcIm5cIixcIm9cIixcInBcIixcInFcIixcInJcIixcInNcIixcInRcIixcInVcIixcInZcIixcIndcIixcInhcIixcInlcIixcInpcIl0pXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXNlYXJjaC1yZXN1bHRzLWFscGhhLWl0ZW1cIilcbiAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICByZXR1cm4gZDtcbiAgICAgIH0pXG4gICAgICAub24oXCJjbGlja1wiLGZ1bmN0aW9uKGQpe1xuICAgICAgICBhbHBoYVNvcnQgPSBkO1xuICAgICAgICBzZWFyY2hBbHBoYVNvcnRMZXR0ZXJzLnN0eWxlKFwiY29sb3JcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIGlmKGQ9PWFscGhhU29ydCl7XG4gICAgICAgICAgICAgIHJldHVybiBcImJsYWNrXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWRlY29yYXRpb25cIixmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIGlmKGQ9PWFscGhhU29ydCl7XG4gICAgICAgICAgICAgIHJldHVybiBcInVuZGVybGluZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgIH0pXG4gICAgICAgICAgO1xuXG4gICAgICAgIHNlYXJjaFJlc3VsdHMuc3R5bGUoXCJkaXNwbGF5XCIsZnVuY3Rpb24oZCl7XG4gICAgICAgICAgaWYoZC52YWx1ZS5jaGFycy5pbmNsdWRlcyhhbHBoYVNvcnQpKXtcbiAgICAgICAgICAgIHJldHVybiBcImJsb2NrXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFwibm9uZVwiO1xuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgIDtcblxuICAgIGZ1bmN0aW9uIHNlYXJjaEFkZFRvQ2hhcnQobm9kZSxrZXkpe1xuICAgICAgbmV3c0lEU2VhcmNoID0ga2V5O1xuICAgICAgbm9kZS52YWx1ZS5taW5pQ2hhcnQgPSAtMTtcblxuICAgICAgbmV3c05lc3QucHVzaChub2RlKTtcblxuICAgICAgY2VsbCA9IGNoYXJ0R1xuICAgICAgICAuc2VsZWN0QWxsKFwiZ1wiKVxuICAgICAgICAuZGF0YShuZXdzTmVzdCxmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm4gK2Qua2V5O1xuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIHZhciBjZWxsRW50ZXIgPSBjZWxsXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNlbGwtZ1wiKVxuICAgICAgICA7XG5cbmNvbnNvbGUubG9nKFwiNTU0OVwiKTtcbiAgICAgIGNlbGxFbnRlclxuICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNpcmNsZVwiKVxuICAgICAgICAuYXR0cihcInJcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgcmV0dXJuIGQudmFsdWUucmFkaXVzXG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIDA7IH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHZhciBkYXRhID0gZDtcbiAgICAgICAgICBtb3VzZU92ZXJFdmVudHMoZGF0YSxkMy5zZWxlY3QodGhpcykpO1xuICAgICAgICB9KVxuICAgICAgICAub24oXCJtb3VzZW91dFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHZhciBkYXRhID0gZDtcbiAgICAgICAgICBtb3VzZU91dEV2ZW50cyhkYXRhLGQzLnNlbGVjdCh0aGlzKSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcImZpbGxcIixmdW5jdGlvbihkKXtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB2YXIgdmFsdWUgPSBnZXRQZXJjZW50VHlwZShcImdlbmRlclwiLGQudmFsdWUpO1xuICAgICAgICAgIHJldHVybiBnZW5kZXJDb2xvclNjYWxlKHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gY29sb3JTY2FsZShuZXdzTWFwLmdldChkLk5ld3NJRCkudmFsdWUuZGlmZik7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcInN0cm9rZVwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGdldFBlcmNlbnRUeXBlKFwiZ2VuZGVyXCIsZC52YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIGQzLmNvbG9yKGdlbmRlckNvbG9yU2NhbGUodmFsdWUpKS5kYXJrZXIoMSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZShcIm9wYWNpdHlcIiwwKVxuICAgICAgICA7XG5cbiAgICAgIGNlbGxFbnRlclxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgMCArIFwiLFwiICsgMCArIFwiKVwiO1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS1pbWFnZS1jb250YWluZXJcIilcbiAgICAgICAgLmFwcGVuZChcImltYWdlXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWltYWdlXCIpXG4gICAgICAgIC5hdHRyKFwieGxpbms6aHJlZlwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIGlmKGQudmFsdWUuY29tcGFueU5hbWUgPT0gXCJ0aGUgbmV3IHlvcmsgdGltZXNcIil7XG4gICAgICAgICAgICByZXR1cm4gXCJhc3NldHMvbnktdGltZXMtbG9nby5zdmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgICBpZihkLnZhbHVlLmNvbXBhbnlOYW1lID09IFwidGhlIHdhbGwgc3RyZWV0IGpvdXJuYWxcIil7XG4gICAgICAgICAgICByZXR1cm4gXCJhc3NldHMvd3NqLWxvZ28uc3ZnXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZC52YWx1ZS5jb21wYW55TmFtZSA9PSBcImxvcyBhbmdlbGVzIHRpbWVzXCIpe1xuICAgICAgICAgICAgcmV0dXJuIFwiYXNzZXRzL2xhLXRpbWVzLWxvZ28ucG5nXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoZC52YWx1ZS5jb21wYW55TmFtZSA9PSBcInVzYSB0b2RheVwiKXtcbiAgICAgICAgICAgIHJldHVybiBcImFzc2V0cy91c2EtdG9kYXktbG9nby5zdmdcIlxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHJldHVybiBkLnZhbHVlLnJhZGl1cyoyKi43O1xuICAgICAgICB9KVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHJldHVybiBkLnZhbHVlLnJhZGl1cyoyKi43O1xuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIGNlbGxFbnRlclxuICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAuYXR0cihcInhcIixmdW5jdGlvbihkLGkpe1xuICAgICAgICAgIHJldHVybiBkLng7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwieVwiLGZ1bmN0aW9uKGQsaSl7XG4gICAgICAgICAgcmV0dXJuIGQueTtcbiAgICAgICAgfSlcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tdGV4dFwiKVxuICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsMClcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tdGV4dFwiKVxuICAgICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgICB2YXIgdGV4dCA9IGQudmFsdWUuY29tcGFueU5hbWUucmVwbGFjZSgvXFxiXFx3L2csIGwgPT4gbC50b1VwcGVyQ2FzZSgpKVxuICAgICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICAgIGNlbGxUZXh0LmZpbHRlcihmdW5jdGlvbihkKXtcbiAgICAgICAgcmV0dXJuIG5ld0RhdGFJRHMuaW5kZXhPZigrZC5rZXkpID09IC0xXG4gICAgICB9KVxuICAgICAgLmFwcGVuZChcInRzcGFuXCIpXG4gICAgICAuYXR0cihcImR4XCIsMilcbiAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpe1xuICAgICAgICByZXR1cm4gXCIqXCJcbiAgICAgIH0pXG4gICAgICA7XG5cbiAgICAgIGNlbGxFbnRlclxuICAgICAgICAuYXBwZW5kKFwibGluZVwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsXCJzd2FybS10ZXh0LWRhc2hcIilcbiAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLDApXG4gICAgICAgIDtcblxuICAgICAgY2VsbEVudGVyXG4gICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWxpbmVcIilcbiAgICAgICAgO1xuXG5jb25zb2xlLmxvZyhcIjU2NTBcIik7XG5cbiAgICAgIGNlbGxFbnRlclxuICAgICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNpcmNsZS10d29cIilcbiAgICAgICAgLmF0dHIoXCJyXCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgIHJldHVybiA0XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgIHJldHVybiBkLng7XG4gICAgICAgIH0pXG4gICAgICAgIC5hdHRyKFwiY3lcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC55OyB9KVxuICAgICAgICA7XG5cbiAgICAgIGNlbGwgPSBjaGFydEcuc2VsZWN0QWxsKFwiLnN3YXJtLWNlbGwtZ1wiKVxuXG4gICAgICBidWlsZENoYXJ0KGN1cnJlbnRDaGFydCk7XG5cbiAgICB9XG5cbiAgICBzZWFyY2hSZXN1bHRzID0gc2VhcmNoUmVzdWx0c0NvbnRhaW5lci5hcHBlbmQoXCJkaXZcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXNlYXJjaC1yZXN1bHRzLXJlc3VsdC1jb250YWluZXJcIilcbiAgICAgIC5zZWxlY3RBbGwoXCJkaXZcIilcbiAgICAgIC5kYXRhKHNlYXJjaERhdGFTZXQpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLFwic3dhcm0tY2hhcnQtc2VhcmNoLXJlc3VsdHMtcmVzdWx0XCIpXG5cbiAgICBzZWFyY2hSZXN1bHRUZXh0ID0gc2VhcmNoUmVzdWx0c1xuICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIixcInN3YXJtLWNoYXJ0LXNlYXJjaC1yZXN1bHRzLXJlc3VsdC10ZXh0XCIpXG4gICAgICAudGV4dChmdW5jdGlvbihkKXtcbiAgICAgICAgcmV0dXJuIGQudmFsdWUuY29tcGFueU5hbWUucmVwbGFjZSgvXFxiXFx3L2csIGwgPT4gbC50b1VwcGVyQ2FzZSgpKVxuICAgICAgfSlcbiAgICAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgICAgIHZhciBub2RlID0gZDtcblxuICAgICAgICBpZih1cmxQYXJhbUVtYmVkIT1cIlwiKXtcbiAgICAgICAgICBzZWFyY2hSZXN1bHRzQ29udGFpbmVyLnN0eWxlKFwiZGlzcGxheVwiLG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoY3VycmVudENoYXJ0ID09IFwidGFibGVcIil7XG4gICAgICAgICAgZ2V0TG9jYXRpb25zKGQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgdmFyIGtleSA9ICtkLmtleTtcbiAgICAgICAgICB2YXIgbWFwID0gbmV3c05lc3QubWFwKGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgICByZXR1cm4gK2Qua2V5O1xuICAgICAgICAgICAgfSkuaW5jbHVkZXMoa2V5KTtcblxuICAgICAgICAgIGlmKG1hcCl7XG4gICAgICAgICAgICBuZXdzSURTZWFyY2ggPSBrZXk7XG4gICAgICAgICAgICBidWlsZENoYXJ0KGN1cnJlbnRDaGFydCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICBzZWFyY2hBZGRUb0NoYXJ0KG5vZGUsa2V5KVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIDtcblxuICAgIHZhciBsZWFkZXJUb2dnbGVEYXRhID0gW1wiYWxsXCIsXCJsZWFkZXJcIl07XG4gICAgLy9cbiAgICAvLyB0b2dnbGVzXG4gICAgLy8gICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsXCJoaXN0b2dyYW0tY2hhcnQtdG9nZ2xlLXR5cGVcIilcbiAgICAvLyAgIC5zZWxlY3RBbGwoXCJwXCIpXG4gICAgLy8gICAuZGF0YShsZWFkZXJUb2dnbGVEYXRhKVxuICAgIC8vICAgLmVudGVyKClcbiAgICAvLyAgIC5hcHBlbmQoXCJwXCIpXG4gICAgLy8gICAuYXR0cihcImNsYXNzXCIsZnVuY3Rpb24oZCxpKXtcbiAgICAvLyAgICAgaWYoaT09MCl7XG4gICAgLy8gICAgICAgcmV0dXJuIFwidG9nZ2xlLXNlbGVjdGVkIGZyb250LWN1cnZlIGhpc3RvZ3JhbS1jaGFydC10b2dnbGUtaXRlbVwiO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGlmKGk9PWxlYWRlclRvZ2dsZURhdGEubGVuZ3RoLTEpe1xuICAgIC8vICAgICAgIHJldHVybiBcImJhY2stY3VydmUgaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS1pdGVtXCI7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgcmV0dXJuIFwiaGlzdG9ncmFtLWNoYXJ0LXRvZ2dsZS1pdGVtXCI7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLnRleHQoZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIGlmKGQ9PVwiYWxsXCIpe1xuICAgIC8vICAgICAgIHJldHVybiBcIkFsbCBTdGFmZlwiXG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgcmV0dXJuIFwiTGVhZGVyc2hpcFwiO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5vbihcImNsaWNrXCIsZnVuY3Rpb24oZCl7XG4gICAgLy8gICAgIHZhciBkYXRhU2VsZWN0ZWQgPSBkO1xuICAgIC8vICAgICBkMy5zZWxlY3QodGhpcy5wYXJlbnROb2RlKS5zZWxlY3RBbGwoXCJwXCIpLmNsYXNzZWQoXCJ0b2dnbGUtc2VsZWN0ZWRcIixmdW5jdGlvbihkKXtcbiAgICAvLyAgICAgICBpZihkPT1kYXRhU2VsZWN0ZWQpe1xuICAgIC8vICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgLy8gICAgICAgfVxuICAgIC8vICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAvLyAgICAgfSlcbiAgICAvLyAgICAgZ3JvdXAgPSBkO1xuICAgIC8vICAgICBidWlsZENoYXJ0KGN1cnJlbnRDaGFydCk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgO1xuICB9XG5cblxuXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBpbml0IH1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvc3dhcm0uanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNQTtBQU5BO0FBQUE7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BO0FBTkE7QUFBQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BO0FBTkE7QUFBQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBT0E7QUFNQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQVFBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQVFBO0FBQ0E7QUFHQTtBQUNBO0FBSUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFQQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQWFBO0FBQ0E7QUFPQTtBQUNBO0FBT0E7QUFDQTtBQUlBO0FBQ0E7QUFLQTtBQUNBO0FBSUE7QUFDQTtBQUtBO0FBQ0E7QUFPQTtBQUNBO0FBSUE7QUFDQTtBQUtBO0FBQ0E7QUFPQTtBQUNBO0FBSUE7QUFDQTtBQUtBO0FBQ0E7QUFPQTtBQUNBO0FBSUE7QUFDQTtBQUtBO0FBQUE7QUFDQTtBQWFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQVVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFJQTtBQUVBO0FBSUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBR0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUhBO0FBQ0E7QUFLQTtBQUNBO0FBR0E7QUFJQTtBQUNBO0FBTEE7QUFDQTtBQVFBO0FBQ0E7QUFJQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBNEhBO0FBQ0E7QUE3SEE7QUFDQTtBQStIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBS0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUlBO0FBQ0E7QUFyUkE7QUFDQTtBQXVSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFJQTtBQUNBO0FBSUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBU0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBR0E7QUFPQTtBQUNBO0FBOWVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBV0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBc1hBO0FBR0E7QUFDQTtBQUNBO0FBa0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBcEpBO0FBQ0E7QUErT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFTQTtBQUNBO0FBTUE7QUFDQTtBQUtBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBRUE7QUFDQTtBQTVVQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBeUlBO0FBTUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQW1HQTtBQUVBO0FBQ0E7QUFDQTtBQWlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUdBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBUUE7QUFDQTtBQWpKQTtBQUNBO0FBbUpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFFQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFLQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFYQTtBQUNBO0FBY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBU0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQXZUQTtBQTBhQTtBQUNBO0FBQ0E7QUExYUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQThTQTtBQUFBO0FBQUE7QUFDQTtBQVNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW5DQTtBQXFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUtBO0FBQ0E7QUFLQTtBQUNBO0FBRUE7QUFNQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFMQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUF3TkE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFsT0E7QUFtT0E7QUFFQTtBQUZBO0FBTUE7QUFDQTtBQTFPQTtBQTJWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQXpmQTtBQUNBO0FBMGZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBR0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBMW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBS0E7QUFFQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQThCQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFxU0E7QUFDQTtBQUNBO0FBc09BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBaFBBO0FBaVBBO0FBRUE7QUFGQTtBQU1BO0FBQ0E7QUF4UEE7QUE4UEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBNkVBO0FBaFdBO0FBa1dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQXJlQTtBQUNBO0FBc2VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUdBO0FBU0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBRUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFJQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFoekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBcUJBO0FBQ0E7QUFDQTtBQUNBO0FBd0JBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBb2RBO0FBQ0E7QUFDQTtBQUNBO0FBaUNBO0FBQ0E7QUFNQTtBQUlBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBTUE7QUFDQTtBQS9WQTtBQUNBO0FBaVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUlBO0FBQ0E7QUE3V0E7QUFDQTtBQUNBO0FBQ0E7QUFRQTtBQUNBO0FBSUE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQWdWQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBTUE7QUFDQTtBQU9BO0FBSUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBTUE7QUFDQTtBQU9BO0FBQ0E7QUFHQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFhQTtBQUNBO0FBSUE7QUFDQTtBQUdBO0FBQ0E7QUFHQTtBQVNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUNBO0FBSUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFHQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFJQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// // D3 is included by globally by default\n// // import * as d3 from 'd3'\n// // import loadData from './load-data'\n//\n// var states = [\n//   [\"Maine\",\"ME\",1,\"Northeast\",23],\n//   [\"Vermont\",\"VT\",2,\"Northeast\",50],\n//   [\"New Hampshire\",\"NH\",3,\"Northeast\",33],\n//   [\"Rhode Island\",\"RI\",4,\"Northeast\",44],\n//   [\"Massachusetts\",\"MA\",5,\"Northeast\",25],\n//   [\"Connecticut\",\"CT\",6,\"Northeast\",9],\n//   [\"Delaware\",\"DE\",7,\"Northeast\",10],\n//   [\"New Jersey\",\"NJ\",8,\"Northeast\",34],\n//   [\"New York\",\"NY\",9,\"Northeast\",36],\n//   [\"Pennsylvania\",\"PA\",10,\"Northeast\",42],\n//   [\"District of Columbia\",\"DC\",11,\"Northeast\",11],\n//   [\"Maryland\",\"MD\",12,\"Northeast\",24],\n//   [\"Virginia\",\"VA\",13,\"South\",51],\n//   [\"North Carolina\",\"NC\",14,\"South\",37],\n//   [\"South Carolina\",\"SC\",15,\"South\",45],\n//   [\"Georgia\",\"GA\",16,\"South\",13],\n//   [\"Alabama\",\"AL\",17,\"South\",1],\n//   [\"Mississippi\",\"MS\",18,\"South\",28],\n//   [\"Louisiana\",\"LA\",19,\"South\",22],\n//   [\"Arkansas\",\"AR\",20,\"South\",5],\n//   [\"Tennessee\",\"TN\",21,\"South\",47],\n//   [\"Kentucky\",\"KY\",22,\"South\",21],\n//   [\"West Virginia\",\"WV\",23,\"South\",54],\n//   [\"Oklahoma\",\"OK\",24,\"Midwest\",40],\n//   [\"Colorado\",\"CO\",25,\"West\",8],\n//   [\"Utah\",\"UT\",26,\"West\",49],\n//   [\"Idaho\",\"ID\",27,\"West\",16],\n//   [\"Wyoming\",\"WY\",28,\"West\",56],\n//   [\"Montana\",\"MT\",29,\"West\",30],\n//   [\"North Dakota\",\"ND\",30,\"Midwest\",38],\n//   [\"South Dakota\",\"SD\",31,\"Midwest\",46],\n//   [\"Nebraska\",\"NE\",32,\"Midwest\",31],\n//   [\"Kansas\",\"KS\",33,\"Midwest\",20],\n//   [\"Iowa\",\"IA\",34,\"Midwest\",19],\n//   [\"Minnesota\",\"MN\",35,\"Midwest\",27],\n//   [\"Wisconsin\",\"WI\",36,\"Midwest\",55],\n//   [\"Indiana\",\"IN\",37,\"Midwest\",18],\n//   [\"Missouri\",\"MO\",38,\"Midwest\",29],\n//   [\"Ohio\",\"OH\",39,\"Midwest\",39],\n//   [\"Michigan\",\"MI\",40,\"Midwest\",26],\n//   [\"Illinois\",\"IL\",41,\"Midwest\",17],\n//   [\"Florida\",\"FL\",42,\"South\",12],\n//   [\"California\",\"CA\",43,\"West\",6],\n//   [\"Nevada\",\"NV\",44,\"West\",32],\n//   [\"Texas\",\"TX\",45,\"South\",48],\n//   [\"Arizona\",\"AZ\",46,\"West\",4],\n//   [\"New Mexico\",\"NM\",47,\"West\",35],\n//   [\"Alaska\",\"AK\",48,\"West\",2],\n//   [\"Washington\",\"WA\",49,\"West\",53],\n//   [\"Oregon\",\"OR\",50,\"West\",41],\n//   [\"Hawaii\",\"HI\",51,\"West\",15],\n//   ]\n//   ;\n//\n// function init(mapData,latLongData,newsIDLocation,newsIDInfo) {\n// \tvar cut = \"gender\"\n//\n//   var countMin = 100;\n//\n// \tfunction getAverage(data){\n// \t\tif(cut == \"gender\"){\n// \t\t\treturn d3.mean(data,function(d){return +d.male_num/d.total_num});\n// \t\t}\n// \t\tif(cut == \"supWhite\"){\n// \t\t\treturn d3.mean(data,function(d){return +d.white_sup_num/d.total_sup_num});\n// \t\t}\n// \t\tif(cut == \"supGender\"){\n// \t\t\treturn d3.mean(data,function(d){return +d.male_sup_num/d.total_sup_num});\n// \t\t}\n// \t\treturn d3.mean(data,function(d){return +d.white_num/d.total_num});\n// \t}\n// \t//\n// \tfunction getPercent(data){\n// \t\tif(cut == \"gender\"){\n// \t\t\treturn +data.male_num/data.total_num\n// \t\t}\n// \t\tif(cut == \"supWhite\"){\n// \t\t\treturn +data.white_sup_num/data.total_sup_num;\n// \t\t}\n// \t\tif(cut == \"supGender\"){\n// \t\t\treturn +data.male_sup_num/data.total_sup_num;\n// \t\t}\n// \t\treturn +data.white_num/data.total_num\n// \t}\n//\n// \tvar latLongMap = d3.map(latLongData,function(d){ return d.NewsID});\n// \tvar newsIdMap = d3.map(newsIDLocation,function(d){ return d.NewsID});\n//   var newsIDName = d3.map(newsIDInfo,function(d){ return d.NewsID});\n//\n// \tvar regionMap = d3.map(states,function(d){\n// \t\treturn d[1].toLowerCase();\n// \t})\n//\n// \tvar width = 500;\n// \tvar horzScale = d3.scaleLinear().domain([0,1]).range([0,width])\n// \tvar container = d3.select(\".table-rows\");\n//\n//   var toggles = container.append(\"div\")\n//     .attr(\"class\",\"histogram-chart-toggle-wrapper\");\n//\n//   toggles\n//     .append(\"div\")\n//     .attr(\"class\",\"histogram-chart-toggle-size\")\n//     .selectAll(\"p\")\n//     .data([0,20,50,100,500])\n//     .enter()\n//     .append(\"p\")\n//     .attr(\"class\",\"histogram-chart-toggle-item\")\n//     .text(function(d){\n//       return d;\n//     })\n//     .on(\"click\",function(d){\n//       countMin = d;\n//       buildChart();\n//     })\n//     ;\n//\n//   toggles\n//     .append(\"div\")\n//     .attr(\"class\",\"histogram-chart-toggle-type\")\n//     .selectAll(\"p\")\n//     .data([\"race\",\"gender\",\"supWhite\",\"supGender\"])\n//     .enter()\n//     .append(\"p\")\n//     .attr(\"class\",\"histogram-chart-toggle-item\")\n//     .text(function(d){\n//       return d;\n//     })\n//     .on(\"click\",function(d){\n//       cut = d;\n//       buildChart();\n//     })\n//     ;\n//\n//   function buildChart(){\n//\n//     d3.selectAll(\".table-rows-wrapper\").remove();\n//\n//     var chartDiv = container.append(\"div\")\n//       .attr(\"class\",\"table-rows-wrapper\")\n//       ;\n//\n//     var filteredMapData = mapData.filter(function(d){\n//       return d.total_num > countMin;\n//     })\n//     ;\n//     var yearNest = d3.nest()\n//       .key(function(d){\n//         return +d.NewsID\n//       })\n//       .rollup(function(leaves){\n//         var extent = d3.extent(leaves,function(d){return d.Year });\n//         return leaves.filter(function(d){return d.Year == extent[0] || d.Year == extent[1]});\n//       })\n//       .entries(filteredMapData)\n//       ;\n//\n//     //\n//     var rows = chartDiv\n//       .selectAll(\"div\")\n//       .data(yearNest)\n//       .enter()\n//       .append(\"div\")\n//       .attr(\"class\",\"table-rows-row\")\n//\n//     rows.append(\"p\").text(function(d){\n//       return newsIDName.get(d.value[0].NewsID).Company;\n//     })\n//     .attr(\"class\",\"table-rows-row-name\")\n//\n//     rows\n//       .selectAll(\"div\")\n//       .data(function(d){\n//         return d.value\n//       })\n//       .enter()\n//       .append(\"div\")\n//       .sort(function(a,b){\n//         return a.Year - b.Year;\n//       })\n//       .attr(\"class\",function(d){\n//         return \"table-rows-row-dot\"\n//       })\n//       .style(\"background-color\",function(d){\n//         var state = null;\n//         var region = null;\n//         if(newsIdMap.has(d.NewsID)){\n//           state = newsIDName.get(d.NewsID).State;\n//         }\n//         if(regionMap.has(state)){\n//           region = regionMap.get(state)[3];\n//         }\n//         if(region ==\"West\"){\n//           return \"green\"\n//         }\n//         if(region ==\"South\"){\n//           return \"blue\"\n//         }\n//         if(region ==\"Midwest\"){\n//           return \"purple\"\n//         }\n//         if(region ==\"Northeast\"){\n//           return \"yellow\"\n//         }\n//         return \"grey\"\n//       })\n//       .style(\"left\",function(d){\n//         return horzScale(getPercent(d)) + \"px\"\n//       })\n//       .on(\"mouseover\",function(d){\n//         console.log(d);\n//       })\n//       .append(\"p\")\n//       .attr(\"class\",\"table-rows-row-dot-text\")\n//       .html(function(d){\n//         return d.Year +\"<br>\"+ Math.round(getPercent(d)*100)+\"%\";\n//       })\n//       .style(\"font-weight\",function(d,i){\n//         if (i==1){\n//           return 700;\n//         }\n//       })\n//       ;\n//   }\n//\n//   buildChart();\n//\n// }\n//\n// export default { init }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.default = {\n\tip: '72.228.10.129',\n\thostname: 'cpe-72-228-10-129.nycap.res.rr.com',\n\ttype: 'ipv4',\n\tcontinent_code: 'NA',\n\tcontinent_name: 'North America',\n\tcountry_code: 'US',\n\tcountry_name: 'United States',\n\tregion_code: 'MA',\n\tregion_name: 'Massachusetts',\n\tcity: 'Great Barrington',\n\tzip: '01230',\n\tlatitude: 42.1617,\n\tlongitude: -73.3277,\n\tlocation: {\n\t\tgeoname_id: 4938157,\n\t\tcapital: 'Washington D.C.',\n\t\tlanguages: [{\n\t\t\tcode: 'en',\n\t\t\tname: 'English',\n\t\t\tnative: 'English'\n\t\t}],\n\t\tcountry_flag: 'http://assets.ipstack.com/flags/us.svg',\n\t\tcountry_flag_emoji: '🇺🇸',\n\t\tcountry_flag_emoji_unicode: 'U+1F1FA U+1F1F8',\n\t\tcalling_code: '1',\n\t\tis_eu: false\n\t},\n\ttime_zone: {\n\t\tid: 'America/New_York',\n\t\tcurrent_time: '2018-04-17T15:29:13-04:00',\n\t\tgmt_offset: -14400,\n\t\tcode: 'EDT',\n\t\tis_daylight_saving: true\n\t},\n\tcurrency: {\n\t\tcode: 'USD',\n\t\tname: 'US Dollar',\n\t\tplural: 'US dollars',\n\t\tsymbol: '$',\n\t\tsymbol_native: '$'\n\t},\n\tconnection: {\n\t\tasn: 11351,\n\t\tisp: 'Time Warner Cable Internet LLC'\n\t},\n\tsecurity: {\n\t\tis_proxy: false,\n\t\tproxy_type: null,\n\t\tis_crawler: false,\n\t\tcrawler_name: null,\n\t\tcrawler_type: null,\n\t\tis_tor: false,\n\t\tthreat_level: 'low',\n\t\tthreat_types: null\n\t}\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL3V0aWxzL2xvY2F0ZS10ZXN0LmpzP2YxYzIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuXHRpcDogJzcyLjIyOC4xMC4xMjknLFxuXHRob3N0bmFtZTogJ2NwZS03Mi0yMjgtMTAtMTI5Lm55Y2FwLnJlcy5yci5jb20nLFxuXHR0eXBlOiAnaXB2NCcsXG5cdGNvbnRpbmVudF9jb2RlOiAnTkEnLFxuXHRjb250aW5lbnRfbmFtZTogJ05vcnRoIEFtZXJpY2EnLFxuXHRjb3VudHJ5X2NvZGU6ICdVUycsXG5cdGNvdW50cnlfbmFtZTogJ1VuaXRlZCBTdGF0ZXMnLFxuXHRyZWdpb25fY29kZTogJ01BJyxcblx0cmVnaW9uX25hbWU6ICdNYXNzYWNodXNldHRzJyxcblx0Y2l0eTogJ0dyZWF0IEJhcnJpbmd0b24nLFxuXHR6aXA6ICcwMTIzMCcsXG5cdGxhdGl0dWRlOiA0Mi4xNjE3LFxuXHRsb25naXR1ZGU6IC03My4zMjc3LFxuXHRsb2NhdGlvbjoge1xuXHRcdGdlb25hbWVfaWQ6IDQ5MzgxNTcsXG5cdFx0Y2FwaXRhbDogJ1dhc2hpbmd0b24gRC5DLicsXG5cdFx0bGFuZ3VhZ2VzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGNvZGU6ICdlbicsXG5cdFx0XHRcdG5hbWU6ICdFbmdsaXNoJyxcblx0XHRcdFx0bmF0aXZlOiAnRW5nbGlzaCdcblx0XHRcdH1cblx0XHRdLFxuXHRcdGNvdW50cnlfZmxhZzogJ2h0dHA6Ly9hc3NldHMuaXBzdGFjay5jb20vZmxhZ3MvdXMuc3ZnJyxcblx0XHRjb3VudHJ5X2ZsYWdfZW1vamk6ICfwn4e68J+HuCcsXG5cdFx0Y291bnRyeV9mbGFnX2Vtb2ppX3VuaWNvZGU6ICdVKzFGMUZBIFUrMUYxRjgnLFxuXHRcdGNhbGxpbmdfY29kZTogJzEnLFxuXHRcdGlzX2V1OiBmYWxzZVxuXHR9LFxuXHR0aW1lX3pvbmU6IHtcblx0XHRpZDogJ0FtZXJpY2EvTmV3X1lvcmsnLFxuXHRcdGN1cnJlbnRfdGltZTogJzIwMTgtMDQtMTdUMTU6Mjk6MTMtMDQ6MDAnLFxuXHRcdGdtdF9vZmZzZXQ6IC0xNDQwMCxcblx0XHRjb2RlOiAnRURUJyxcblx0XHRpc19kYXlsaWdodF9zYXZpbmc6IHRydWVcblx0fSxcblx0Y3VycmVuY3k6IHtcblx0XHRjb2RlOiAnVVNEJyxcblx0XHRuYW1lOiAnVVMgRG9sbGFyJyxcblx0XHRwbHVyYWw6ICdVUyBkb2xsYXJzJyxcblx0XHRzeW1ib2w6ICckJyxcblx0XHRzeW1ib2xfbmF0aXZlOiAnJCdcblx0fSxcblx0Y29ubmVjdGlvbjoge1xuXHRcdGFzbjogMTEzNTEsXG5cdFx0aXNwOiAnVGltZSBXYXJuZXIgQ2FibGUgSW50ZXJuZXQgTExDJ1xuXHR9LFxuXHRzZWN1cml0eToge1xuXHRcdGlzX3Byb3h5OiBmYWxzZSxcblx0XHRwcm94eV90eXBlOiBudWxsLFxuXHRcdGlzX2NyYXdsZXI6IGZhbHNlLFxuXHRcdGNyYXdsZXJfbmFtZTogbnVsbCxcblx0XHRjcmF3bGVyX3R5cGU6IG51bGwsXG5cdFx0aXNfdG9yOiBmYWxzZSxcblx0XHR0aHJlYXRfbGV2ZWw6ICdsb3cnLFxuXHRcdHRocmVhdF90eXBlczogbnVsbFxuXHR9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9qcy91dGlscy9sb2NhdGUtdGVzdC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFkQTtBQWdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQWhEQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _superagent = __webpack_require__(21);\n\nvar _superagent2 = _interopRequireDefault(_superagent);\n\nvar _locateTest = __webpack_require__(14);\n\nvar _locateTest2 = _interopRequireDefault(_locateTest);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* USAGE:\nlocate(key, (err, result) => {\n  ...\n})\n*/\n\nvar debug = false;\nvar MAX_TIME = 4000;\nvar key = null;\n\nfunction getIP() {\n\tif (debug) return Promise.resolve(_locateTest2.default);\n\tvar url = 'https://api.ipify.org?format=json';\n\treturn new Promise(function (resolve, reject) {\n\t\t_superagent2.default.get(url).end(function (err, res) {\n\t\t\tif (err) reject(err);else if (res && res.status >= 200 && res.status < 400) resolve(JSON.parse(res.text));else reject(err);\n\t\t});\n\t});\n}\n\nfunction getGeocode(_ref) {\n\tvar ip = _ref.ip;\n\n\tif (debug) return Promise.resolve(_locateTest2.default);\n\tvar url = 'https://api.ipstack.com/' + ip + '?access_key=' + key;\n\treturn new Promise(function (resolve, reject) {\n\t\t_superagent2.default.get(url).end(function (err, res) {\n\t\t\tif (err) reject(err);else if (res && res.status >= 200 && res.status < 400) {\n\t\t\t\tvar j = JSON.parse(res.text);\n\t\t\t\tif (j.error) reject(j.error);else resolve(j);\n\t\t\t} else reject(err);\n\t\t});\n\t});\n}\n\n/**\n * Get users approx. location according to IP address\n * @param {function} cb callback funtion\n */\n\nfunction init(k, cb) {\n\tif (k) {\n\t\tkey = k;\n\t\tvar timeout = setTimeout(function () {\n\t\t\treturn cb('timeout');\n\t\t}, MAX_TIME);\n\n\t\tgetIP().then(getGeocode).then(function (response) {\n\t\t\tclearTimeout(timeout);\n\t\t\tcb(null, response);\n\t\t}).catch(function (err) {\n\t\t\treturn cb(err);\n\t\t});\n\t} else cb('error: must pass ipstack key');\n}\n\nexports.default = init;\n\n// /* USAGE:\n// locate((err, result) => {\n//   ...\n// })\n// */\n//\n// import 'promis';\n// import request from 'superagent';\n//\n// const test = {\n// \tip: '24.194.26.74',\n// \tcountry_code: 'US',\n// \tcountry_name: 'United States',\n// \tregion_code: 'MA',\n// \tregion_name: 'Massachusetts',\n// \tcity: 'Great Barrington',\n// \tzip_code: '01230',\n// \ttime_zone: 'America/New_York',\n// \tlatitude: 42.1617,\n// \tlongitude: -73.3277,\n// \tmetro_code: 532,\n// };\n// const debug = false;\n// const MAX_TIME = 4000;\n//\n// function getIP() {\n// \tif (debug) return Promise.resolve(test);\n// \tconst url = 'https://api.ipify.org?format=json';\n// \treturn new Promise((resolve, reject) => {\n// \t\trequest.get(url).end((err, res) => {\n// \t\t\tif (err) reject(err);\n// \t\t\telse if (res && res.status >= 200 && res.status < 400)\n// \t\t\t\tresolve(JSON.parse(res.text));\n// \t\t\telse reject();\n// \t\t});\n// \t});\n// }\n//\n// function getGeocode({ ip }) {\n// \tif (debug) return Promise.resolve(test);\n// \tconst url = `https://freegeoip.net/json/${ip}`;\n// \treturn new Promise((resolve, reject) => {\n// \t\trequest.get(url).end((err, res) => {\n// \t\t\tif (err) reject(err);\n// \t\t\telse if (res && res.status >= 200 && res.status < 400)\n// \t\t\t\tresolve(JSON.parse(res.text));\n// \t\t\telse reject();\n// \t\t});\n// \t});\n// }\n//\n// function init(cb) {\n// \t// const p = new Promise((resolve, reject) => {\n// \tconst timeout = setTimeout(() => cb('timeout'), MAX_TIME);\n//\n// \tgetIP()\n// \t\t.then(getGeocode)\n// \t\t.then(response => {\n// \t\t\tclearTimeout(timeout);\n// \t\t\tcb(null, response);\n// \t\t})\n// \t\t.catch(err => cb(err));\n// }\n//\n// export default init;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL3V0aWxzL2xvY2F0ZS5qcz9mOGUwIl0sInNvdXJjZXNDb250ZW50IjpbIlxuLyogVVNBR0U6XG5sb2NhdGUoa2V5LCAoZXJyLCByZXN1bHQpID0+IHtcbiAgLi4uXG59KVxuKi9cblxuaW1wb3J0IHJlcXVlc3QgZnJvbSAnc3VwZXJhZ2VudCc7XG5pbXBvcnQgdGVzdERhdGEgZnJvbSAnLi9sb2NhdGUtdGVzdCc7XG5cbmNvbnN0IGRlYnVnID0gZmFsc2U7XG5jb25zdCBNQVhfVElNRSA9IDQwMDA7XG5sZXQga2V5ID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0SVAoKSB7XG5cdGlmIChkZWJ1ZykgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0ZXN0RGF0YSk7XG5cdGNvbnN0IHVybCA9ICdodHRwczovL2FwaS5pcGlmeS5vcmc/Zm9ybWF0PWpzb24nO1xuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHJlcXVlc3QuZ2V0KHVybCkuZW5kKChlcnIsIHJlcykgPT4ge1xuXHRcdFx0aWYgKGVycikgcmVqZWN0KGVycik7XG5cdFx0XHRlbHNlIGlmIChyZXMgJiYgcmVzLnN0YXR1cyA+PSAyMDAgJiYgcmVzLnN0YXR1cyA8IDQwMClcblx0XHRcdFx0cmVzb2x2ZShKU09OLnBhcnNlKHJlcy50ZXh0KSk7XG5cdFx0XHRlbHNlIHJlamVjdChlcnIpO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0R2VvY29kZSh7IGlwIH0pIHtcblx0aWYgKGRlYnVnKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRlc3REYXRhKTtcblx0Y29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLmlwc3RhY2suY29tLyR7aXB9P2FjY2Vzc19rZXk9JHtrZXl9YDtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRyZXF1ZXN0LmdldCh1cmwpLmVuZCgoZXJyLCByZXMpID0+IHtcblx0XHRcdGlmIChlcnIpIHJlamVjdChlcnIpO1xuXHRcdFx0ZWxzZSBpZiAocmVzICYmIHJlcy5zdGF0dXMgPj0gMjAwICYmIHJlcy5zdGF0dXMgPCA0MDApIHtcblx0XHRcdFx0Y29uc3QgaiA9IEpTT04ucGFyc2UocmVzLnRleHQpO1xuXHRcdFx0XHRpZiAoai5lcnJvcikgcmVqZWN0KGouZXJyb3IpO1xuXHRcdFx0XHRlbHNlIHJlc29sdmUoaik7XG5cdFx0XHR9IGVsc2UgcmVqZWN0KGVycik7XG5cdFx0fSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIEdldCB1c2VycyBhcHByb3guIGxvY2F0aW9uIGFjY29yZGluZyB0byBJUCBhZGRyZXNzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYiBjYWxsYmFjayBmdW50aW9uXG4gKi9cblxuZnVuY3Rpb24gaW5pdChrLCBjYikge1xuXHRpZiAoaykge1xuXHRcdGtleSA9IGs7XG5cdFx0Y29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gY2IoJ3RpbWVvdXQnKSwgTUFYX1RJTUUpO1xuXG5cdFx0Z2V0SVAoKVxuXHRcdFx0LnRoZW4oZ2V0R2VvY29kZSlcblx0XHRcdC50aGVuKHJlc3BvbnNlID0+IHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdFx0XHRjYihudWxsLCByZXNwb25zZSk7XG5cdFx0XHR9KVxuXHRcdFx0LmNhdGNoKGVyciA9PiBjYihlcnIpKTtcblx0fSBlbHNlIGNiKCdlcnJvcjogbXVzdCBwYXNzIGlwc3RhY2sga2V5Jyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXQ7XG5cblxuLy8gLyogVVNBR0U6XG4vLyBsb2NhdGUoKGVyciwgcmVzdWx0KSA9PiB7XG4vLyAgIC4uLlxuLy8gfSlcbi8vICovXG4vL1xuLy8gaW1wb3J0ICdwcm9taXMnO1xuLy8gaW1wb3J0IHJlcXVlc3QgZnJvbSAnc3VwZXJhZ2VudCc7XG4vL1xuLy8gY29uc3QgdGVzdCA9IHtcbi8vIFx0aXA6ICcyNC4xOTQuMjYuNzQnLFxuLy8gXHRjb3VudHJ5X2NvZGU6ICdVUycsXG4vLyBcdGNvdW50cnlfbmFtZTogJ1VuaXRlZCBTdGF0ZXMnLFxuLy8gXHRyZWdpb25fY29kZTogJ01BJyxcbi8vIFx0cmVnaW9uX25hbWU6ICdNYXNzYWNodXNldHRzJyxcbi8vIFx0Y2l0eTogJ0dyZWF0IEJhcnJpbmd0b24nLFxuLy8gXHR6aXBfY29kZTogJzAxMjMwJyxcbi8vIFx0dGltZV96b25lOiAnQW1lcmljYS9OZXdfWW9yaycsXG4vLyBcdGxhdGl0dWRlOiA0Mi4xNjE3LFxuLy8gXHRsb25naXR1ZGU6IC03My4zMjc3LFxuLy8gXHRtZXRyb19jb2RlOiA1MzIsXG4vLyB9O1xuLy8gY29uc3QgZGVidWcgPSBmYWxzZTtcbi8vIGNvbnN0IE1BWF9USU1FID0gNDAwMDtcbi8vXG4vLyBmdW5jdGlvbiBnZXRJUCgpIHtcbi8vIFx0aWYgKGRlYnVnKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRlc3QpO1xuLy8gXHRjb25zdCB1cmwgPSAnaHR0cHM6Ly9hcGkuaXBpZnkub3JnP2Zvcm1hdD1qc29uJztcbi8vIFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbi8vIFx0XHRyZXF1ZXN0LmdldCh1cmwpLmVuZCgoZXJyLCByZXMpID0+IHtcbi8vIFx0XHRcdGlmIChlcnIpIHJlamVjdChlcnIpO1xuLy8gXHRcdFx0ZWxzZSBpZiAocmVzICYmIHJlcy5zdGF0dXMgPj0gMjAwICYmIHJlcy5zdGF0dXMgPCA0MDApXG4vLyBcdFx0XHRcdHJlc29sdmUoSlNPTi5wYXJzZShyZXMudGV4dCkpO1xuLy8gXHRcdFx0ZWxzZSByZWplY3QoKTtcbi8vIFx0XHR9KTtcbi8vIFx0fSk7XG4vLyB9XG4vL1xuLy8gZnVuY3Rpb24gZ2V0R2VvY29kZSh7IGlwIH0pIHtcbi8vIFx0aWYgKGRlYnVnKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRlc3QpO1xuLy8gXHRjb25zdCB1cmwgPSBgaHR0cHM6Ly9mcmVlZ2VvaXAubmV0L2pzb24vJHtpcH1gO1xuLy8gXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuLy8gXHRcdHJlcXVlc3QuZ2V0KHVybCkuZW5kKChlcnIsIHJlcykgPT4ge1xuLy8gXHRcdFx0aWYgKGVycikgcmVqZWN0KGVycik7XG4vLyBcdFx0XHRlbHNlIGlmIChyZXMgJiYgcmVzLnN0YXR1cyA+PSAyMDAgJiYgcmVzLnN0YXR1cyA8IDQwMClcbi8vIFx0XHRcdFx0cmVzb2x2ZShKU09OLnBhcnNlKHJlcy50ZXh0KSk7XG4vLyBcdFx0XHRlbHNlIHJlamVjdCgpO1xuLy8gXHRcdH0pO1xuLy8gXHR9KTtcbi8vIH1cbi8vXG4vLyBmdW5jdGlvbiBpbml0KGNiKSB7XG4vLyBcdC8vIGNvbnN0IHAgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4vLyBcdGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IGNiKCd0aW1lb3V0JyksIE1BWF9USU1FKTtcbi8vXG4vLyBcdGdldElQKClcbi8vIFx0XHQudGhlbihnZXRHZW9jb2RlKVxuLy8gXHRcdC50aGVuKHJlc3BvbnNlID0+IHtcbi8vIFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbi8vIFx0XHRcdGNiKG51bGwsIHJlc3BvbnNlKTtcbi8vIFx0XHR9KVxuLy8gXHRcdC5jYXRjaChlcnIgPT4gY2IoZXJyKSk7XG4vLyB9XG4vL1xuLy8gZXhwb3J0IGRlZmF1bHQgaW5pdDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvdXRpbHMvbG9jYXRlLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFPQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQVJBOzs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nfunction get(key) {\n    var name = key.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\n    var results = regex.exec(window.location.search);\n    return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n}\n\nfunction set(key, value) {\n    var baseUrl = [window.location.protocol, '//', window.location.host, window.location.pathname].join('');\n    var urlQueryString = document.location.search;\n    var newParam = key + '=' + value;\n    var params = '?' + newParam;\n\n    // If the \"search\" string exists, then build params from it\n    if (urlQueryString) {\n        var updateRegex = new RegExp('([?&])' + key + '[^&]*');\n        var removeRegex = new RegExp('([?&])' + key + '=[^&;]+[&;]?');\n\n        // Remove param if value is empty\n        if (typeof value === 'undefined' || value === null || value === '') {\n            params = urlQueryString.replace(removeRegex, '$1');\n            params = params.replace(/[&;]$/, '');\n        } else if (urlQueryString.match(updateRegex) !== null) {\n            // If param exists already, update it\n            params = urlQueryString.replace(updateRegex, '$1' + newParam);\n        } else {\n            // Otherwise, add it to end of query string\n            params = urlQueryString + '&' + newParam;\n        }\n    }\n\n    // no parameter was set so we don't need the question mark\n    params = params === '?' ? '' : params;\n\n    window.history.replaceState({}, '', '' + baseUrl + params);\n}\n\nexports.default = { get: get, set: set };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2pzL3V0aWxzL3VybC1wYXJhbWV0ZXIuanM/MmQ2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgY29uc3QgbmFtZSA9IGtleS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxdJyk7XG4gICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBbXFxcXD8mXSR7bmFtZX09KFteJiNdKilgKTtcbiAgICBjb25zdCByZXN1bHRzID0gcmVnZXguZXhlYyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICByZXR1cm4gcmVzdWx0cyA9PT0gbnVsbFxuICAgICAgICA/ICcnXG4gICAgICAgIDogZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMV0ucmVwbGFjZSgvXFwrL2csICcgJykpO1xufVxuXG5mdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIGNvbnN0IGJhc2VVcmwgPSBbXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCxcbiAgICAgICAgJy8vJyxcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhvc3QsXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICBdLmpvaW4oJycpO1xuICAgIGNvbnN0IHVybFF1ZXJ5U3RyaW5nID0gZG9jdW1lbnQubG9jYXRpb24uc2VhcmNoO1xuICAgIGNvbnN0IG5ld1BhcmFtID0gYCR7a2V5fT0ke3ZhbHVlfWA7XG4gICAgbGV0IHBhcmFtcyA9IGA/JHtuZXdQYXJhbX1gO1xuXG4gICAgLy8gSWYgdGhlIFwic2VhcmNoXCIgc3RyaW5nIGV4aXN0cywgdGhlbiBidWlsZCBwYXJhbXMgZnJvbSBpdFxuICAgIGlmICh1cmxRdWVyeVN0cmluZykge1xuICAgICAgICBjb25zdCB1cGRhdGVSZWdleCA9IG5ldyBSZWdFeHAoYChbXFw/Jl0pJHtrZXl9W14mXSpgKTtcbiAgICAgICAgY29uc3QgcmVtb3ZlUmVnZXggPSBuZXcgUmVnRXhwKGAoW1xcPyZdKSR7a2V5fT1bXiY7XStbJjtdP2ApO1xuXG4gICAgICAgIC8vIFJlbW92ZSBwYXJhbSBpZiB2YWx1ZSBpcyBlbXB0eVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgIHBhcmFtcyA9IHVybFF1ZXJ5U3RyaW5nLnJlcGxhY2UocmVtb3ZlUmVnZXgsICckMScpO1xuICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zLnJlcGxhY2UoL1smO10kLywgJycpO1xuICAgICAgICB9IGVsc2UgaWYgKHVybFF1ZXJ5U3RyaW5nLm1hdGNoKHVwZGF0ZVJlZ2V4KSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSWYgcGFyYW0gZXhpc3RzIGFscmVhZHksIHVwZGF0ZSBpdFxuICAgICAgICAgICAgcGFyYW1zID0gdXJsUXVlcnlTdHJpbmcucmVwbGFjZSh1cGRhdGVSZWdleCwgYCQxJHtuZXdQYXJhbX1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgYWRkIGl0IHRvIGVuZCBvZiBxdWVyeSBzdHJpbmdcbiAgICAgICAgICAgIHBhcmFtcyA9IGAke3VybFF1ZXJ5U3RyaW5nfSYke25ld1BhcmFtfWA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBubyBwYXJhbWV0ZXIgd2FzIHNldCBzbyB3ZSBkb24ndCBuZWVkIHRoZSBxdWVzdGlvbiBtYXJrXG4gICAgcGFyYW1zID0gcGFyYW1zID09PSAnPycgPyAnJyA6IHBhcmFtcztcblxuICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgJycsIGAke2Jhc2VVcmx9JHtwYXJhbXN9YCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgZ2V0LCBzZXQgfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvanMvdXRpbHMvdXJsLXBhcmFtZXRlci5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

eval("\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (true) {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  var args = [].slice.call(arguments, 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NvbXBvbmVudC1lbWl0dGVyL2luZGV4LmpzP2VhMmYiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxyXG4gKi9cclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XHJcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XHJcbn07XHJcblxyXG4vKipcclxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1peGluKG9iaikge1xyXG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xyXG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub24gPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxyXG4gICAgLnB1c2goZm4pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxyXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICBmdW5jdGlvbiBvbigpIHtcclxuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XHJcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgb24uZm4gPSBmbjtcclxuICB0aGlzLm9uKGV2ZW50LCBvbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICAvLyBhbGxcclxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XHJcblxyXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcclxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcclxuICB2YXIgY2I7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcclxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtNaXhlZH0gLi4uXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2NvbXBvbmVudC1lbWl0dGVyL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! geolib 2.0.23 by Manuel Bieh\r\n* Library to provide geo functions like distance calculation,\r\n* conversion of decimal coordinates to sexagesimal and vice versa, etc.\r\n* WGS 84 (World Geodetic System 1984)\r\n* \r\n* @author Manuel Bieh\r\n* @url http://www.manuelbieh.com/\r\n* @version 2.0.23\r\n* @license MIT \r\n**/;(function(global, undefined) {\n\n    \"use strict\";\n\n    function Geolib() {}\n\n    // Constants\n    Geolib.TO_RAD = Math.PI / 180;\n    Geolib.TO_DEG = 180 / Math.PI;\n    Geolib.PI_X2 = Math.PI * 2;\n    Geolib.PI_DIV4 = Math.PI / 4;\n\n    // Setting readonly defaults\n    var geolib = Object.create(Geolib.prototype, {\n        version: {\n            value: \"2.0.23\"\n        },\n        radius: {\n            value: 6378137\n        },\n        minLat: {\n            value: -90\n        },\n        maxLat: {\n            value: 90\n        },\n        minLon: {\n            value: -180\n        },\n        maxLon: {\n            value: 180\n        },\n        sexagesimalPattern: {\n            value: /^([0-9]{1,3})°\\s*([0-9]{1,3}(?:\\.(?:[0-9]{1,2}))?)'\\s*(([0-9]{1,3}(\\.([0-9]{1,4}))?)\"\\s*)?([NEOSW]?)$/\n        },\n        measures: {\n            value: Object.create(Object.prototype, {\n                \"m\" : {value: 1},\n                \"km\": {value: 0.001},\n                \"cm\": {value: 100},\n                \"mm\": {value: 1000},\n                \"mi\": {value: (1 / 1609.344)},\n                \"sm\": {value: (1 / 1852.216)},\n                \"ft\": {value: (100 / 30.48)},\n                \"in\": {value: (100 / 2.54)},\n                \"yd\": {value: (1 / 0.9144)}\n            })\n        },\n        prototype: {\n            value: Geolib.prototype\n        },\n        extend: {\n            value: function(methods, overwrite) {\n                for(var prop in methods) {\n                    if(typeof geolib.prototype[prop] === 'undefined' || overwrite === true) {\n                        if(typeof methods[prop] === 'function' && typeof methods[prop].bind === 'function') {\n                            geolib.prototype[prop] = methods[prop].bind(geolib);\n                        } else {\n                            geolib.prototype[prop] = methods[prop];\n                        }\n                    }\n                }\n            }\n        }\n    });\n\n    if (typeof(Number.prototype.toRad) === 'undefined') {\n        Number.prototype.toRad = function() {\n            return this * Geolib.TO_RAD;\n        };\n    }\n\n    if (typeof(Number.prototype.toDeg) === 'undefined') {\n        Number.prototype.toDeg = function() {\n            return this * Geolib.TO_DEG;\n        };\n    }\n\n    // Here comes the magic\n    geolib.extend({\n\n        decimal: {},\n\n        sexagesimal: {},\n\n        distance: null,\n\n        getKeys: function(point) {\n\n            // GeoJSON Array [longitude, latitude(, elevation)]\n            if(Object.prototype.toString.call(point) == '[object Array]') {\n\n                return {\n                    longitude: point.length >= 1 ? 0 : undefined,\n                    latitude: point.length >= 2 ? 1 : undefined,\n                    elevation: point.length >= 3 ? 2 : undefined\n                };\n\n            }\n\n            var getKey = function(possibleValues) {\n\n                var key;\n\n                possibleValues.every(function(val) {\n                    // TODO: check if point is an object\n                    if(typeof point != 'object') {\n                        return true;\n                    }\n                    return point.hasOwnProperty(val) ? (function() { key = val; return false; }()) : true;\n                });\n\n                return key;\n\n            };\n\n            var longitude = getKey(['lng', 'lon', 'longitude']);\n            var latitude = getKey(['lat', 'latitude']);\n            var elevation = getKey(['alt', 'altitude', 'elevation', 'elev']);\n\n            // return undefined if not at least one valid property was found\n            if(typeof latitude == 'undefined' &&\n                typeof longitude == 'undefined' &&\n                typeof elevation == 'undefined') {\n                return undefined;\n            }\n\n            return {\n                latitude: latitude,\n                longitude: longitude,\n                elevation: elevation\n            };\n\n        },\n\n        // returns latitude of a given point, converted to decimal\n        // set raw to true to avoid conversion\n        getLat: function(point, raw) {\n            return raw === true ? point[this.getKeys(point).latitude] : this.useDecimal(point[this.getKeys(point).latitude]);\n        },\n\n        // Alias for getLat\n        latitude: function(point) {\n            return this.getLat.call(this, point);\n        },\n\n        // returns longitude of a given point, converted to decimal\n        // set raw to true to avoid conversion\n        getLon: function(point, raw) {\n            return raw === true ? point[this.getKeys(point).longitude] : this.useDecimal(point[this.getKeys(point).longitude]);\n        },\n\n        // Alias for getLon\n        longitude: function(point) {\n            return this.getLon.call(this, point);\n        },\n\n        getElev: function(point) {\n            return point[this.getKeys(point).elevation];\n        },\n\n        // Alias for getElev\n        elevation: function(point) {\n            return this.getElev.call(this, point);\n        },\n\n        coords: function(point, raw) {\n\n            var retval = {\n                latitude: raw === true ? point[this.getKeys(point).latitude] : this.useDecimal(point[this.getKeys(point).latitude]),\n                longitude: raw === true ? point[this.getKeys(point).longitude] : this.useDecimal(point[this.getKeys(point).longitude])\n            };\n\n            var elev = point[this.getKeys(point).elevation];\n\n            if(typeof elev !== 'undefined') {\n                retval['elevation'] = elev;\n            }\n\n            return retval;\n\n        },\n\n        // Alias for coords\n        ll: function(point, raw) {\n            return this.coords.call(this, point, raw);\n        },\n\n\n        // checks if a variable contains a valid latlong object\n        validate: function(point) {\n\n            var keys = this.getKeys(point);\n\n            if(typeof keys === 'undefined' || typeof keys.latitude === 'undefined' || keys.longitude === 'undefined') {\n                return false;\n            }\n\n            var lat = point[keys.latitude];\n            var lng = point[keys.longitude];\n\n            if(typeof lat === 'undefined' || !this.isDecimal(lat) && !this.isSexagesimal(lat)) {\n                return false;\n            }\n\n            if(typeof lng === 'undefined' || !this.isDecimal(lng) && !this.isSexagesimal(lng)) {\n                return false;\n            }\n\n            lat = this.useDecimal(lat);\n            lng = this.useDecimal(lng);\n\n            if(lat < this.minLat || lat > this.maxLat || lng < this.minLon || lng > this.maxLon) {\n                return false;\n            }\n\n            return true;\n\n        },\n\n        /**\n        * Calculates geodetic distance between two points specified by latitude/longitude using\n        * Vincenty inverse formula for ellipsoids\n        * Vincenty Inverse Solution of Geodesics on the Ellipsoid (c) Chris Veness 2002-2010\n        * (Licensed under CC BY 3.0)\n        *\n        * @param    object    Start position {latitude: 123, longitude: 123}\n        * @param    object    End position {latitude: 123, longitude: 123}\n        * @param    integer   Accuracy (in meters)\n        * @param    integer   Precision (in decimal cases)\n        * @return   integer   Distance (in meters)\n        */\n        getDistance: function(start, end, accuracy, precision) {\n\n            accuracy = Math.floor(accuracy) || 1;\n            precision = Math.floor(precision) || 0;\n\n            var s = this.coords(start);\n            var e = this.coords(end);\n\n            var a = 6378137, b = 6356752.314245,  f = 1/298.257223563;  // WGS-84 ellipsoid params\n            var L = (e['longitude']-s['longitude']).toRad();\n\n            var cosSigma, sigma, sinAlpha, cosSqAlpha, cos2SigmaM, sinSigma;\n\n            var U1 = Math.atan((1-f) * Math.tan(parseFloat(s['latitude']).toRad()));\n            var U2 = Math.atan((1-f) * Math.tan(parseFloat(e['latitude']).toRad()));\n            var sinU1 = Math.sin(U1), cosU1 = Math.cos(U1);\n            var sinU2 = Math.sin(U2), cosU2 = Math.cos(U2);\n\n            var lambda = L, lambdaP, iterLimit = 100;\n            do {\n                var sinLambda = Math.sin(lambda), cosLambda = Math.cos(lambda);\n                sinSigma = (\n                    Math.sqrt(\n                        (\n                            cosU2 * sinLambda\n                        ) * (\n                            cosU2 * sinLambda\n                        ) + (\n                            cosU1 * sinU2 - sinU1 * cosU2 * cosLambda\n                        ) * (\n                            cosU1 * sinU2 - sinU1 * cosU2 * cosLambda\n                        )\n                    )\n                );\n                if (sinSigma === 0) {\n                    return geolib.distance = 0;  // co-incident points\n                }\n\n                cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda;\n                sigma = Math.atan2(sinSigma, cosSigma);\n                sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma;\n                cosSqAlpha = 1 - sinAlpha * sinAlpha;\n                cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha;\n\n                if (isNaN(cos2SigmaM)) {\n                    cos2SigmaM = 0;  // equatorial line: cosSqAlpha=0 (§6)\n                }\n                var C = (\n                    f / 16 * cosSqAlpha * (\n                        4 + f * (\n                            4 - 3 * cosSqAlpha\n                        )\n                    )\n                );\n                lambdaP = lambda;\n                lambda = (\n                    L + (\n                        1 - C\n                    ) * f * sinAlpha * (\n                        sigma + C * sinSigma * (\n                            cos2SigmaM + C * cosSigma * (\n                                -1 + 2 * cos2SigmaM * cos2SigmaM\n                            )\n                        )\n                    )\n                );\n\n            } while (Math.abs(lambda-lambdaP) > 1e-12 && --iterLimit>0);\n\n            if (iterLimit === 0) {\n                return NaN;  // formula failed to converge\n            }\n\n            var uSq = (\n                cosSqAlpha * (\n                    a * a - b * b\n                ) / (\n                    b*b\n                )\n            );\n\n            var A = (\n                1 + uSq / 16384 * (\n                    4096 + uSq * (\n                        -768 + uSq * (\n                            320 - 175 * uSq\n                        )\n                    )\n                )\n            );\n\n            var B = (\n                uSq / 1024 * (\n                    256 + uSq * (\n                        -128 + uSq * (\n                            74-47 * uSq\n                        )\n                    )\n                )\n            );\n\n            var deltaSigma = (\n                B * sinSigma * (\n                    cos2SigmaM + B / 4 * (\n                        cosSigma * (\n                            -1 + 2 * cos2SigmaM * cos2SigmaM\n                        ) -B / 6 * cos2SigmaM * (\n                            -3 + 4 * sinSigma * sinSigma\n                        ) * (\n                            -3 + 4 * cos2SigmaM * cos2SigmaM\n                        )\n                    )\n                )\n            );\n\n            var distance = b * A * (sigma - deltaSigma);\n\n            distance = distance.toFixed(precision); // round to 1mm precision\n\n            //if (start.hasOwnProperty(elevation) && end.hasOwnProperty(elevation)) {\n            if (typeof this.elevation(start) !== 'undefined' && typeof this.elevation(end) !== 'undefined') {\n                var climb = Math.abs(this.elevation(start) - this.elevation(end));\n                distance = Math.sqrt(distance * distance + climb * climb);\n            }\n\n            return this.distance = Math.round(distance * Math.pow(10, precision) / accuracy) * accuracy / Math.pow(10, precision);\n\n            /*\n            // note: to return initial/final bearings in addition to distance, use something like:\n            var fwdAz = Math.atan2(cosU2*sinLambda,  cosU1*sinU2-sinU1*cosU2*cosLambda);\n            var revAz = Math.atan2(cosU1*sinLambda, -sinU1*cosU2+cosU1*sinU2*cosLambda);\n\n            return { distance: s, initialBearing: fwdAz.toDeg(), finalBearing: revAz.toDeg() };\n            */\n\n        },\n\n\n        /**\n        * Calculates the distance between two spots.\n        * This method is more simple but also far more inaccurate\n        *\n        * @param    object    Start position {latitude: 123, longitude: 123}\n        * @param    object    End position {latitude: 123, longitude: 123}\n        * @param    integer   Accuracy (in meters)\n        * @return   integer   Distance (in meters)\n        */\n        getDistanceSimple: function(start, end, accuracy) {\n\n            accuracy = Math.floor(accuracy) || 1;\n\n            var distance =\n                Math.round(\n                    Math.acos(\n                        Math.sin(\n                            this.latitude(end).toRad()\n                        ) *\n                        Math.sin(\n                            this.latitude(start).toRad()\n                        ) +\n                        Math.cos(\n                            this.latitude(end).toRad()\n                        ) *\n                        Math.cos(\n                            this.latitude(start).toRad()\n                        ) *\n                        Math.cos(\n                            this.longitude(start).toRad() - this.longitude(end).toRad()\n                        )\n                    ) * this.radius\n                );\n\n            return geolib.distance = Math.floor(Math.round(distance/accuracy)*accuracy);\n\n        },\n\n\n    /**\n        * Calculates the center of a collection of geo coordinates\n        *\n        * @param        array       Collection of coords [{latitude: 51.510, longitude: 7.1321}, {latitude: 49.1238, longitude: \"8° 30' W\"}, ...]\n        * @return       object      {latitude: centerLat, longitude: centerLng}\n        */\n        getCenter: function(coords) {\n\n            var coordsArray = coords;\n            if(typeof coords === 'object' && !(coords instanceof Array)) {\n\n                coordsArray = [];\n\n                for(var key in coords) {\n                    coordsArray.push(\n                        this.coords(coords[key])\n                    );\n                }\n\n            }\n\n            if(!coordsArray.length) {\n                return false;\n            }\n\n            var X = 0.0;\n            var Y = 0.0;\n            var Z = 0.0;\n            var lat, lon, hyp;\n\n            coordsArray.forEach(function(coord) {\n\n                lat = this.latitude(coord).toRad();\n                lon = this.longitude(coord).toRad();\n\n                X += Math.cos(lat) * Math.cos(lon);\n                Y += Math.cos(lat) * Math.sin(lon);\n                Z += Math.sin(lat);\n\n            }, this);\n\n            var nb_coords = coordsArray.length;\n            X = X / nb_coords;\n            Y = Y / nb_coords;\n            Z = Z / nb_coords;\n\n            lon = Math.atan2(Y, X);\n            hyp = Math.sqrt(X * X + Y * Y);\n            lat = Math.atan2(Z, hyp);\n\n            return {\n                latitude: (lat * Geolib.TO_DEG).toFixed(6),\n                longitude: (lon * Geolib.TO_DEG).toFixed(6)\n            };\n\n        },\n\n\n        /**\n        * Gets the max and min, latitude, longitude, and elevation (if provided).\n        * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return   object      {maxLat: maxLat,\n        *                     minLat: minLat\n        *                     maxLng: maxLng,\n        *                     minLng: minLng,\n        *                     maxElev: maxElev,\n        *                     minElev: minElev}\n        */\n        getBounds: function(coords) {\n\n            if (!coords.length) {\n                return false;\n            }\n\n            var useElevation = this.elevation(coords[0]);\n\n            var stats = {\n                maxLat: -Infinity,\n                minLat: Infinity,\n                maxLng: -Infinity,\n                minLng: Infinity\n            };\n\n            if (typeof useElevation != 'undefined') {\n                stats.maxElev = 0;\n                stats.minElev = Infinity;\n            }\n\n            for (var i = 0, l = coords.length; i < l; ++i) {\n\n                stats.maxLat = Math.max(this.latitude(coords[i]), stats.maxLat);\n                stats.minLat = Math.min(this.latitude(coords[i]), stats.minLat);\n                stats.maxLng = Math.max(this.longitude(coords[i]), stats.maxLng);\n                stats.minLng = Math.min(this.longitude(coords[i]), stats.minLng);\n\n                if (useElevation) {\n                    stats.maxElev = Math.max(this.elevation(coords[i]), stats.maxElev);\n                    stats.minElev = Math.min(this.elevation(coords[i]), stats.minElev);\n                }\n\n            }\n\n            return stats;\n\n        },\n\n        /**\n        * Calculates the center of the bounds of geo coordinates.\n        *\n        * On polygons like political borders (eg. states)\n        * this may gives a closer result to human expectation, than `getCenter`,\n        * because that function can be disturbed by uneven distribution of\n        * point in different sides.\n        * Imagine the US state Oklahoma: `getCenter` on that gives a southern\n        * point, because the southern border contains a lot more nodes,\n        * than the others.\n        *\n        * @param        array       Collection of coords [{latitude: 51.510, longitude: 7.1321}, {latitude: 49.1238, longitude: \"8° 30' W\"}, ...]\n        * @return       object      {latitude: centerLat, longitude: centerLng}\n        */\n        getCenterOfBounds: function(coords) {\n            var b = this.getBounds(coords);\n            var latitude = b.minLat + ((b.maxLat - b.minLat) / 2);\n            var longitude = b.minLng + ((b.maxLng - b.minLng) / 2);\n            return {\n                latitude: parseFloat(latitude.toFixed(6)),\n                longitude: parseFloat(longitude.toFixed(6))\n            };\n        },\n\n\n        /**\n        * Computes the bounding coordinates of all points on the surface\n        * of the earth less than or equal to the specified great circle\n        * distance.\n        *\n        * @param object Point position {latitude: 123, longitude: 123}\n        * @param number Distance (in meters).\n        * @return array Collection of two points defining the SW and NE corners.\n        */\n        getBoundsOfDistance: function(point, distance) {\n\n            var latitude = this.latitude(point);\n            var longitude = this.longitude(point);\n\n            var radLat = latitude.toRad();\n            var radLon = longitude.toRad();\n\n            var radDist = distance / this.radius;\n            var minLat = radLat - radDist;\n            var maxLat = radLat + radDist;\n\n            var MAX_LAT_RAD = this.maxLat.toRad();\n            var MIN_LAT_RAD = this.minLat.toRad();\n            var MAX_LON_RAD = this.maxLon.toRad();\n            var MIN_LON_RAD = this.minLon.toRad();\n\n            var minLon;\n            var maxLon;\n\n            if (minLat > MIN_LAT_RAD && maxLat < MAX_LAT_RAD) {\n\n                var deltaLon = Math.asin(Math.sin(radDist) / Math.cos(radLat));\n                minLon = radLon - deltaLon;\n\n                if (minLon < MIN_LON_RAD) {\n                    minLon += Geolib.PI_X2;\n                }\n\n                maxLon = radLon + deltaLon;\n\n                if (maxLon > MAX_LON_RAD) {\n                    maxLon -= Geolib.PI_X2;\n                }\n\n            } else {\n                // A pole is within the distance.\n                minLat = Math.max(minLat, MIN_LAT_RAD);\n                maxLat = Math.min(maxLat, MAX_LAT_RAD);\n                minLon = MIN_LON_RAD;\n                maxLon = MAX_LON_RAD;\n            }\n\n            return [\n                // Southwest\n                {\n                    latitude: minLat.toDeg(),\n                    longitude: minLon.toDeg()\n                },\n                // Northeast\n                {\n                    latitude: maxLat.toDeg(),\n                    longitude: maxLon.toDeg()\n                }\n            ];\n\n        },\n\n\n        /**\n        * Checks whether a point is inside of a polygon or not.\n        * Note that the polygon coords must be in correct order!\n        *\n        * @param        object      coordinate to check e.g. {latitude: 51.5023, longitude: 7.3815}\n        * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       bool        true if the coordinate is inside the given polygon\n        */\n        isPointInside: function(latlng, coords) {\n\n            for(var c = false, i = -1, l = coords.length, j = l - 1; ++i < l; j = i) {\n\n                if(\n                    (\n                        (this.longitude(coords[i]) <= this.longitude(latlng) && this.longitude(latlng) < this.longitude(coords[j])) ||\n                        (this.longitude(coords[j]) <= this.longitude(latlng) && this.longitude(latlng) < this.longitude(coords[i]))\n                    ) &&\n                    (\n                        this.latitude(latlng) < (this.latitude(coords[j]) - this.latitude(coords[i])) *\n                        (this.longitude(latlng) - this.longitude(coords[i])) /\n                        (this.longitude(coords[j]) - this.longitude(coords[i])) +\n                        this.latitude(coords[i])\n                    )\n                ) {\n                    c = !c;\n                }\n\n            }\n\n            return c;\n\n        },\n\n\n       /**\n        * Pre calculate the polygon coords, to speed up the point inside check.\n        * Use this function before calling isPointInsideWithPreparedPolygon()\n        * @see          Algorythm from http://alienryderflex.com/polygon/\n        * @param        array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        */\n        preparePolygonForIsPointInsideOptimized: function(coords) {\n\n            for(var i = 0, j = coords.length-1; i < coords.length; i++) {\n\n            if(this.longitude(coords[j]) === this.longitude(coords[i])) {\n\n                    coords[i].constant = this.latitude(coords[i]);\n                    coords[i].multiple = 0;\n\n                } else {\n\n                    coords[i].constant = this.latitude(coords[i]) - (\n                        this.longitude(coords[i]) * this.latitude(coords[j])\n                    ) / (\n                        this.longitude(coords[j]) - this.longitude(coords[i])\n                    ) + (\n                        this.longitude(coords[i])*this.latitude(coords[i])\n                    ) / (\n                        this.longitude(coords[j])-this.longitude(coords[i])\n                    );\n\n                    coords[i].multiple = (\n                        this.latitude(coords[j])-this.latitude(coords[i])\n                    ) / (\n                        this.longitude(coords[j])-this.longitude(coords[i])\n                    );\n\n                }\n\n                j=i;\n\n            }\n\n        },\n\n      /**\n       * Checks whether a point is inside of a polygon or not.\n       * \"This is useful if you have many points that need to be tested against the same (static) polygon.\"\n       * Please call the function preparePolygonForIsPointInsideOptimized() with the same coords object before using this function.\n       * Note that the polygon coords must be in correct order!\n       *\n       * @see          Algorythm from http://alienryderflex.com/polygon/\n       *\n       * @param     object      coordinate to check e.g. {latitude: 51.5023, longitude: 7.3815}\n       * @param     array       array with coords e.g. [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n       * @return        bool        true if the coordinate is inside the given polygon\n       */\n        isPointInsideWithPreparedPolygon: function(point, coords) {\n\n            var flgPointInside = false,\n            y = this.longitude(point),\n            x = this.latitude(point);\n\n            for(var i = 0, j = coords.length-1; i < coords.length; i++) {\n\n                if ((this.longitude(coords[i]) < y && this.longitude(coords[j]) >=y ||\n                    this.longitude(coords[j]) < y && this.longitude(coords[i]) >= y)) {\n\n                    flgPointInside^=(y*coords[i].multiple+coords[i].constant < x);\n\n                }\n\n                j=i;\n\n            }\n\n            return flgPointInside;\n\n        },\n\n\n        /**\n        * Shortcut for geolib.isPointInside()\n        */\n        isInside: function() {\n            return this.isPointInside.apply(this, arguments);\n        },\n\n\n        /**\n        * Checks whether a point is inside of a circle or not.\n        *\n        * @param        object      coordinate to check (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      coordinate of the circle's center (e.g. {latitude: 51.4812, longitude: 7.4025})\n        * @param        integer     maximum radius in meters\n        * @return       bool        true if the coordinate is within the given radius\n        */\n        isPointInCircle: function(latlng, center, radius) {\n            return this.getDistance(latlng, center) < radius;\n        },\n\n\n        /**\n        * Shortcut for geolib.isPointInCircle()\n        */\n        withinRadius: function() {\n            return this.isPointInCircle.apply(this, arguments);\n        },\n\n\n        /**\n        * Gets rhumb line bearing of two points. Find out about the difference between rhumb line and\n        * great circle bearing on Wikipedia. It's quite complicated. Rhumb line should be fine in most cases:\n        *\n        * http://en.wikipedia.org/wiki/Rhumb_line#General_and_mathematical_description\n        *\n        * Function heavily based on Doug Vanderweide's great PHP version (licensed under GPL 3.0)\n        * http://www.dougv.com/2009/07/13/calculating-the-bearing-and-compass-rose-direction-between-two-latitude-longitude-coordinates-in-php/\n        *\n        * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      destination coordinate\n        * @return       integer     calculated bearing\n        */\n        getRhumbLineBearing: function(originLL, destLL) {\n\n            // difference of longitude coords\n            var diffLon = this.longitude(destLL).toRad() - this.longitude(originLL).toRad();\n\n            // difference latitude coords phi\n            var diffPhi = Math.log(\n                Math.tan(\n                    this.latitude(destLL).toRad() / 2 + Geolib.PI_DIV4\n                ) /\n                Math.tan(\n                    this.latitude(originLL).toRad() / 2 + Geolib.PI_DIV4\n                )\n            );\n\n            // recalculate diffLon if it is greater than pi\n            if(Math.abs(diffLon) > Math.PI) {\n                if(diffLon > 0) {\n                    diffLon = (Geolib.PI_X2 - diffLon) * -1;\n                }\n                else {\n                    diffLon = Geolib.PI_X2 + diffLon;\n                }\n            }\n\n            //return the angle, normalized\n            return (Math.atan2(diffLon, diffPhi).toDeg() + 360) % 360;\n\n        },\n\n\n        /**\n        * Gets great circle bearing of two points. See description of getRhumbLineBearing for more information\n        *\n        * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      destination coordinate\n        * @return       integer     calculated bearing\n        */\n        getBearing: function(originLL, destLL) {\n\n            destLL['latitude'] = this.latitude(destLL);\n            destLL['longitude'] = this.longitude(destLL);\n            originLL['latitude'] = this.latitude(originLL);\n            originLL['longitude'] = this.longitude(originLL);\n\n            var bearing = (\n                (\n                    Math.atan2(\n                        Math.sin(\n                            destLL['longitude'].toRad() -\n                            originLL['longitude'].toRad()\n                        ) *\n                        Math.cos(\n                            destLL['latitude'].toRad()\n                        ),\n                        Math.cos(\n                            originLL['latitude'].toRad()\n                        ) *\n                        Math.sin(\n                            destLL['latitude'].toRad()\n                        ) -\n                        Math.sin(\n                            originLL['latitude'].toRad()\n                        ) *\n                        Math.cos(\n                            destLL['latitude'].toRad()\n                        ) *\n                        Math.cos(\n                            destLL['longitude'].toRad() - originLL['longitude'].toRad()\n                        )\n                    )\n                ).toDeg() + 360\n            ) % 360;\n\n            return bearing;\n\n        },\n\n\n        /**\n        * Gets the compass direction from an origin coordinate to a destination coordinate.\n        *\n        * @param        object      origin coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n        * @param        object      destination coordinate\n        * @param        string      Bearing mode. Can be either circle or rhumbline\n        * @return       object      Returns an object with a rough (NESW) and an exact direction (NNE, NE, ENE, E, ESE, etc).\n        */\n        getCompassDirection: function(originLL, destLL, bearingMode) {\n\n            var direction;\n            var bearing;\n\n            if(bearingMode == 'circle') {\n                // use great circle bearing\n                bearing = this.getBearing(originLL, destLL);\n            } else {\n                // default is rhumb line bearing\n                bearing = this.getRhumbLineBearing(originLL, destLL);\n            }\n\n            switch(Math.round(bearing/22.5)) {\n                case 1:\n                    direction = {exact: \"NNE\", rough: \"N\"};\n                    break;\n                case 2:\n                    direction = {exact: \"NE\", rough: \"N\"};\n                    break;\n                case 3:\n                    direction = {exact: \"ENE\", rough: \"E\"};\n                    break;\n                case 4:\n                    direction = {exact: \"E\", rough: \"E\"};\n                    break;\n                case 5:\n                    direction = {exact: \"ESE\", rough: \"E\"};\n                    break;\n                case 6:\n                    direction = {exact: \"SE\", rough: \"E\"};\n                    break;\n                case 7:\n                    direction = {exact: \"SSE\", rough: \"S\"};\n                    break;\n                case 8:\n                    direction = {exact: \"S\", rough: \"S\"};\n                    break;\n                case 9:\n                    direction = {exact: \"SSW\", rough: \"S\"};\n                    break;\n                case 10:\n                    direction = {exact: \"SW\", rough: \"S\"};\n                    break;\n                case 11:\n                    direction = {exact: \"WSW\", rough: \"W\"};\n                    break;\n                case 12:\n                    direction = {exact: \"W\", rough: \"W\"};\n                    break;\n                case 13:\n                    direction = {exact: \"WNW\", rough: \"W\"};\n                    break;\n                case 14:\n                    direction = {exact: \"NW\", rough: \"W\"};\n                    break;\n                case 15:\n                    direction = {exact: \"NNW\", rough: \"N\"};\n                    break;\n                default:\n                    direction = {exact: \"N\", rough: \"N\"};\n            }\n\n            direction['bearing'] = bearing;\n            return direction;\n\n        },\n\n\n        /**\n        * Shortcut for getCompassDirection\n        */\n        getDirection: function(originLL, destLL, bearingMode) {\n            return this.getCompassDirection.apply(this, arguments);\n        },\n\n\n        /**\n        * Sorts an array of coords by distance from a reference coordinate\n        *\n        * @param        object      reference coordinate e.g. {latitude: 51.5023, longitude: 7.3815}\n        * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       array       ordered array\n        */\n        orderByDistance: function(latlng, coords) {\n\n            var coordsArray = Object.keys(coords).map(function(idx) {\n                var distance = this.getDistance(latlng, coords[idx]);\n                var augmentedCoord = Object.create(coords[idx]);\n                augmentedCoord.distance = distance;\n                augmentedCoord.key = idx;\n                return augmentedCoord;\n            }, this);\n\n            return coordsArray.sort(function(a, b) {\n                return a.distance - b.distance;\n            });\n\n        },\n\n        /**\n        * Check if a point lies in line created by two other points\n        *\n        * @param    object    Point to check: {latitude: 123, longitude: 123}\n        * @param    object    Start of line {latitude: 123, longitude: 123}\n        * @param    object    End of line {latitude: 123, longitude: 123}\n        * @return   boolean\n        */\n        isPointInLine: function(point, start, end) {\n\n            return (this.getDistance(start, point, 1, 3)+this.getDistance(point, end, 1, 3)).toFixed(3)==this.getDistance(start, end, 1, 3);\n        },\n\n                /**\n        * Check if a point lies within a given distance from a line created by two other points\n        *\n        * @param    object    Point to check: {latitude: 123, longitude: 123}\n        * @param    object    Start of line {latitude: 123, longitude: 123}\n        * @param    object    End of line {latitude: 123, longitude: 123}\n        * @pararm   float     maximum distance from line\n        * @return   boolean\n        */\n        isPointNearLine: function(point, start, end, distance) {\n            return this.getDistanceFromLine(point, start, end) < distance;\n        },\n\n                     /**\n        * return the minimum distance from a point to a line\n        *\n        * @param    object    Point away from line\n        * @param    object    Start of line {latitude: 123, longitude: 123}\n        * @param    object    End of line {latitude: 123, longitude: 123}\n        * @return   float     distance from point to line\n        */\n        getDistanceFromLine: function(point, start, end) {\n            var d1 = this.getDistance(start, point, 1, 3);\n            var d2 = this.getDistance(point, end, 1, 3);\n            var d3 = this.getDistance(start, end, 1, 3);\n            var distance = 0;\n\n            // alpha is the angle between the line from start to point, and from start to end //\n            var alpha = Math.acos((d1*d1 + d3*d3 - d2*d2)/(2*d1*d3));\n            // beta is the angle between the line from end to point and from end to start //\n            var beta = Math.acos((d2*d2 + d3*d3 - d1*d1)/(2*d2*d3));\n\n            // if the angle is greater than 90 degrees, then the minimum distance is the\n            // line from the start to the point //\n            if(alpha>Math.PI/2) {\n                distance = d1;\n            }\n            // same for the beta //\n            else if(beta > Math.PI/2) {\n                distance = d2;\n            }\n            // otherwise the minimum distance is achieved through a line perpendular to the start-end line,\n            // which goes from the start-end line to the point //\n            else {\n                distance = Math.sin(alpha) * d1;\n            }\n\n            return distance;\n        },\n\n        /**\n        * Finds the nearest coordinate to a reference coordinate\n        *\n        * @param        object      reference coordinate e.g. {latitude: 51.5023, longitude: 7.3815}\n        * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       array       ordered array\n        */\n        findNearest: function(latlng, coords, offset, limit) {\n\n            offset = offset || 0;\n            limit = limit || 1;\n            var ordered = this.orderByDistance(latlng, coords);\n\n            if(limit === 1) {\n                return ordered[offset];\n            } else {\n                return ordered.splice(offset, limit);\n            }\n\n        },\n\n\n        /**\n        * Calculates the length of a given path\n        *\n        * @param        mixed       array or object with coords [{latitude: 51.5143, longitude: 7.4138}, {latitude: 123, longitude: 123}, ...]\n        * @return       integer     length of the path (in meters)\n        */\n        getPathLength: function(coords) {\n\n            var dist = 0;\n            var last;\n\n            for (var i = 0, l = coords.length; i < l; ++i) {\n                if(last) {\n                    //console.log(coords[i], last, this.getDistance(coords[i], last));\n                    dist += this.getDistance(this.coords(coords[i]), last);\n                }\n                last = this.coords(coords[i]);\n            }\n\n            return dist;\n\n        },\n\n\n        /**\n        * Calculates the speed between to points within a given time span.\n        *\n        * @param        object      coords with javascript timestamp {latitude: 51.5143, longitude: 7.4138, time: 1360231200880}\n        * @param        object      coords with javascript timestamp {latitude: 51.5502, longitude: 7.4323, time: 1360245600460}\n        * @param        object      options (currently \"unit\" is the only option. Default: km(h));\n        * @return       float       speed in unit per hour\n        */\n        getSpeed: function(start, end, options) {\n\n            var unit = options && options.unit || 'km';\n\n            if(unit == 'mph') {\n                unit = 'mi';\n            } else if(unit == 'kmh') {\n                unit = 'km';\n            }\n\n            var distance = geolib.getDistance(start, end);\n            var time = ((end.time*1)/1000) - ((start.time*1)/1000);\n            var mPerHr = (distance/time)*3600;\n            var speed = Math.round(mPerHr * this.measures[unit] * 10000)/10000;\n            return speed;\n\n        },\n\n\n        /**\n         * Computes the destination point given an initial point, a distance\n         * and a bearing\n         *\n         * see http://www.movable-type.co.uk/scripts/latlong.html for the original code\n         *\n         * @param        object     start coordinate (e.g. {latitude: 51.5023, longitude: 7.3815})\n         * @param        float      longitude of the inital point in degree\n         * @param        float      distance to go from the inital point in meter\n         * @param        float      bearing in degree of the direction to go, e.g. 0 = north, 180 = south\n         * @param        float      optional (in meter), defaults to mean radius of the earth\n         * @return       object     {latitude: destLat (in degree), longitude: destLng (in degree)}\n         */\n        computeDestinationPoint: function(start, distance, bearing, radius) {\n\n            var lat = this.latitude(start);\n            var lng = this.longitude(start);\n\n            radius = (typeof radius === 'undefined') ? this.radius : Number(radius);\n\n            var δ = Number(distance) / radius; // angular distance in radians\n            var θ = Number(bearing).toRad();\n\n            var φ1 = Number(lat).toRad();\n            var λ1 = Number(lng).toRad();\n\n            var φ2 = Math.asin( Math.sin(φ1)*Math.cos(δ) +\n                Math.cos(φ1)*Math.sin(δ)*Math.cos(θ) );\n            var λ2 = λ1 + Math.atan2(Math.sin(θ)*Math.sin(δ)*Math.cos(φ1),\n                    Math.cos(δ)-Math.sin(φ1)*Math.sin(φ2));\n            λ2 = (λ2+3*Math.PI) % (2*Math.PI) - Math.PI; // normalise to -180..+180°\n\n            return {\n                latitude: φ2.toDeg(),\n                longitude: λ2.toDeg()\n            };\n\n        },\n\n\n        /**\n        * Converts a distance from meters to km, mm, cm, mi, ft, in or yd\n        *\n        * @param        string      Format to be converted in\n        * @param        float       Distance in meters\n        * @param        float       Decimal places for rounding (default: 4)\n        * @return       float       Converted distance\n        */\n        convertUnit: function(unit, distance, round) {\n\n            if(distance === 0) {\n\n                return 0;\n\n            } else if(typeof distance === 'undefined') {\n\n                if(this.distance === null) {\n                    throw new Error('No distance was given');\n                } else if(this.distance === 0) {\n                    return 0;\n                } else {\n                    distance = this.distance;\n                }\n\n            }\n\n            unit = unit || 'm';\n            round = (null == round ? 4 : round);\n\n            if(typeof this.measures[unit] !== 'undefined') {\n                return this.round(distance * this.measures[unit], round);\n            } else {\n                throw new Error('Unknown unit for conversion.');\n            }\n\n        },\n\n\n        /**\n        * Checks if a value is in decimal format or, if neccessary, converts to decimal\n        *\n        * @param        mixed       Value(s) to be checked/converted (array of latlng objects, latlng object, sexagesimal string, float)\n        * @return       float       Input data in decimal format\n        */\n        useDecimal: function(value) {\n\n            if(Object.prototype.toString.call(value) === '[object Array]') {\n\n                var geolib = this;\n\n                value = value.map(function(val) {\n\n                    //if(!isNaN(parseFloat(val))) {\n                    if(geolib.isDecimal(val)) {\n\n                        return geolib.useDecimal(val);\n\n                    } else if(typeof val == 'object') {\n\n                        if(geolib.validate(val)) {\n\n                            return geolib.coords(val);\n\n                        } else {\n\n                            for(var prop in val) {\n                                val[prop] = geolib.useDecimal(val[prop]);\n                            }\n\n                            return val;\n\n                        }\n\n                    } else if(geolib.isSexagesimal(val)) {\n\n                        return geolib.sexagesimal2decimal(val);\n\n                    } else {\n\n                        return val;\n\n                    }\n\n                });\n\n                return value;\n\n            } else if(typeof value === 'object' && this.validate(value)) {\n\n                return this.coords(value);\n\n            } else if(typeof value === 'object') {\n\n                for(var prop in value) {\n                    value[prop] = this.useDecimal(value[prop]);\n                }\n\n                return value;\n\n            }\n\n\n            if (this.isDecimal(value)) {\n\n                return parseFloat(value);\n\n            } else if(this.isSexagesimal(value) === true) {\n\n                return parseFloat(this.sexagesimal2decimal(value));\n\n            }\n\n            throw new Error('Unknown format.');\n\n        },\n\n        /**\n        * Converts a decimal coordinate value to sexagesimal format\n        *\n        * @param        float       decimal\n        * @return       string      Sexagesimal value (XX° YY' ZZ\")\n        */\n        decimal2sexagesimal: function(dec) {\n\n            if (dec in this.sexagesimal) {\n                return this.sexagesimal[dec];\n            }\n\n            var tmp = dec.toString().split('.');\n\n            var deg = Math.abs(tmp[0]);\n            var min = ('0.' + (tmp[1] || 0))*60;\n            var sec = min.toString().split('.');\n\n            min = Math.floor(min);\n            sec = (('0.' + (sec[1] || 0)) * 60).toFixed(2);\n\n            this.sexagesimal[dec] = (deg + '° ' + min + \"' \" + sec + '\"');\n\n            return this.sexagesimal[dec];\n\n        },\n\n\n        /**\n        * Converts a sexagesimal coordinate to decimal format\n        *\n        * @param        float       Sexagesimal coordinate\n        * @return       string      Decimal value (XX.XXXXXXXX)\n        */\n        sexagesimal2decimal: function(sexagesimal) {\n\n            if (sexagesimal in this.decimal) {\n                return this.decimal[sexagesimal];\n            }\n\n            var regEx = new RegExp(this.sexagesimalPattern);\n            var data = regEx.exec(sexagesimal);\n            var min = 0, sec = 0;\n\n            if(data) {\n                min = parseFloat(data[2]/60);\n                sec = parseFloat(data[4]/3600) || 0;\n            }\n\n            var dec = ((parseFloat(data[1]) + min + sec)).toFixed(8);\n            //var   dec = ((parseFloat(data[1]) + min + sec));\n\n                // South and West are negative decimals\n                dec = (data[7] == 'S' || data[7] == 'W') ? parseFloat(-dec) : parseFloat(dec);\n                //dec = (data[7] == 'S' || data[7] == 'W') ? -dec : dec;\n\n            this.decimal[sexagesimal] = dec;\n\n            return dec;\n\n        },\n\n\n        /**\n        * Checks if a value is in decimal format\n        *\n        * @param        string      Value to be checked\n        * @return       bool        True if in sexagesimal format\n        */\n        isDecimal: function(value) {\n\n            value = value.toString().replace(/\\s*/, '');\n\n            // looks silly but works as expected\n            // checks if value is in decimal format\n            return (!isNaN(parseFloat(value)) && parseFloat(value) == value);\n\n        },\n\n\n        /**\n        * Checks if a value is in sexagesimal format\n        *\n        * @param        string      Value to be checked\n        * @return       bool        True if in sexagesimal format\n        */\n        isSexagesimal: function(value) {\n\n            value = value.toString().replace(/\\s*/, '');\n\n            return this.sexagesimalPattern.test(value);\n\n        },\n\n        round: function(value, n) {\n            var decPlace = Math.pow(10, n);\n            return Math.round(value * decPlace)/decPlace;\n        }\n\n    });\n\n    // Node module\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\n        module.exports = geolib;\n\n        // react native\n        if (typeof global === 'object') {\n          global.geolib = geolib;\n        }\n\n    // AMD module\n    } else if (true) {\n\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return geolib;\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n    // we're in a browser\n    } else {\n\n        global.geolib = geolib;\n\n    }\n\n}(this));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports) {

eval("(function(){'use strict';var f,g=[];function l(a){g.push(a);1==g.length&&f()}function m(){for(;g.length;)g[0](),g.shift()}f=function(){setTimeout(m)};function n(a){this.a=p;this.b=void 0;this.f=[];var b=this;try{a(function(a){q(b,a)},function(a){r(b,a)})}catch(c){r(b,c)}}var p=2;function t(a){return new n(function(b,c){c(a)})}function u(a){return new n(function(b){b(a)})}function q(a,b){if(a.a==p){if(b==a)throw new TypeError;var c=!1;try{var d=b&&b.then;if(null!=b&&\"object\"==typeof b&&\"function\"==typeof d){d.call(b,function(b){c||q(a,b);c=!0},function(b){c||r(a,b);c=!0});return}}catch(e){c||r(a,e);return}a.a=0;a.b=b;v(a)}}\nfunction r(a,b){if(a.a==p){if(b==a)throw new TypeError;a.a=1;a.b=b;v(a)}}function v(a){l(function(){if(a.a!=p)for(;a.f.length;){var b=a.f.shift(),c=b[0],d=b[1],e=b[2],b=b[3];try{0==a.a?\"function\"==typeof c?e(c.call(void 0,a.b)):e(a.b):1==a.a&&(\"function\"==typeof d?e(d.call(void 0,a.b)):b(a.b))}catch(h){b(h)}}})}n.prototype.g=function(a){return this.c(void 0,a)};n.prototype.c=function(a,b){var c=this;return new n(function(d,e){c.f.push([a,b,d,e]);v(c)})};\nfunction w(a){return new n(function(b,c){function d(c){return function(d){h[c]=d;e+=1;e==a.length&&b(h)}}var e=0,h=[];0==a.length&&b(h);for(var k=0;k<a.length;k+=1)u(a[k]).c(d(k),c)})}function x(a){return new n(function(b,c){for(var d=0;d<a.length;d+=1)u(a[d]).c(b,c)})};window.Promise||(window.Promise=n,window.Promise.resolve=u,window.Promise.reject=t,window.Promise.race=x,window.Promise.all=w,window.Promise.prototype.then=n.prototype.c,window.Promise.prototype[\"catch\"]=n.prototype.g);}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Byb21pcy9wcm9taXNlLmpzPzNhNTUiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7J3VzZSBzdHJpY3QnO3ZhciBmLGc9W107ZnVuY3Rpb24gbChhKXtnLnB1c2goYSk7MT09Zy5sZW5ndGgmJmYoKX1mdW5jdGlvbiBtKCl7Zm9yKDtnLmxlbmd0aDspZ1swXSgpLGcuc2hpZnQoKX1mPWZ1bmN0aW9uKCl7c2V0VGltZW91dChtKX07ZnVuY3Rpb24gbihhKXt0aGlzLmE9cDt0aGlzLmI9dm9pZCAwO3RoaXMuZj1bXTt2YXIgYj10aGlzO3RyeXthKGZ1bmN0aW9uKGEpe3EoYixhKX0sZnVuY3Rpb24oYSl7cihiLGEpfSl9Y2F0Y2goYyl7cihiLGMpfX12YXIgcD0yO2Z1bmN0aW9uIHQoYSl7cmV0dXJuIG5ldyBuKGZ1bmN0aW9uKGIsYyl7YyhhKX0pfWZ1bmN0aW9uIHUoYSl7cmV0dXJuIG5ldyBuKGZ1bmN0aW9uKGIpe2IoYSl9KX1mdW5jdGlvbiBxKGEsYil7aWYoYS5hPT1wKXtpZihiPT1hKXRocm93IG5ldyBUeXBlRXJyb3I7dmFyIGM9ITE7dHJ5e3ZhciBkPWImJmIudGhlbjtpZihudWxsIT1iJiZcIm9iamVjdFwiPT10eXBlb2YgYiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZCl7ZC5jYWxsKGIsZnVuY3Rpb24oYil7Y3x8cShhLGIpO2M9ITB9LGZ1bmN0aW9uKGIpe2N8fHIoYSxiKTtjPSEwfSk7cmV0dXJufX1jYXRjaChlKXtjfHxyKGEsZSk7cmV0dXJufWEuYT0wO2EuYj1iO3YoYSl9fVxuZnVuY3Rpb24gcihhLGIpe2lmKGEuYT09cCl7aWYoYj09YSl0aHJvdyBuZXcgVHlwZUVycm9yO2EuYT0xO2EuYj1iO3YoYSl9fWZ1bmN0aW9uIHYoYSl7bChmdW5jdGlvbigpe2lmKGEuYSE9cClmb3IoO2EuZi5sZW5ndGg7KXt2YXIgYj1hLmYuc2hpZnQoKSxjPWJbMF0sZD1iWzFdLGU9YlsyXSxiPWJbM107dHJ5ezA9PWEuYT9cImZ1bmN0aW9uXCI9PXR5cGVvZiBjP2UoYy5jYWxsKHZvaWQgMCxhLmIpKTplKGEuYik6MT09YS5hJiYoXCJmdW5jdGlvblwiPT10eXBlb2YgZD9lKGQuY2FsbCh2b2lkIDAsYS5iKSk6YihhLmIpKX1jYXRjaChoKXtiKGgpfX19KX1uLnByb3RvdHlwZS5nPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmModm9pZCAwLGEpfTtuLnByb3RvdHlwZS5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcztyZXR1cm4gbmV3IG4oZnVuY3Rpb24oZCxlKXtjLmYucHVzaChbYSxiLGQsZV0pO3YoYyl9KX07XG5mdW5jdGlvbiB3KGEpe3JldHVybiBuZXcgbihmdW5jdGlvbihiLGMpe2Z1bmN0aW9uIGQoYyl7cmV0dXJuIGZ1bmN0aW9uKGQpe2hbY109ZDtlKz0xO2U9PWEubGVuZ3RoJiZiKGgpfX12YXIgZT0wLGg9W107MD09YS5sZW5ndGgmJmIoaCk7Zm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKz0xKXUoYVtrXSkuYyhkKGspLGMpfSl9ZnVuY3Rpb24geChhKXtyZXR1cm4gbmV3IG4oZnVuY3Rpb24oYixjKXtmb3IodmFyIGQ9MDtkPGEubGVuZ3RoO2QrPTEpdShhW2RdKS5jKGIsYyl9KX07d2luZG93LlByb21pc2V8fCh3aW5kb3cuUHJvbWlzZT1uLHdpbmRvdy5Qcm9taXNlLnJlc29sdmU9dSx3aW5kb3cuUHJvbWlzZS5yZWplY3Q9dCx3aW5kb3cuUHJvbWlzZS5yYWNlPXgsd2luZG93LlByb21pc2UuYWxsPXcsd2luZG93LlByb21pc2UucHJvdG90eXBlLnRoZW49bi5wcm90b3R5cGUuYyx3aW5kb3cuUHJvbWlzZS5wcm90b3R5cGVbXCJjYXRjaFwiXT1uLnByb3RvdHlwZS5nKTt9KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Byb21pcy9wcm9taXNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports) {

eval("function Agent() {\n  this._defaults = [];\n}\n\n[\"use\", \"on\", \"once\", \"set\", \"query\", \"type\", \"accept\", \"auth\", \"withCredentials\", \"sortQuery\", \"retry\", \"ok\", \"redirects\",\n \"timeout\", \"buffer\", \"serialize\", \"parse\", \"ca\", \"key\", \"pfx\", \"cert\"].forEach(function(fn) {\n  /** Default setting for all requests from this agent */\n  Agent.prototype[fn] = function(/*varargs*/) {\n    this._defaults.push({fn:fn, arguments:arguments});\n    return this;\n  }\n});\n\nAgent.prototype._setDefaults = function(req) {\n    this._defaults.forEach(function(def) {\n      req[def.fn].apply(req, def.arguments);\n    });\n};\n\nmodule.exports = Agent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3N1cGVyYWdlbnQvbGliL2FnZW50LWJhc2UuanM/YWM0YSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBBZ2VudCgpIHtcbiAgdGhpcy5fZGVmYXVsdHMgPSBbXTtcbn1cblxuW1widXNlXCIsIFwib25cIiwgXCJvbmNlXCIsIFwic2V0XCIsIFwicXVlcnlcIiwgXCJ0eXBlXCIsIFwiYWNjZXB0XCIsIFwiYXV0aFwiLCBcIndpdGhDcmVkZW50aWFsc1wiLCBcInNvcnRRdWVyeVwiLCBcInJldHJ5XCIsIFwib2tcIiwgXCJyZWRpcmVjdHNcIixcbiBcInRpbWVvdXRcIiwgXCJidWZmZXJcIiwgXCJzZXJpYWxpemVcIiwgXCJwYXJzZVwiLCBcImNhXCIsIFwia2V5XCIsIFwicGZ4XCIsIFwiY2VydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGZuKSB7XG4gIC8qKiBEZWZhdWx0IHNldHRpbmcgZm9yIGFsbCByZXF1ZXN0cyBmcm9tIHRoaXMgYWdlbnQgKi9cbiAgQWdlbnQucHJvdG90eXBlW2ZuXSA9IGZ1bmN0aW9uKC8qdmFyYXJncyovKSB7XG4gICAgdGhpcy5fZGVmYXVsdHMucHVzaCh7Zm46Zm4sIGFyZ3VtZW50czphcmd1bWVudHN9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSk7XG5cbkFnZW50LnByb3RvdHlwZS5fc2V0RGVmYXVsdHMgPSBmdW5jdGlvbihyZXEpIHtcbiAgICB0aGlzLl9kZWZhdWx0cy5mb3JFYWNoKGZ1bmN0aW9uKGRlZikge1xuICAgICAgcmVxW2RlZi5mbl0uYXBwbHkocmVxLCBkZWYuYXJndW1lbnRzKTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWdlbnQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc3VwZXJhZ2VudC9saWIvYWdlbnQtYmFzZS5qc1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  console.warn(\"Using browser-only version of superagent in non-browser environment\");\n  root = this;\n}\n\nvar Emitter = __webpack_require__(17);\nvar RequestBase = __webpack_require__(22);\nvar isObject = __webpack_require__(0);\nvar ResponseBase = __webpack_require__(23);\nvar Agent = __webpack_require__(20);\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Expose `request`.\n */\n\nvar request = exports = module.exports = function(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new exports.Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new exports.Request('GET', method);\n  }\n\n  return new exports.Request(method, url);\n}\n\nexports.Request = Request;\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  throw Error(\"Browser-only version of superagent could not find XHR\");\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    pushEncodedKeyValuePair(pairs, key, obj[key]);\n  }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (val != null) {\n    if (Array.isArray(val)) {\n      val.forEach(function(v) {\n        pushEncodedKeyValuePair(pairs, key, v);\n      });\n    } else if (isObject(val)) {\n      for(var subkey in val) {\n        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);\n      }\n    } else {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(val));\n    }\n  } else if (val === null) {\n    pairs.push(encodeURIComponent(key));\n  }\n}\n\n/**\n * Expose serialization method.\n */\n\nrequest.serializeObject = serialize;\n\n/**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var pair;\n  var pos;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    pos = pair.indexOf('=');\n    if (pos == -1) {\n      obj[decodeURIComponent(pair)] = '';\n    } else {\n      obj[decodeURIComponent(pair.slice(0, pos))] =\n        decodeURIComponent(pair.slice(pos + 1));\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'text/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nrequest.serialize = {\n  'application/x-www-form-urlencoded': serialize,\n  'application/json': JSON.stringify\n};\n\n/**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    if (index === -1) { // could be empty line, just skip it\n      continue;\n    }\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  // should match /json or +json\n  // but not /json-seq\n  return /[\\/+]json($|[^-\\w])/.test(mime);\n}\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req) {\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  var status = this.xhr.status;\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n  this._setStatusProperties(status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this._setHeaderProperties(this.header);\n\n  if (null === this.text && req._responseType) {\n    this.body = this.xhr.response;\n  } else {\n    this.body = this.req.method != 'HEAD'\n      ? this._parseBody(this.text ? this.text : this.xhr.response)\n      : null;\n  }\n}\n\nResponseBase(Response.prototype);\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype._parseBody = function(str) {\n  var parse = request.parse[this.type];\n  if (this.req._parser) {\n    return this.req._parser(this, str);\n  }\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n  this._header = {}; // coerces header names to lowercase\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      // issue #675: return the raw response if the response parsing fails\n      if (self.xhr) {\n        // ie9 doesn't have 'response' property\n        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;\n        // issue #876: return the http status code if the response parsing fails\n        err.status = self.xhr.status ? self.xhr.status : null;\n        err.statusCode = err.status; // backwards-compat only\n      } else {\n        err.rawResponse = null;\n        err.status = null;\n      }\n\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    var new_err;\n    try {\n      if (!self._isResponseOK(res)) {\n        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n      }\n    } catch(custom_err) {\n      new_err = custom_err; // ok() callback can throw\n    }\n\n    // #1000 don't catch errors from the callback to avoid double calling it\n    if (new_err) {\n      new_err.original = err;\n      new_err.response = res;\n      new_err.status = res.status;\n      self.callback(new_err, res);\n    } else {\n      self.callback(null, res);\n    }\n  });\n}\n\n/**\n * Mixin `Emitter` and `RequestBase`.\n */\n\nEmitter(Request.prototype);\nRequestBase(Request.prototype);\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} [pass] optional in case of using 'bearer' as type\n * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass, options){\n  if (1 === arguments.length) pass = '';\n  if (typeof pass === 'object' && pass !== null) { // pass is optional and can be replaced with options\n    options = pass;\n    pass = '';\n  }\n  if (!options) {\n    options = {\n      type: 'function' === typeof btoa ? 'basic' : 'auto',\n    };\n  }\n\n  var encoder = function(string) {\n    if ('function' === typeof btoa) {\n      return btoa(string);\n    }\n    throw new Error('Cannot use basic auth, btoa is not a function');\n  };\n\n  return this._auth(user, pass, options, encoder);\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `options` (or filename).\n *\n * ``` js\n * request.post('/upload')\n *   .attach('content', new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String|Object} options\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, options){\n  if (file) {\n    if (this._data) {\n      throw Error(\"superagent can't mix .send() and .attach()\");\n    }\n\n    this._getFormData().append(field, file, options || file.name);\n  }\n  return this;\n};\n\nRequest.prototype._getFormData = function(){\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n  return this._formData;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  if (this._shouldRetry(err, res)) {\n    return this._retry();\n  }\n\n  var fn = this._callback;\n  this.clearTimeout();\n\n  if (err) {\n    if (this._maxRetries) err.retries = this._retries - 1;\n    this.emit('error', err);\n  }\n\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n\n  this.callback(err);\n};\n\n// This only warns, because the request is still likely to work\nRequest.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){\n  console.warn(\"This is not supported in browser version of superagent\");\n  return this;\n};\n\n// This throws, because it can't send/receive data as expected\nRequest.prototype.pipe = Request.prototype.write = function(){\n  throw Error(\"Streaming is not supported in browser version of superagent\");\n};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\nRequest.prototype._isHost = function _isHost(obj) {\n  // Native objects stringify to [object File], [object Blob], [object FormData], etc.\n  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';\n}\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  if (this._endCalled) {\n    console.warn(\"Warning: .end() was called twice. This is not supported in superagent\");\n  }\n  this._endCalled = true;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // querystring\n  this._finalizeQueryString();\n\n  return this._end();\n};\n\nRequest.prototype._end = function() {\n  var self = this;\n  var xhr = (this.xhr = request.getXHR());\n  var data = this._formData || this._data;\n\n  this._setTimeouts();\n\n  // state change\n  xhr.onreadystatechange = function(){\n    var readyState = xhr.readyState;\n    if (readyState >= 2 && self._responseTimeoutTimer) {\n      clearTimeout(self._responseTimeoutTimer);\n    }\n    if (4 != readyState) {\n      return;\n    }\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (!status) {\n      if (self.timedout || self._aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(direction, e) {\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    e.direction = direction;\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    try {\n      xhr.onprogress = handleProgress.bind(null, 'download');\n      if (xhr.upload) {\n        xhr.upload.onprogress = handleProgress.bind(null, 'upload');\n      }\n    } catch(e) {\n      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n      // Reported here:\n      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n    }\n  }\n\n  // initiate request\n  try {\n    if (this.username && this.password) {\n      xhr.open(this.method, this.url, true, this.username, this.password);\n    } else {\n      xhr.open(this.method, this.url, true);\n    }\n  } catch (err) {\n    // see #1149\n    return this.callback(err);\n  }\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {\n    // serialize stuff\n    var contentType = this._header['content-type'];\n    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) {\n      serialize = request.serialize['application/json'];\n    }\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n\n    if (this.header.hasOwnProperty(field))\n      xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\nrequest.agent = function() {\n  return new Agent();\n};\n\n[\"GET\", \"POST\", \"OPTIONS\", \"PATCH\", \"PUT\", \"DELETE\"].forEach(function(method) {\n  Agent.prototype[method.toLowerCase()] = function(url, fn) {\n    var req = new request.Request(method, url);\n    this._setDefaults(req);\n    if (fn) {\n      req.end(fn);\n    }\n    return req;\n  };\n});\n\nAgent.prototype.del = Agent.prototype['delete'];\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn) {\n  var req = request('GET', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn) {\n  var req = request('HEAD', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * OPTIONS query to `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.options = function(url, data, fn) {\n  var req = request('OPTIONS', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nfunction del(url, data, fn) {\n  var req = request('DELETE', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n}\n\nrequest['del'] = del;\nrequest['delete'] = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn) {\n  var req = request('PATCH', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn) {\n  var req = request('POST', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn) {\n  var req = request('PUT', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Module of mixed-in functions shared between node and client code\n */\nvar isObject = __webpack_require__(0);\n\n/**\n * Expose `RequestBase`.\n */\n\nmodule.exports = RequestBase;\n\n/**\n * Initialize a new `RequestBase`.\n *\n * @api public\n */\n\nfunction RequestBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in RequestBase.prototype) {\n    obj[key] = RequestBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.clearTimeout = function _clearTimeout(){\n  clearTimeout(this._timer);\n  clearTimeout(this._responseTimeoutTimer);\n  delete this._timer;\n  delete this._responseTimeoutTimer;\n  return this;\n};\n\n/**\n * Override default response body parser\n *\n * This function will be called to convert incoming data into request.body\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.parse = function parse(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set format of binary response body.\n * In browser valid formats are 'blob' and 'arraybuffer',\n * which return Blob and ArrayBuffer, respectively.\n *\n * In Node all values result in Buffer.\n *\n * Examples:\n *\n *      req.get('/')\n *        .responseType('blob')\n *        .end(callback);\n *\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.responseType = function(val){\n  this._responseType = val;\n  return this;\n};\n\n/**\n * Override default request body serializer\n *\n * This function will be called to convert data set via .send or .attach into payload to send\n *\n * @param {Function}\n * @api public\n */\n\nRequestBase.prototype.serialize = function serialize(fn){\n  this._serializer = fn;\n  return this;\n};\n\n/**\n * Set timeouts.\n *\n * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.\n * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.\n *\n * Value of 0 or false means no timeout.\n *\n * @param {Number|Object} ms or {response, deadline}\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.timeout = function timeout(options){\n  if (!options || 'object' !== typeof options) {\n    this._timeout = options;\n    this._responseTimeout = 0;\n    return this;\n  }\n\n  for(var option in options) {\n    switch(option) {\n      case 'deadline':\n        this._timeout = options.deadline;\n        break;\n      case 'response':\n        this._responseTimeout = options.response;\n        break;\n      default:\n        console.warn(\"Unknown timeout option\", option);\n    }\n  }\n  return this;\n};\n\n/**\n * Set number of retry attempts on error.\n *\n * Failed requests will be retried 'count' times if timeout or err.code >= 500.\n *\n * @param {Number} count\n * @param {Function} [fn]\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.retry = function retry(count, fn){\n  // Default to 1 if no count passed or true\n  if (arguments.length === 0 || count === true) count = 1;\n  if (count <= 0) count = 0;\n  this._maxRetries = count;\n  this._retries = 0;\n  this._retryCallback = fn;\n  return this;\n};\n\nvar ERROR_CODES = [\n  'ECONNRESET',\n  'ETIMEDOUT',\n  'EADDRINFO',\n  'ESOCKETTIMEDOUT'\n];\n\n/**\n * Determine if a request should be retried.\n * (Borrowed from segmentio/superagent-retry)\n *\n * @param {Error} err\n * @param {Response} [res]\n * @returns {Boolean}\n */\nRequestBase.prototype._shouldRetry = function(err, res) {\n  if (!this._maxRetries || this._retries++ >= this._maxRetries) {\n    return false;\n  }\n  if (this._retryCallback) {\n    try {\n      var override = this._retryCallback(err, res);\n      if (override === true) return true;\n      if (override === false) return false;\n      // undefined falls back to defaults\n    } catch(e) {\n      console.error(e);\n    }\n  }\n  if (res && res.status && res.status >= 500 && res.status != 501) return true;\n  if (err) {\n    if (err.code && ~ERROR_CODES.indexOf(err.code)) return true;\n    // Superagent timeout\n    if (err.timeout && err.code == 'ECONNABORTED') return true;\n    if (err.crossDomain) return true;\n  }\n  return false;\n};\n\n/**\n * Retry request\n *\n * @return {Request} for chaining\n * @api private\n */\n\nRequestBase.prototype._retry = function() {\n\n  this.clearTimeout();\n\n  // node\n  if (this.req) {\n    this.req = null;\n    this.req = this.request();\n  }\n\n  this._aborted = false;\n  this.timedout = false;\n\n  return this._end();\n};\n\n/**\n * Promise support\n *\n * @param {Function} resolve\n * @param {Function} [reject]\n * @return {Request}\n */\n\nRequestBase.prototype.then = function then(resolve, reject) {\n  if (!this._fullfilledPromise) {\n    var self = this;\n    if (this._endCalled) {\n      console.warn(\"Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises\");\n    }\n    this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {\n      self.end(function(err, res) {\n        if (err) innerReject(err);\n        else innerResolve(res);\n      });\n    });\n  }\n  return this._fullfilledPromise.then(resolve, reject);\n};\n\nRequestBase.prototype['catch'] = function(cb) {\n  return this.then(undefined, cb);\n};\n\n/**\n * Allow for extension\n */\n\nRequestBase.prototype.use = function use(fn) {\n  fn(this);\n  return this;\n};\n\nRequestBase.prototype.ok = function(cb) {\n  if ('function' !== typeof cb) throw Error(\"Callback required\");\n  this._okCallback = cb;\n  return this;\n};\n\nRequestBase.prototype._isResponseOK = function(res) {\n  if (!res) {\n    return false;\n  }\n\n  if (this._okCallback) {\n    return this._okCallback(res);\n  }\n\n  return res.status >= 200 && res.status < 300;\n};\n\n/**\n * Get request header `field`.\n * Case-insensitive.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nRequestBase.prototype.get = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Get case-insensitive header `field` value.\n * This is a deprecated internal API. Use `.get(field)` instead.\n *\n * (getHeader is no longer used internally by the superagent code base)\n *\n * @param {String} field\n * @return {String}\n * @api private\n * @deprecated\n */\n\nRequestBase.prototype.getHeader = RequestBase.prototype.get;\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n * Case-insensitive.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n * Case-insensitive.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n */\nRequestBase.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Write the field `name` and `val`, or multiple fields with one object\n * for \"multipart/form-data\" request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n *\n * request.post('/upload')\n *   .field({ foo: 'bar', baz: 'qux' })\n *   .end(callback);\n * ```\n *\n * @param {String|Object} name\n * @param {String|Blob|File|Buffer|fs.ReadStream} val\n * @return {Request} for chaining\n * @api public\n */\nRequestBase.prototype.field = function(name, val) {\n  // name should be either a string or an object.\n  if (null === name || undefined === name) {\n    throw new Error('.field(name, val) name can not be empty');\n  }\n\n  if (this._data) {\n    console.error(\".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObject(name)) {\n    for (var key in name) {\n      this.field(key, name[key]);\n    }\n    return this;\n  }\n\n  if (Array.isArray(val)) {\n    for (var i in val) {\n      this.field(name, val[i]);\n    }\n    return this;\n  }\n\n  // val should be defined now\n  if (null === val || undefined === val) {\n    throw new Error('.field(name, val) val can not be empty');\n  }\n  if ('boolean' === typeof val) {\n    val = '' + val;\n  }\n  this._getFormData().append(name, val);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\nRequestBase.prototype.abort = function(){\n  if (this._aborted) {\n    return this;\n  }\n  this._aborted = true;\n  this.xhr && this.xhr.abort(); // browser\n  this.req && this.req.abort(); // node\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\nRequestBase.prototype._auth = function(user, pass, options, base64Encoder) {\n  switch (options.type) {\n    case 'basic':\n      this.set('Authorization', 'Basic ' + base64Encoder(user + ':' + pass));\n      break;\n\n    case 'auto':\n      this.username = user;\n      this.password = pass;\n      break;\n\n    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })\n      this.set('Authorization', 'Bearer ' + user);\n      break;\n  }\n  return this;\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequestBase.prototype.withCredentials = function(on) {\n  // This is browser-only functionality. Node side is no-op.\n  if (on == undefined) on = true;\n  this._withCredentials = on;\n  return this;\n};\n\n/**\n * Set the max redirects to `n`. Does noting in browser XHR implementation.\n *\n * @param {Number} n\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.redirects = function(n){\n  this._maxRedirects = n;\n  return this;\n};\n\n/**\n * Maximum size of buffered response body, in bytes. Counts uncompressed size.\n * Default 200MB.\n *\n * @param {Number} n\n * @return {Request} for chaining\n */\nRequestBase.prototype.maxResponseSize = function(n){\n  if ('number' !== typeof n) {\n    throw TypeError(\"Invalid argument\");\n  }\n  this._maxResponseSize = n;\n  return this;\n};\n\n/**\n * Convert to a plain javascript object (not JSON string) of scalar properties.\n * Note as this method is designed to return a useful non-this value,\n * it cannot be chained.\n *\n * @return {Object} describing method, url, and data of this request\n * @api public\n */\n\nRequestBase.prototype.toJSON = function() {\n  return {\n    method: this.method,\n    url: this.url,\n    data: this._data,\n    headers: this._header,\n  };\n};\n\n/**\n * Send `data` as the request body, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.send = function(data){\n  var isObj = isObject(data);\n  var type = this._header['content-type'];\n\n  if (this._formData) {\n    console.error(\".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()\");\n  }\n\n  if (isObj && !this._data) {\n    if (Array.isArray(data)) {\n      this._data = [];\n    } else if (!this._isHost(data)) {\n      this._data = {};\n    }\n  } else if (data && this._data && this._isHost(this._data)) {\n    throw Error(\"Can't merge these send calls\");\n  }\n\n  // merge\n  if (isObj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    // default to x-www-form-urlencoded\n    if (!type) this.type('form');\n    type = this._header['content-type'];\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!isObj || this._isHost(data)) {\n    return this;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Sort `querystring` by the sort function\n *\n *\n * Examples:\n *\n *       // default order\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery()\n *         .end(callback)\n *\n *       // customized sort function\n *       request.get('/user')\n *         .query('name=Nick')\n *         .query('search=Manny')\n *         .sortQuery(function(a, b){\n *           return a.length - b.length;\n *         })\n *         .end(callback)\n *\n *\n * @param {Function} sort\n * @return {Request} for chaining\n * @api public\n */\n\nRequestBase.prototype.sortQuery = function(sort) {\n  // _sort default to true but otherwise can be a function or boolean\n  this._sort = typeof sort === 'undefined' ? true : sort;\n  return this;\n};\n\n/**\n * Compose querystring to append to req.url\n *\n * @api private\n */\nRequestBase.prototype._finalizeQueryString = function(){\n  var query = this._query.join('&');\n  if (query) {\n    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;\n  }\n  this._query.length = 0; // Makes the call idempotent\n\n  if (this._sort) {\n    var index = this.url.indexOf('?');\n    if (index >= 0) {\n      var queryArr = this.url.substring(index + 1).split('&');\n      if ('function' === typeof this._sort) {\n        queryArr.sort(this._sort);\n      } else {\n        queryArr.sort();\n      }\n      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');\n    }\n  }\n};\n\n// For backwards compat only\nRequestBase.prototype._appendQueryString = function() {console.trace(\"Unsupported\");}\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequestBase.prototype._timeoutError = function(reason, timeout, errno){\n  if (this._aborted) {\n    return;\n  }\n  var err = new Error(reason + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  err.code = 'ECONNABORTED';\n  err.errno = errno;\n  this.timedout = true;\n  this.abort();\n  this.callback(err);\n};\n\nRequestBase.prototype._setTimeouts = function() {\n  var self = this;\n\n  // deadline\n  if (this._timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self._timeoutError('Timeout of ', self._timeout, 'ETIME');\n    }, this._timeout);\n  }\n  // response timeout\n  if (this._responseTimeout && !this._responseTimeoutTimer) {\n    this._responseTimeoutTimer = setTimeout(function(){\n      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');\n    }, this._responseTimeout);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Module dependencies.\n */\n\nvar utils = __webpack_require__(24);\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the prototype properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in ResponseBase.prototype) {\n    obj[key] = ResponseBase.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function(field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function(header){\n    // TODO: moar!\n    // TODO: make this a util\n\n    // content-type\n    var ct = header['content-type'] || '';\n    this.type = utils.type(ct);\n\n    // params\n    var params = utils.params(ct);\n    for (var key in params) this[key] = params[key];\n\n    this.links = {};\n\n    // links\n    try {\n        if (header.link) {\n            this.links = utils.parseLinks(header.link);\n        }\n    } catch (err) {\n        // ignore\n    }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function(status){\n    var type = status / 100 | 0;\n\n    // status / class\n    this.status = this.statusCode = status;\n    this.statusType = type;\n\n    // basics\n    this.info = 1 == type;\n    this.ok = 2 == type;\n    this.redirect = 3 == type;\n    this.clientError = 4 == type;\n    this.serverError = 5 == type;\n    this.error = (4 == type || 5 == type)\n        ? this.toError()\n        : false;\n\n    // sugar\n    this.created = 201 == status;\n    this.accepted = 202 == status;\n    this.noContent = 204 == status;\n    this.badRequest = 400 == status;\n    this.unauthorized = 401 == status;\n    this.notAcceptable = 406 == status;\n    this.forbidden = 403 == status;\n    this.notFound = 404 == status;\n    this.unprocessableEntity = 422 == status;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3N1cGVyYWdlbnQvbGliL3Jlc3BvbnNlLWJhc2UuanM/MjVhMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8qKlxuICogRXhwb3NlIGBSZXNwb25zZUJhc2VgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2VCYXNlO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYSBuZXcgYFJlc3BvbnNlQmFzZWAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXNwb25zZUJhc2Uob2JqKSB7XG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xufVxuXG4vKipcbiAqIE1peGluIHRoZSBwcm90b3R5cGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBtaXhpbihvYmopIHtcbiAgZm9yICh2YXIga2V5IGluIFJlc3BvbnNlQmFzZS5wcm90b3R5cGUpIHtcbiAgICBvYmpba2V5XSA9IFJlc3BvbnNlQmFzZS5wcm90b3R5cGVba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEdldCBjYXNlLWluc2Vuc2l0aXZlIGBmaWVsZGAgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlc3BvbnNlQmFzZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oZmllbGQpIHtcbiAgcmV0dXJuIHRoaXMuaGVhZGVyW2ZpZWxkLnRvTG93ZXJDYXNlKCldO1xufTtcblxuLyoqXG4gKiBTZXQgaGVhZGVyIHJlbGF0ZWQgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gYC50eXBlYCB0aGUgY29udGVudCB0eXBlIHdpdGhvdXQgcGFyYW1zXG4gKlxuICogQSByZXNwb25zZSBvZiBcIkNvbnRlbnQtVHlwZTogdGV4dC9wbGFpbjsgY2hhcnNldD11dGYtOFwiXG4gKiB3aWxsIHByb3ZpZGUgeW91IHdpdGggYSBgLnR5cGVgIG9mIFwidGV4dC9wbGFpblwiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlc3BvbnNlQmFzZS5wcm90b3R5cGUuX3NldEhlYWRlclByb3BlcnRpZXMgPSBmdW5jdGlvbihoZWFkZXIpe1xuICAgIC8vIFRPRE86IG1vYXIhXG4gICAgLy8gVE9ETzogbWFrZSB0aGlzIGEgdXRpbFxuXG4gICAgLy8gY29udGVudC10eXBlXG4gICAgdmFyIGN0ID0gaGVhZGVyWydjb250ZW50LXR5cGUnXSB8fCAnJztcbiAgICB0aGlzLnR5cGUgPSB1dGlscy50eXBlKGN0KTtcblxuICAgIC8vIHBhcmFtc1xuICAgIHZhciBwYXJhbXMgPSB1dGlscy5wYXJhbXMoY3QpO1xuICAgIGZvciAodmFyIGtleSBpbiBwYXJhbXMpIHRoaXNba2V5XSA9IHBhcmFtc1trZXldO1xuXG4gICAgdGhpcy5saW5rcyA9IHt9O1xuXG4gICAgLy8gbGlua3NcbiAgICB0cnkge1xuICAgICAgICBpZiAoaGVhZGVyLmxpbmspIHtcbiAgICAgICAgICAgIHRoaXMubGlua3MgPSB1dGlscy5wYXJzZUxpbmtzKGhlYWRlci5saW5rKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBpZ25vcmVcbiAgICB9XG59O1xuXG4vKipcbiAqIFNldCBmbGFncyBzdWNoIGFzIGAub2tgIGJhc2VkIG9uIGBzdGF0dXNgLlxuICpcbiAqIEZvciBleGFtcGxlIGEgMnh4IHJlc3BvbnNlIHdpbGwgZ2l2ZSB5b3UgYSBgLm9rYCBvZiBfX3RydWVfX1xuICogd2hlcmVhcyA1eHggd2lsbCBiZSBfX2ZhbHNlX18gYW5kIGAuZXJyb3JgIHdpbGwgYmUgX190cnVlX18uIFRoZVxuICogYC5jbGllbnRFcnJvcmAgYW5kIGAuc2VydmVyRXJyb3JgIGFyZSBhbHNvIGF2YWlsYWJsZSB0byBiZSBtb3JlXG4gKiBzcGVjaWZpYywgYW5kIGAuc3RhdHVzVHlwZWAgaXMgdGhlIGNsYXNzIG9mIGVycm9yIHJhbmdpbmcgZnJvbSAxLi41XG4gKiBzb21ldGltZXMgdXNlZnVsIGZvciBtYXBwaW5nIHJlc3BvbmQgY29sb3JzIGV0Yy5cbiAqXG4gKiBcInN1Z2FyXCIgcHJvcGVydGllcyBhcmUgYWxzbyBkZWZpbmVkIGZvciBjb21tb24gY2FzZXMuIEN1cnJlbnRseSBwcm92aWRpbmc6XG4gKlxuICogICAtIC5ub0NvbnRlbnRcbiAqICAgLSAuYmFkUmVxdWVzdFxuICogICAtIC51bmF1dGhvcml6ZWRcbiAqICAgLSAubm90QWNjZXB0YWJsZVxuICogICAtIC5ub3RGb3VuZFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0dXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlc3BvbnNlQmFzZS5wcm90b3R5cGUuX3NldFN0YXR1c1Byb3BlcnRpZXMgPSBmdW5jdGlvbihzdGF0dXMpe1xuICAgIHZhciB0eXBlID0gc3RhdHVzIC8gMTAwIHwgMDtcblxuICAgIC8vIHN0YXR1cyAvIGNsYXNzXG4gICAgdGhpcy5zdGF0dXMgPSB0aGlzLnN0YXR1c0NvZGUgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUeXBlID0gdHlwZTtcblxuICAgIC8vIGJhc2ljc1xuICAgIHRoaXMuaW5mbyA9IDEgPT0gdHlwZTtcbiAgICB0aGlzLm9rID0gMiA9PSB0eXBlO1xuICAgIHRoaXMucmVkaXJlY3QgPSAzID09IHR5cGU7XG4gICAgdGhpcy5jbGllbnRFcnJvciA9IDQgPT0gdHlwZTtcbiAgICB0aGlzLnNlcnZlckVycm9yID0gNSA9PSB0eXBlO1xuICAgIHRoaXMuZXJyb3IgPSAoNCA9PSB0eXBlIHx8IDUgPT0gdHlwZSlcbiAgICAgICAgPyB0aGlzLnRvRXJyb3IoKVxuICAgICAgICA6IGZhbHNlO1xuXG4gICAgLy8gc3VnYXJcbiAgICB0aGlzLmNyZWF0ZWQgPSAyMDEgPT0gc3RhdHVzO1xuICAgIHRoaXMuYWNjZXB0ZWQgPSAyMDIgPT0gc3RhdHVzO1xuICAgIHRoaXMubm9Db250ZW50ID0gMjA0ID09IHN0YXR1cztcbiAgICB0aGlzLmJhZFJlcXVlc3QgPSA0MDAgPT0gc3RhdHVzO1xuICAgIHRoaXMudW5hdXRob3JpemVkID0gNDAxID09IHN0YXR1cztcbiAgICB0aGlzLm5vdEFjY2VwdGFibGUgPSA0MDYgPT0gc3RhdHVzO1xuICAgIHRoaXMuZm9yYmlkZGVuID0gNDAzID09IHN0YXR1cztcbiAgICB0aGlzLm5vdEZvdW5kID0gNDA0ID09IHN0YXR1cztcbiAgICB0aGlzLnVucHJvY2Vzc2FibGVFbnRpdHkgPSA0MjIgPT0gc3RhdHVzO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9zdXBlcmFnZW50L2xpYi9yZXNwb25zZS1iYXNlLmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = function(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = function(str){\n  return str.split(/ *; */).reduce(function(obj, str){\n    var parts = str.split(/ *= */);\n    var key = parts.shift();\n    var val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = function(str){\n  return str.split(/ *, */).reduce(function(obj, str){\n    var parts = str.split(/ *; */);\n    var url = parts[0].slice(1, -1);\n    var rel = parts[1].split(/ *= */)[1].slice(1, -1);\n    obj[rel] = url;\n    return obj;\n  }, {});\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = function(header, changesOrigin){\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header['host'];\n  // secuirty\n  if (changesOrigin) {\n    delete header['authorization'];\n    delete header['cookie'];\n  }\n  return header;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3N1cGVyYWdlbnQvbGliL3V0aWxzLmpzPzE1YmIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFJldHVybiB0aGUgbWltZSB0eXBlIGZvciB0aGUgZ2l2ZW4gYHN0cmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy50eXBlID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5zcGxpdCgvICo7ICovKS5zaGlmdCgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gaGVhZGVyIGZpZWxkIHBhcmFtZXRlcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5wYXJhbXMgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnNwbGl0KC8gKjsgKi8pLnJlZHVjZShmdW5jdGlvbihvYmosIHN0cil7XG4gICAgdmFyIHBhcnRzID0gc3RyLnNwbGl0KC8gKj0gKi8pO1xuICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpO1xuICAgIHZhciB2YWwgPSBwYXJ0cy5zaGlmdCgpO1xuXG4gICAgaWYgKGtleSAmJiB2YWwpIG9ialtrZXldID0gdmFsO1xuICAgIHJldHVybiBvYmo7XG4gIH0sIHt9KTtcbn07XG5cbi8qKlxuICogUGFyc2UgTGluayBoZWFkZXIgZmllbGRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMucGFyc2VMaW5rcyA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIuc3BsaXQoLyAqLCAqLykucmVkdWNlKGZ1bmN0aW9uKG9iaiwgc3RyKXtcbiAgICB2YXIgcGFydHMgPSBzdHIuc3BsaXQoLyAqOyAqLyk7XG4gICAgdmFyIHVybCA9IHBhcnRzWzBdLnNsaWNlKDEsIC0xKTtcbiAgICB2YXIgcmVsID0gcGFydHNbMV0uc3BsaXQoLyAqPSAqLylbMV0uc2xpY2UoMSwgLTEpO1xuICAgIG9ialtyZWxdID0gdXJsO1xuICAgIHJldHVybiBvYmo7XG4gIH0sIHt9KTtcbn07XG5cbi8qKlxuICogU3RyaXAgY29udGVudCByZWxhdGVkIGZpZWxkcyBmcm9tIGBoZWFkZXJgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBoZWFkZXJcbiAqIEByZXR1cm4ge09iamVjdH0gaGVhZGVyXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmNsZWFuSGVhZGVyID0gZnVuY3Rpb24oaGVhZGVyLCBjaGFuZ2VzT3JpZ2luKXtcbiAgZGVsZXRlIGhlYWRlclsnY29udGVudC10eXBlJ107XG4gIGRlbGV0ZSBoZWFkZXJbJ2NvbnRlbnQtbGVuZ3RoJ107XG4gIGRlbGV0ZSBoZWFkZXJbJ3RyYW5zZmVyLWVuY29kaW5nJ107XG4gIGRlbGV0ZSBoZWFkZXJbJ2hvc3QnXTtcbiAgLy8gc2VjdWlydHlcbiAgaWYgKGNoYW5nZXNPcmlnaW4pIHtcbiAgICBkZWxldGUgaGVhZGVyWydhdXRob3JpemF0aW9uJ107XG4gICAgZGVsZXRlIGhlYWRlclsnY29va2llJ107XG4gIH1cbiAgcmV0dXJuIGhlYWRlcjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vc3VwZXJhZ2VudC9saWIvdXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n");

/***/ })
/******/ ]);